(* This file is auto-generated by stubgen tool.
   It should not be modified by hand and it should not be versioned
   (except by continuous integration on the dedicated bootstrap branch). *)
external get_build_session_timestamp :
  unit -> int = "clang_getBuildSessionTimestamp_wrapper"[@@ocaml.doc
                                                          "Return the timestamp for use with Clang's -fbuild-session-timestamp= option."]
type cxvirtualfileoverlay
external virtual_file_overlay_create :
  int -> cxvirtualfileoverlay = "clang_VirtualFileOverlay_create_wrapper"
[@@ocaml.doc
  "Create a CXVirtualFileOverlay object. Must be disposed with clang_VirtualFileOverlay_dispose()."]
type cxerrorcode =
  | Failure
  [@ocaml.doc "A generic error code, no further details are available."]
  | Crashed
  [@ocaml.doc "libclang crashed while performing the requested operation."]
  | InvalidArguments
  [@ocaml.doc
    "The function detected that the arguments violate the function contract."]
  | ASTReadError [@ocaml.doc "An AST deserialization error has occurred."]
[@@deriving refl][@@ocaml.doc "Error codes returned by libclang routines."]
external virtual_file_overlay_add_file_mapping :
  cxvirtualfileoverlay ->
    virtual_path:string -> real_path:string -> (unit, cxerrorcode) result =
    "clang_VirtualFileOverlay_addFileMapping_wrapper"[@@ocaml.doc
                                                       "Map an absolute virtual file path to an absolute real one. The virtual path must be canonicalized (not contain \".\"/\"..\")."]
external virtual_file_overlay_set_case_sensitivity :
  cxvirtualfileoverlay -> int -> (unit, cxerrorcode) result =
    "clang_VirtualFileOverlay_setCaseSensitivity_wrapper"[@@ocaml.doc
                                                           "Set the case sensitivity for the CXVirtualFileOverlay object. The CXVirtualFileOverlay object is case-sensitive by default, this option can be used to override the default."]
external virtual_file_overlay_write_to_buffer :
  cxvirtualfileoverlay -> int -> (string, cxerrorcode) result =
    "clang_VirtualFileOverlay_writeToBuffer_wrapper"[@@ocaml.doc
                                                      "Write out the CXVirtualFileOverlay object to a char buffer."]
type cxmodulemapdescriptor
external module_map_descriptor_create :
  int -> cxmodulemapdescriptor = "clang_ModuleMapDescriptor_create_wrapper"
[@@ocaml.doc
  "Create a CXModuleMapDescriptor object. Must be disposed with clang_ModuleMapDescriptor_dispose()."]
external module_map_descriptor_set_framework_module_name :
  cxmodulemapdescriptor -> string -> (unit, cxerrorcode) result =
    "clang_ModuleMapDescriptor_setFrameworkModuleName_wrapper"[@@ocaml.doc
                                                                "Sets the framework module name that the module.map describes."]
external module_map_descriptor_set_umbrella_header :
  cxmodulemapdescriptor -> string -> (unit, cxerrorcode) result =
    "clang_ModuleMapDescriptor_setUmbrellaHeader_wrapper"[@@ocaml.doc
                                                           "Sets the umbrealla header name that the module.map describes."]
external module_map_descriptor_write_to_buffer :
  cxmodulemapdescriptor -> int -> (string, cxerrorcode) result =
    "clang_ModuleMapDescriptor_writeToBuffer_wrapper"[@@ocaml.doc
                                                       "Write out the CXModuleMapDescriptor object to a char buffer."]
type cxindex
external create_index :
  exclude_declarations_from_pch:bool -> display_diagnostics:bool -> cxindex =
    "clang_createIndex_wrapper"[@@ocaml.doc
                                 "Provides a shared context for creating translation units."]
module Cxglobaloptflags =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let none = 0
    let thread_background_priority_for_indexing = 1
    let thread_background_priority_for_editing = 2
    let thread_background_priority_for_all = 3
  end
external cxindex_set_global_options :
  cxindex -> Cxglobaloptflags.t -> unit =
    "clang_CXIndex_setGlobalOptions_wrapper"[@@ocaml.doc
                                              "Sets general options associated with a CXIndex."]
external cxindex_get_global_options :
  cxindex -> Cxglobaloptflags.t = "clang_CXIndex_getGlobalOptions_wrapper"
[@@ocaml.doc "Gets the general options associated with a CXIndex."]
type cxfile
external get_file_name : cxfile -> string = "clang_getFileName_wrapper"
[@@ocaml.doc "Retrieve the complete file and path name of the given file."]
external get_file_time : cxfile -> int = "clang_getFileTime_wrapper"[@@ocaml.doc
                                                                    "Retrieve the last modification time of the given file."]
type cxfileuniqueid = (int * int * int)[@@ocaml.doc
                                         "Uniquely identifies a CXFile, that refers to the same underlying file, across an indexing session."]
external get_file_unique_id :
  cxfile -> cxfileuniqueid option = "clang_getFileUniqueID_wrapper"[@@ocaml.doc
                                                                    "Retrieve the unique ID for the given file."]
type cxtranslationunit
external is_file_multiple_include_guarded :
  cxtranslationunit -> cxfile -> bool =
    "clang_isFileMultipleIncludeGuarded_wrapper"[@@ocaml.doc
                                                  "Determine whether the given header is guarded against multiple inclusions, either with the conventional #ifndef/#define/#endif macro guards or with #pragma once."]
external get_file :
  cxtranslationunit -> string -> cxfile = "clang_getFile_wrapper"[@@ocaml.doc
                                                                   "Retrieve a file handle within the given translation unit."]
type cxsourcelocation[@@ocaml.doc
                       "Identifies a specific source location within a translation unit."]
external get_null_location :
  unit -> cxsourcelocation = "clang_getNullLocation_wrapper"[@@ocaml.doc
                                                              "Retrieve a NULL (invalid) source location."]
external equal_locations :
  cxsourcelocation -> cxsourcelocation -> bool =
    "clang_equalLocations_wrapper"[@@ocaml.doc
                                    "Determine whether two source locations, which must refer into the same translation unit, refer to exactly the same point in the source code."]
external get_location :
  cxtranslationunit -> cxfile -> line:int -> column:int -> cxsourcelocation =
    "clang_getLocation_wrapper"[@@ocaml.doc
                                 "Retrieves the source location associated with a given file/line/column in a particular translation unit."]
external get_location_for_offset :
  cxtranslationunit -> cxfile -> int -> cxsourcelocation =
    "clang_getLocationForOffset_wrapper"[@@ocaml.doc
                                          "Retrieves the source location associated with a given character offset in a particular translation unit."]
external location_is_in_system_header :
  cxsourcelocation -> bool = "clang_Location_isInSystemHeader_wrapper"
[@@ocaml.doc
  "Returns non-zero if the given source location is in a system header."]
external location_is_from_main_file :
  cxsourcelocation -> bool = "clang_Location_isFromMainFile_wrapper"[@@ocaml.doc
                                                                    "Returns non-zero if the given source location is in the main file of the corresponding translation unit."]
type cxsourcerange[@@ocaml.doc
                    "Identifies a half-open character range in the source code."]
external get_null_range :
  unit -> cxsourcerange = "clang_getNullRange_wrapper"[@@ocaml.doc
                                                        "Retrieve a NULL (invalid) source range."]
external get_range :
  cxsourcelocation -> cxsourcelocation -> cxsourcerange =
    "clang_getRange_wrapper"[@@ocaml.doc
                              "Retrieve a source range given the beginning and ending source locations."]
external equal_ranges :
  cxsourcerange -> cxsourcerange -> bool = "clang_equalRanges_wrapper"
[@@ocaml.doc "Determine whether two ranges are equivalent."]
external range_is_null : cxsourcerange -> bool = "clang_Range_isNull_wrapper"
[@@ocaml.doc "Returns non-zero if range is null."]
external get_expansion_location :
  cxsourcelocation -> (cxfile * int * int * int) =
    "clang_getExpansionLocation_wrapper"[@@ocaml.doc
                                          "Retrieve the file, line, column, and offset represented by the given source location."]
external get_presumed_location :
  cxsourcelocation -> (string * int * int) =
    "clang_getPresumedLocation_wrapper"[@@ocaml.doc
                                         "Retrieve the file, line, column, and offset represented by the given source location, as specified in a # line directive."]
external get_instantiation_location :
  cxsourcelocation -> (cxfile * int * int * int) =
    "clang_getInstantiationLocation_wrapper"[@@ocaml.doc
                                              "Legacy API to retrieve the file, line, column, and offset represented by the given source location."]
external get_spelling_location :
  cxsourcelocation -> (cxfile * int * int * int) =
    "clang_getSpellingLocation_wrapper"[@@ocaml.doc
                                         "Retrieve the file, line, column, and offset represented by the given source location."]
external get_file_location :
  cxsourcelocation -> (cxfile * int * int * int) =
    "clang_getFileLocation_wrapper"[@@ocaml.doc
                                     "Retrieve the file, line, column, and offset represented by the given source location."]
external get_range_start :
  cxsourcerange -> cxsourcelocation = "clang_getRangeStart_wrapper"[@@ocaml.doc
                                                                    "Retrieve a source location representing the first character within a source range."]
external get_range_end :
  cxsourcerange -> cxsourcelocation = "clang_getRangeEnd_wrapper"[@@ocaml.doc
                                                                   "Retrieve a source location representing the last character within a source range."]
external get_skipped_ranges :
  cxtranslationunit -> cxfile -> cxsourcerange array =
    "clang_getSkippedRanges_wrapper"[@@ocaml.doc
                                      "Retrieve all ranges that were skipped by the preprocessor."]
type cxdiagnosticset
external get_num_diagnostics_in_set :
  cxdiagnosticset -> int = "clang_getNumDiagnosticsInSet_wrapper"[@@ocaml.doc
                                                                   "Determine the number of diagnostics in a CXDiagnosticSet."]
type cxdiagnostic
external get_diagnostic_in_set :
  cxdiagnosticset -> int -> cxdiagnostic = "clang_getDiagnosticInSet_wrapper"
[@@ocaml.doc
  "Retrieve a diagnostic associated with the given CXDiagnosticSet."]
type cxloaddiag_error =
  | Unknown
  [@ocaml.doc
    "Indicates that an unknown error occurred while attempting to deserialize diagnostics."]
  | CannotLoad
  [@ocaml.doc
    "Indicates that the file containing the serialized diagnostics could not be opened."]
  | InvalidFile
  [@ocaml.doc
    "Indicates that the serialized diagnostics file is invalid or corrupt."]
[@@deriving refl][@@ocaml.doc
                   "Describes the kind of error that occurred (if any) in a call to clang_loadDiagnostics."]
external load_diagnostics :
  string -> (cxdiagnosticset, (cxloaddiag_error * string)) result =
    "clang_loadDiagnostics_wrapper"[@@ocaml.doc
                                     "Deserialize a set of diagnostics from a Clang diagnostics bitcode file."]
external get_child_diagnostics :
  cxdiagnostic -> cxdiagnosticset = "clang_getChildDiagnostics_wrapper"
[@@ocaml.doc "Retrieve the child diagnostics of a CXDiagnostic."]
external get_num_diagnostics :
  cxtranslationunit -> int = "clang_getNumDiagnostics_wrapper"[@@ocaml.doc
                                                                "Determine the number of diagnostics produced for the given translation unit."]
external get_diagnostic :
  cxtranslationunit -> int -> cxdiagnostic = "clang_getDiagnostic_wrapper"
[@@ocaml.doc
  "Retrieve a diagnostic associated with the given translation unit."]
external get_diagnostic_set_from_tu :
  cxtranslationunit -> cxdiagnosticset =
    "clang_getDiagnosticSetFromTU_wrapper"[@@ocaml.doc
                                            "Retrieve the complete set of diagnostics associated with a translation unit."]
module Cxdiagnosticdisplayoptions =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let zero = 0
    let display_source_location = 1
    let display_column = 2
    let display_source_ranges = 4
    let display_option = 8
    let display_category_id = 16
    let display_category_name = 32
  end
external format_diagnostic :
  cxdiagnostic -> Cxdiagnosticdisplayoptions.t -> string =
    "clang_formatDiagnostic_wrapper"[@@ocaml.doc
                                      "Format the given diagnostic in a manner that is suitable for display."]
external default_diagnostic_display_options :
  unit -> Cxdiagnosticdisplayoptions.t =
    "clang_defaultDiagnosticDisplayOptions_wrapper"[@@ocaml.doc
                                                     "Retrieve the set of display options most similar to the default behavior of the clang compiler."]
type cxdiagnosticseverity =
  | Ignored
  [@ocaml.doc
    "A diagnostic that has been suppressed, e.g., by a command-line option."]
  | Note
  [@ocaml.doc
    "This diagnostic is a note that should be attached to the previous (non-note) diagnostic."]
  | Warning
  [@ocaml.doc
    "This diagnostic indicates suspicious code that may not be wrong."]
  | Error
  [@ocaml.doc "This diagnostic indicates that the code is ill-formed."]
  | Fatal
  [@ocaml.doc
    "This diagnostic indicates that the code is ill-formed such that future parser recovery is unlikely to produce useful results."]
[@@deriving refl][@@ocaml.doc
                   "Describes the severity of a particular diagnostic."]
external get_diagnostic_severity :
  cxdiagnostic -> cxdiagnosticseverity =
    "clang_getDiagnosticSeverity_wrapper"[@@ocaml.doc
                                           "Determine the severity of the given diagnostic."]
external get_diagnostic_location :
  cxdiagnostic -> cxsourcelocation = "clang_getDiagnosticLocation_wrapper"
[@@ocaml.doc "Retrieve the source location of the given diagnostic."]
external get_diagnostic_spelling :
  cxdiagnostic -> string = "clang_getDiagnosticSpelling_wrapper"[@@ocaml.doc
                                                                  "Retrieve the text of the given diagnostic."]
external get_diagnostic_option :
  cxdiagnostic -> (string * string) = "clang_getDiagnosticOption_wrapper"
[@@ocaml.doc
  "Retrieve the name of the command-line option that enabled this diagnostic."]
external get_diagnostic_category :
  cxdiagnostic -> int = "clang_getDiagnosticCategory_wrapper"[@@ocaml.doc
                                                               "Retrieve the category number for this diagnostic."]
external get_diagnostic_category_text :
  cxdiagnostic -> string = "clang_getDiagnosticCategoryText_wrapper"[@@ocaml.doc
                                                                    "Retrieve the diagnostic category text for a given diagnostic."]
external get_diagnostic_num_ranges :
  cxdiagnostic -> int = "clang_getDiagnosticNumRanges_wrapper"[@@ocaml.doc
                                                                "Determine the number of source ranges associated with the given diagnostic."]
external get_diagnostic_range :
  cxdiagnostic -> int -> cxsourcerange = "clang_getDiagnosticRange_wrapper"
[@@ocaml.doc "Retrieve a source range associated with the diagnostic."]
external get_diagnostic_num_fix_its :
  cxdiagnostic -> int = "clang_getDiagnosticNumFixIts_wrapper"[@@ocaml.doc
                                                                "Determine the number of fix-it hints associated with the given diagnostic."]
external get_diagnostic_fix_it :
  cxdiagnostic -> int -> cxsourcerange -> (string * cxsourcerange) =
    "clang_getDiagnosticFixIt_wrapper"[@@ocaml.doc
                                        "Retrieve the replacement information for a given fix-it."]
external get_translation_unit_spelling :
  cxtranslationunit -> string = "clang_getTranslationUnitSpelling_wrapper"
[@@ocaml.doc "Get the original translation unit source file name."]
type cxunsavedfile =
  {
  filename: string
    [@ocaml.doc "The file whose contents have not yet been saved."];
  contents: string
    [@ocaml.doc "A buffer containing the unsaved contents of this file."]}
[@@deriving refl][@@ocaml.doc
                   "Provides the contents of a file that has not yet been saved to disk."]
external create_translation_unit_from_source_file :
  cxindex ->
    string -> string array -> cxunsavedfile array -> cxtranslationunit =
    "clang_createTranslationUnitFromSourceFile_wrapper"[@@ocaml.doc
                                                         "Return the CXTranslationUnit for a given source file and the provided command line arguments one would pass to the compiler."]
external create_translation_unit :
  cxindex -> string -> cxtranslationunit =
    "clang_createTranslationUnit_wrapper"[@@ocaml.doc
                                           "Same as clang_createTranslationUnit2, but returns the CXTranslationUnit instead of an error code. In case of an error this routine returns a NULL CXTranslationUnit, without further detailed error codes."]
external create_translation_unit2 :
  cxindex -> string -> (cxtranslationunit, cxerrorcode) result =
    "clang_createTranslationUnit2_wrapper"[@@ocaml.doc
                                            "Create a translation unit from an AST file ( -emit-ast)."]
module Cxtranslationunit_flags =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let none = 0
    let detailed_preprocessing_record = 1
    let incomplete = 2
    let precompiled_preamble = 4
    let cache_completion_results = 8
    let for_serialization = 16
    let cxxchained_pch = 32
    let skip_function_bodies = 64
    let include_brief_comments_in_code_completion = 128
  end
external default_editing_translation_unit_options :
  unit -> Cxtranslationunit_flags.t =
    "clang_defaultEditingTranslationUnitOptions_wrapper"[@@ocaml.doc
                                                          "Returns the set of flags that is suitable for parsing a translation unit that is being edited."]
external parse_translation_unit :
  cxindex ->
    string ->
      string array ->
        cxunsavedfile array ->
          Cxtranslationunit_flags.t -> cxtranslationunit option =
    "clang_parseTranslationUnit_wrapper"[@@ocaml.doc
                                          "Same as clang_parseTranslationUnit2, but returns the CXTranslationUnit instead of an error code. In case of an error this routine returns a NULL CXTranslationUnit, without further detailed error codes."]
external parse_translation_unit2 :
  cxindex ->
    string ->
      string array ->
        cxunsavedfile array ->
          Cxtranslationunit_flags.t ->
            (cxtranslationunit, cxerrorcode) result =
    "clang_parseTranslationUnit2_wrapper"[@@ocaml.doc
                                           "Parse the given source file and the translation unit corresponding to that file."]
external default_save_options :
  cxtranslationunit -> int = "clang_defaultSaveOptions_wrapper"[@@ocaml.doc
                                                                 "Returns the set of flags that is suitable for saving a translation unit."]
type cxsaveerror =
  | Unknown
  [@ocaml.doc
    "Indicates that an unknown error occurred while attempting to save the file."]
  | TranslationErrors
  [@ocaml.doc
    "Indicates that errors during translation prevented this attempt to save the translation unit."]
  | InvalidTU
  [@ocaml.doc
    "Indicates that the translation unit to be saved was somehow invalid (e.g., NULL)."]
[@@deriving refl][@@ocaml.doc
                   "Describes the kind of error that occurred (if any) in a call to clang_saveTranslationUnit()."]
module Cxsavetranslationunit_flags =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let none = 0
  end
external save_translation_unit :
  cxtranslationunit ->
    string -> Cxsavetranslationunit_flags.t -> (unit, cxsaveerror) result =
    "clang_saveTranslationUnit_wrapper"[@@ocaml.doc
                                         "Saves a translation unit into a serialized representation of that translation unit on disk."]
module Cxreparse_flags =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let none = 0
  end
external default_reparse_options :
  cxtranslationunit -> Cxreparse_flags.t =
    "clang_defaultReparseOptions_wrapper"[@@ocaml.doc
                                           "Returns the set of flags that is suitable for reparsing a translation unit."]
external reparse_translation_unit :
  cxtranslationunit ->
    cxunsavedfile array -> Cxreparse_flags.t -> (unit, cxerrorcode) result =
    "clang_reparseTranslationUnit_wrapper"[@@ocaml.doc
                                            "Reparse the source files that produced this translation unit."]
type cxturesourceusagekind =
  | AST 
  | Identifiers 
  | Selectors 
  | GlobalCompletionResults 
  | SourceManagerContentCache 
  | AST_SideTables 
  | SourceManager_Membuffer_Malloc 
  | SourceManager_Membuffer_MMap 
  | ExternalASTSource_Membuffer_Malloc 
  | ExternalASTSource_Membuffer_MMap 
  | Preprocessor 
  | PreprocessingRecord 
  | SourceManager_DataStructures 
  | Preprocessor_HeaderSearch [@@deriving refl][@@ocaml.doc
                                                 "Categorizes how memory is being used by a translation unit."]
external get_turesource_usage_name :
  cxturesourceusagekind -> string = "clang_getTUResourceUsageName_wrapper"
[@@ocaml.doc
  "Returns the human-readable null-terminated C string that represents the name of the memory category. This string should never be freed."]
type cxturesourceusage[@@ocaml.doc
                        "The memory usage of a CXTranslationUnit, broken into categories."]
external get_cxturesource_usage :
  cxtranslationunit -> cxturesourceusage =
    "clang_getCXTUResourceUsage_wrapper"[@@ocaml.doc
                                          "Return the memory usage of a translation unit. This object should be released with clang_disposeCXTUResourceUsage()."]
type cxcursorkind =
  | UnexposedDecl
  [@ocaml.doc
    "A declaration whose specific kind is not exposed via this interface."]
  | StructDecl [@ocaml.doc "A C or C++ struct."]
  | UnionDecl [@ocaml.doc "A C or C++ union."]
  | ClassDecl [@ocaml.doc "A C++ class."]
  | EnumDecl [@ocaml.doc "An enumeration."]
  | FieldDecl
  [@ocaml.doc
    "A field (in C) or non-static data member (in C++) in a struct, union, or C++ class."]
  | EnumConstantDecl [@ocaml.doc "An enumerator constant."]
  | FunctionDecl [@ocaml.doc "A function."]
  | VarDecl [@ocaml.doc "A variable."]
  | ParmDecl [@ocaml.doc "A function or method parameter."]
  | ObjCInterfaceDecl [@ocaml.doc "An Objective-C \\@interface."]
  | ObjCCategoryDecl
  [@ocaml.doc "An Objective-C \\@interface for a category."]
  | ObjCProtocolDecl [@ocaml.doc "An Objective-C \\@protocol declaration."]
  | ObjCPropertyDecl [@ocaml.doc "An Objective-C \\@property declaration."]
  | ObjCIvarDecl [@ocaml.doc "An Objective-C instance variable."]
  | ObjCInstanceMethodDecl [@ocaml.doc "An Objective-C instance method."]
  | ObjCClassMethodDecl [@ocaml.doc "An Objective-C class method."]
  | ObjCImplementationDecl [@ocaml.doc "An Objective-C \\@implementation."]
  | ObjCCategoryImplDecl
  [@ocaml.doc "An Objective-C \\@implementation for a category."]
  | TypedefDecl [@ocaml.doc "A typedef"]
  | CXXMethod [@ocaml.doc "A C++ class method."]
  | Namespace [@ocaml.doc "A C++ namespace."]
  | LinkageSpec [@ocaml.doc "A linkage specification, e.g. 'extern \"C\"'."]
  | Constructor [@ocaml.doc "A C++ constructor."]
  | Destructor [@ocaml.doc "A C++ destructor."]
  | ConversionFunction [@ocaml.doc "A C++ conversion function."]
  | TemplateTypeParameter [@ocaml.doc "A C++ template type parameter."]
  | NonTypeTemplateParameter
  [@ocaml.doc "A C++ non-type template parameter."]
  | TemplateTemplateParameter
  [@ocaml.doc "A C++ template template parameter."]
  | FunctionTemplate [@ocaml.doc "A C++ function template."]
  | ClassTemplate [@ocaml.doc "A C++ class template."]
  | ClassTemplatePartialSpecialization
  [@ocaml.doc "A C++ class template partial specialization."]
  | NamespaceAlias [@ocaml.doc "A C++ namespace alias declaration."]
  | UsingDirective [@ocaml.doc "A C++ using directive."]
  | UsingDeclaration [@ocaml.doc "A C++ using declaration."]
  | TypeAliasDecl [@ocaml.doc "A C++ alias declaration"]
  | ObjCSynthesizeDecl
  [@ocaml.doc "An Objective-C \\@synthesize definition."]
  | ObjCDynamicDecl [@ocaml.doc "An Objective-C \\@dynamic definition."]
  | CXXAccessSpecifier [@ocaml.doc "An access specifier."]
  | ObjCSuperClassRef [@ocaml.doc "An access specifier."]
  | ObjCProtocolRef [@ocaml.doc "An access specifier."]
  | ObjCClassRef [@ocaml.doc "An access specifier."]
  | TypeRef [@ocaml.doc "A reference to a type declaration."]
  | CXXBaseSpecifier [@ocaml.doc "A reference to a type declaration."]
  | TemplateRef
  [@ocaml.doc
    "A reference to a class template, function template, template template parameter, or class template partial specialization."]
  | NamespaceRef
  [@ocaml.doc "A reference to a namespace or namespace alias."]
  | MemberRef
  [@ocaml.doc
    "A reference to a member of a struct, union, or class that occurs in some non-expression context, e.g., a designated initializer."]
  | LabelRef [@ocaml.doc "A reference to a labeled statement."]
  | OverloadedDeclRef
  [@ocaml.doc
    "A reference to a set of overloaded functions or function templates that has not yet been resolved to a specific function or function template."]
  | VariableRef
  [@ocaml.doc
    "A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list."]
  | InvalidFile
  [@ocaml.doc
    "A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list."]
  | NoDeclFound
  [@ocaml.doc
    "A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list."]
  | NotImplemented
  [@ocaml.doc
    "A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list."]
  | InvalidCode
  [@ocaml.doc
    "A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list."]
  | UnexposedExpr
  [@ocaml.doc
    "An expression whose specific kind is not exposed via this interface."]
  | DeclRefExpr
  [@ocaml.doc
    "An expression that refers to some value declaration, such as a function, variable, or enumerator."]
  | MemberRefExpr
  [@ocaml.doc
    "An expression that refers to a member of a struct, union, class, Objective-C class, etc."]
  | CallExpr [@ocaml.doc "An expression that calls a function."]
  | ObjCMessageExpr
  [@ocaml.doc
    "An expression that sends a message to an Objective-C object or class."]
  | BlockExpr [@ocaml.doc "An expression that represents a block literal."]
  | IntegerLiteral [@ocaml.doc "An integer literal."]
  | FloatingLiteral [@ocaml.doc "A floating point number literal."]
  | ImaginaryLiteral [@ocaml.doc "An imaginary number literal."]
  | StringLiteral [@ocaml.doc "A string literal."]
  | CharacterLiteral [@ocaml.doc "A character literal."]
  | ParenExpr [@ocaml.doc "A parenthesized expression, e.g. \"(1)\"."]
  | UnaryOperator
  [@ocaml.doc
    "This represents the unary-expression's (except sizeof and alignof)."]
  | ArraySubscriptExpr [@ocaml.doc "\\[C99 6.5.2.1\\] Array Subscripting."]
  | BinaryOperator
  [@ocaml.doc
    "A builtin binary operation expression such as \"x + y\" or \"x <= y\"."]
  | CompoundAssignOperator
  [@ocaml.doc "Compound assignment such as \"+=\"."]
  | ConditionalOperator [@ocaml.doc "The ?: ternary operator."]
  | CStyleCastExpr
  [@ocaml.doc
    "An explicit cast in C (C99 6.5.4) or a C-style cast in C++ (C++ \\[expr.cast\\]), which uses the syntax (Type)expr."]
  | CompoundLiteralExpr [@ocaml.doc "\\[C99 6.5.2.5\\]"]
  | InitListExpr [@ocaml.doc "Describes an C or C++ initializer list."]
  | AddrLabelExpr
  [@ocaml.doc "The GNU address of label extension, representing &&label."]
  | StmtExpr
  [@ocaml.doc
    "This is the GNU Statement Expression extension: (\\{int X=4; X;\\})"]
  | GenericSelectionExpr [@ocaml.doc "Represents a C11 generic selection."]
  | GNUNullExpr
  [@ocaml.doc
    "Implements the GNU __null extension, which is a name for a null pointer constant that has integral type (e.g., int or long) and is the same size and alignment as a pointer."]
  | CXXStaticCastExpr [@ocaml.doc "C++'s static_cast<> expression."]
  | CXXDynamicCastExpr [@ocaml.doc "C++'s dynamic_cast<> expression."]
  | CXXReinterpretCastExpr
  [@ocaml.doc "C++'s reinterpret_cast<> expression."]
  | CXXConstCastExpr [@ocaml.doc "C++'s const_cast<> expression."]
  | CXXFunctionalCastExpr
  [@ocaml.doc
    "Represents an explicit C++ type conversion that uses \"functional\" notion (C++ \\[expr.type.conv\\])."]
  | CXXTypeidExpr
  [@ocaml.doc "A C++ typeid expression (C++ \\[expr.typeid\\])."]
  | CXXBoolLiteralExpr [@ocaml.doc "\\[C++ 2.13.5\\] C++ Boolean Literal."]
  | CXXNullPtrLiteralExpr
  [@ocaml.doc "\\[C++0x 2.14.7\\] C++ Pointer Literal."]
  | CXXThisExpr [@ocaml.doc "Represents the \"this\" expression in C++"]
  | CXXThrowExpr [@ocaml.doc "\\[C++ 15\\] C++ Throw Expression."]
  | CXXNewExpr
  [@ocaml.doc
    "A new expression for memory allocation and constructor calls, e.g: \"new CXXNewExpr(foo)\"."]
  | CXXDeleteExpr
  [@ocaml.doc
    "A delete expression for memory deallocation and destructor calls, e.g. \"delete\\[\\] pArray\"."]
  | UnaryExpr [@ocaml.doc "A unary expression."]
  | ObjCStringLiteral
  [@ocaml.doc "An Objective-C string literal i.e. \"foo\"."]
  | ObjCEncodeExpr [@ocaml.doc "An Objective-C \\@encode expression."]
  | ObjCSelectorExpr [@ocaml.doc "An Objective-C \\@selector expression."]
  | ObjCProtocolExpr [@ocaml.doc "An Objective-C \\@protocol expression."]
  | ObjCBridgedCastExpr
  [@ocaml.doc
    "An Objective-C \"bridged\" cast expression, which casts between Objective-C pointers and C pointers, transferring ownership in the process."]
  | PackExpansionExpr
  [@ocaml.doc
    "Represents a C++0x pack expansion that produces a sequence of expressions."]
  | SizeOfPackExpr
  [@ocaml.doc
    "Represents an expression that computes the length of a parameter pack."]
  | LambdaExpr 
  | ObjCBoolLiteralExpr [@ocaml.doc "Objective-c Boolean Literal."]
  | ObjCSelfExpr
  [@ocaml.doc "Represents the \"self\" expression in an Objective-C method."]
  | UnexposedStmt
  [@ocaml.doc
    "A statement whose specific kind is not exposed via this interface."]
  | LabelStmt [@ocaml.doc "A labelled statement in a function."]
  | CompoundStmt
  [@ocaml.doc "A group of statements like \\{ stmt stmt \\}."]
  | CaseStmt [@ocaml.doc "A case statement."]
  | DefaultStmt [@ocaml.doc "A default statement."]
  | IfStmt [@ocaml.doc "An if statement"]
  | SwitchStmt [@ocaml.doc "A switch statement."]
  | WhileStmt [@ocaml.doc "A while statement."]
  | DoStmt [@ocaml.doc "A do statement."]
  | ForStmt [@ocaml.doc "A for statement."]
  | GotoStmt [@ocaml.doc "A goto statement."]
  | IndirectGotoStmt [@ocaml.doc "An indirect goto statement."]
  | ContinueStmt [@ocaml.doc "A continue statement."]
  | BreakStmt [@ocaml.doc "A break statement."]
  | ReturnStmt [@ocaml.doc "A return statement."]
  | GCCAsmStmt [@ocaml.doc "A GCC inline assembly statement extension."]
  | ObjCAtTryStmt
  [@ocaml.doc "Objective-C's overall \\@try-\\@catch-\\@finally statement."]
  | ObjCAtCatchStmt [@ocaml.doc "Objective-C's \\@catch statement."]
  | ObjCAtFinallyStmt [@ocaml.doc "Objective-C's \\@finally statement."]
  | ObjCAtThrowStmt [@ocaml.doc "Objective-C's \\@throw statement."]
  | ObjCAtSynchronizedStmt
  [@ocaml.doc "Objective-C's \\@synchronized statement."]
  | ObjCAutoreleasePoolStmt
  [@ocaml.doc "Objective-C's autorelease pool statement."]
  | ObjCForCollectionStmt [@ocaml.doc "Objective-C's collection statement."]
  | CXXCatchStmt [@ocaml.doc "C++'s catch statement."]
  | CXXTryStmt [@ocaml.doc "C++'s try statement."]
  | CXXForRangeStmt [@ocaml.doc "C++'s for (* : *) statement."]
  | SEHTryStmt
  [@ocaml.doc "Windows Structured Exception Handling's try statement."]
  | SEHExceptStmt
  [@ocaml.doc "Windows Structured Exception Handling's except statement."]
  | SEHFinallyStmt
  [@ocaml.doc "Windows Structured Exception Handling's finally statement."]
  | MSAsmStmt [@ocaml.doc "A MS inline assembly statement extension."]
  | NullStmt [@ocaml.doc "The null satement \";\": C99 6.8.3p3."]
  | DeclStmt
  [@ocaml.doc
    "Adaptor class for mixing declarations with statements and expressions."]
  | OMPParallelDirective [@ocaml.doc "OpenMP parallel directive."]
  | OMPSimdDirective [@ocaml.doc "OpenMP simd directive."]
  | OMPForDirective [@ocaml.doc "OpenMP for directive."]
  | OMPSectionsDirective [@ocaml.doc "OpenMP sections directive."]
  | OMPSectionDirective [@ocaml.doc "OpenMP section directive."]
  | OMPSingleDirective [@ocaml.doc "OpenMP single directive."]
  | OMPParallelForDirective [@ocaml.doc "OpenMP parallel for directive."]
  | OMPParallelSectionsDirective
  [@ocaml.doc "OpenMP parallel sections directive."]
  | OMPTaskDirective [@ocaml.doc "OpenMP task directive."]
  | OMPMasterDirective [@ocaml.doc "OpenMP master directive."]
  | OMPCriticalDirective [@ocaml.doc "OpenMP critical directive."]
  | OMPTaskyieldDirective [@ocaml.doc "OpenMP taskyield directive."]
  | OMPBarrierDirective [@ocaml.doc "OpenMP barrier directive."]
  | OMPTaskwaitDirective [@ocaml.doc "OpenMP taskwait directive."]
  | OMPFlushDirective [@ocaml.doc "OpenMP flush directive."]
  | SEHLeaveStmt
  [@ocaml.doc "Windows Structured Exception Handling's leave statement."]
  | TranslationUnit
  [@ocaml.doc "Cursor that represents the translation unit itself."]
  | UnexposedAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | IBActionAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | IBOutletAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | IBOutletCollectionAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CXXFinalAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CXXOverrideAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | AnnotateAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | AsmLabelAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | PackedAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | PureAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | ConstAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | NoDuplicateAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CUDAConstantAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CUDADeviceAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CUDAGlobalAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | CUDAHostAttr
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | PreprocessingDirective
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | MacroDefinition
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | MacroExpansion
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | InclusionDirective
  [@ocaml.doc
    "An attribute whose specific kind is not exposed via this interface."]
  | ModuleImportDecl [@ocaml.doc "A module import declaration."][@@deriving
                                                                  refl]
[@@ocaml.doc "Describes the kind of entity that a cursor refers to."]
type cxcursor[@@ocaml.doc
               "A cursor representing some element in the abstract syntax tree for a translation unit."]
external get_null_cursor : unit -> cxcursor = "clang_getNullCursor_wrapper"
[@@ocaml.doc "Retrieve the NULL cursor, which represents no entity."]
external get_translation_unit_cursor :
  cxtranslationunit -> cxcursor = "clang_getTranslationUnitCursor_wrapper"
[@@ocaml.doc
  "Retrieve the cursor that represents the given translation unit."]
external equal_cursors :
  cxcursor -> cxcursor -> bool = "clang_equalCursors_wrapper"[@@ocaml.doc
                                                               "Determine whether two cursors are equivalent."]
external cursor_is_null : cxcursor -> bool = "clang_Cursor_isNull_wrapper"
[@@ocaml.doc "Returns non-zero if cursor is null."]
external hash_cursor : cxcursor -> int = "clang_hashCursor_wrapper"[@@ocaml.doc
                                                                    "Compute a hash value for the given cursor."]
external get_cursor_kind :
  cxcursor -> cxcursorkind = "clang_getCursorKind_wrapper"[@@ocaml.doc
                                                            "Retrieve the kind of the given cursor."]
external is_declaration :
  cxcursorkind -> bool = "clang_isDeclaration_wrapper"[@@ocaml.doc
                                                        "Determine whether the given cursor kind represents a declaration."]
external is_reference : cxcursorkind -> bool = "clang_isReference_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor kind represents a simple reference."]
external is_expression : cxcursorkind -> bool = "clang_isExpression_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor kind represents an expression."]
external is_statement : cxcursorkind -> bool = "clang_isStatement_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor kind represents a statement."]
external is_attribute : cxcursorkind -> bool = "clang_isAttribute_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor kind represents an attribute."]
external is_invalid : cxcursorkind -> bool = "clang_isInvalid_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor kind represents an invalid cursor."]
external is_translation_unit :
  cxcursorkind -> bool = "clang_isTranslationUnit_wrapper"[@@ocaml.doc
                                                            "Determine whether the given cursor kind represents a translation unit."]
external is_preprocessing :
  cxcursorkind -> bool = "clang_isPreprocessing_wrapper"[@@ocaml.doc
                                                          "Determine whether the given cursor represents a preprocessing element, such as a preprocessor directive or macro instantiation."]
external is_unexposed : cxcursorkind -> bool = "clang_isUnexposed_wrapper"
[@@ocaml.doc
  "Determine whether the given cursor represents a currently unexposed piece of the AST (e.g., CXCursor_UnexposedStmt)."]
type cxlinkagekind =
  | Invalid
  [@ocaml.doc
    "This value indicates that no linkage information is available for a provided CXCursor."]
  | NoLinkage
  [@ocaml.doc
    "This is the linkage for variables, parameters, and so on that have automatic storage. This covers normal (non-extern) local variables."]
  | Internal
  [@ocaml.doc
    "This is the linkage for static variables and static functions."]
  | UniqueExternal
  [@ocaml.doc
    "This is the linkage for entities with external linkage that live in C++ anonymous namespaces."]
  | External
  [@ocaml.doc
    "This is the linkage for entities with true, external linkage."][@@deriving
                                                                    refl]
[@@ocaml.doc "Describe the linkage of the entity referred to by a cursor."]
external get_cursor_linkage :
  cxcursor -> cxlinkagekind = "clang_getCursorLinkage_wrapper"[@@ocaml.doc
                                                                "Determine the linkage of the entity referred to by a given cursor."]
type cxavailabilitykind =
  | Available [@ocaml.doc "The entity is available."]
  | Deprecated
  [@ocaml.doc
    "The entity is available, but has been deprecated (and its use is not recommended)."]
  | NotAvailable
  [@ocaml.doc "The entity is not available; any use of it will be an error."]
  | NotAccessible
  [@ocaml.doc
    "The entity is available, but not accessible; any use of it will be an error."]
[@@deriving refl][@@ocaml.doc
                   "Describes the availability of a particular entity, which indicates whether the use of this entity will result in a warning or error due to it being deprecated or unavailable."]
external get_cursor_availability :
  cxcursor -> cxavailabilitykind = "clang_getCursorAvailability_wrapper"
[@@ocaml.doc
  "Determine the availability of the entity that this cursor refers to, taking the current target platform into account."]
type cxlanguagekind =
  | Invalid 
  | C 
  | ObjC 
  | CPlusPlus [@@deriving refl][@@ocaml.doc
                                 "Describe the \"language\" of the entity referred to by a cursor."]
external get_cursor_language :
  cxcursor -> cxlanguagekind = "clang_getCursorLanguage_wrapper"[@@ocaml.doc
                                                                  "Determine the \"language\" of the entity referred to by a given cursor."]
type cxcursorset
external create_cxcursor_set :
  unit -> cxcursorset = "clang_createCXCursorSet_wrapper"[@@ocaml.doc
                                                           "Creates an empty CXCursorSet."]
external cxcursor_set_contains :
  cxcursorset -> cxcursor -> int = "clang_CXCursorSet_contains_wrapper"
[@@ocaml.doc
  "Queries a CXCursorSet to see if it contains a specific CXCursor."]
external cxcursor_set_insert :
  cxcursorset -> cxcursor -> int = "clang_CXCursorSet_insert_wrapper"
[@@ocaml.doc "Inserts a CXCursor into a CXCursorSet."]
external get_cursor_semantic_parent :
  cxcursor -> cxcursor = "clang_getCursorSemanticParent_wrapper"[@@ocaml.doc
                                                                  "Determine the semantic parent of the given cursor."]
external get_cursor_lexical_parent :
  cxcursor -> cxcursor = "clang_getCursorLexicalParent_wrapper"[@@ocaml.doc
                                                                 "Determine the lexical parent of the given cursor."]
external get_overridden_cursors :
  cxcursor -> cxcursor array = "clang_getOverriddenCursors_wrapper"[@@ocaml.doc
                                                                    "Determine the set of methods that are overridden by the given method."]
external get_included_file :
  cxcursor -> cxfile = "clang_getIncludedFile_wrapper"[@@ocaml.doc
                                                        "Retrieve the file that is included by the given inclusion directive cursor."]
external get_cursor :
  cxtranslationunit -> cxsourcelocation -> cxcursor =
    "clang_getCursor_wrapper"[@@ocaml.doc
                               "Map a source location to the cursor that describes the entity at that location in the source code."]
external get_cursor_location :
  cxcursor -> cxsourcelocation = "clang_getCursorLocation_wrapper"[@@ocaml.doc
                                                                    "Retrieve the physical location of the source constructor referenced by the given cursor."]
external get_cursor_extent :
  cxcursor -> cxsourcerange = "clang_getCursorExtent_wrapper"[@@ocaml.doc
                                                               "Retrieve the physical extent of the source construct referenced by the given cursor."]
type cxtypekind =
  | Invalid
  [@ocaml.doc
    "Represents an invalid type (e.g., where no type is available)."]
  | Unexposed
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Void
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Bool
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Char_U
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | UChar
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Char16
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Char32
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | UShort
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | UInt
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ULong
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ULongLong
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | UInt128
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Char_S
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | SChar
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | WChar
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Short
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Int
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Long
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | LongLong
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Int128
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Float
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Double
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | LongDouble
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | NullPtr
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Overload
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Dependent
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ObjCId
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ObjCClass
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ObjCSel
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Complex
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Pointer
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | BlockPointer
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | LValueReference
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | RValueReference
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Record
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Enum
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Typedef
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ObjCInterface
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ObjCObjectPointer
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | FunctionNoProto
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | FunctionProto
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | ConstantArray
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | Vector
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | IncompleteArray
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | VariableArray
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | DependentSizedArray
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."]
  | MemberPointer
  [@ocaml.doc
    "A type whose specific kind is not exposed via this interface."][@@deriving
                                                                    refl]
[@@ocaml.doc "Describes the kind of type"]
type cxtype[@@ocaml.doc
             "The type of an element in the abstract syntax tree."]
external get_type_kind : cxtype -> cxtypekind = "clang_getTypeKind_wrapper"
external get_cursor_type : cxcursor -> cxtype = "clang_getCursorType_wrapper"
[@@ocaml.doc "Retrieve the type of a CXCursor (if any)."]
external get_type_spelling :
  cxtype -> string = "clang_getTypeSpelling_wrapper"[@@ocaml.doc
                                                      "Pretty-print the underlying type using the rules of the language of the translation unit from which it came."]
external get_typedef_decl_underlying_type :
  cxcursor -> cxtype = "clang_getTypedefDeclUnderlyingType_wrapper"[@@ocaml.doc
                                                                    "Retrieve the underlying type of a typedef declaration."]
external get_enum_decl_integer_type :
  cxcursor -> cxtype = "clang_getEnumDeclIntegerType_wrapper"[@@ocaml.doc
                                                               "Retrieve the integer type of an enum declaration."]
external get_enum_constant_decl_value :
  cxcursor -> int = "clang_getEnumConstantDeclValue_wrapper"[@@ocaml.doc
                                                              "Retrieve the integer value of an enum constant declaration as a signed long long."]
external get_enum_constant_decl_unsigned_value :
  cxcursor -> int = "clang_getEnumConstantDeclUnsignedValue_wrapper"[@@ocaml.doc
                                                                    "Retrieve the integer value of an enum constant declaration as an unsigned long long."]
external get_field_decl_bit_width :
  cxcursor -> int = "clang_getFieldDeclBitWidth_wrapper"[@@ocaml.doc
                                                          "Retrieve the bit width of a bit field declaration as an integer."]
external cursor_get_num_arguments :
  cxcursor -> int = "clang_Cursor_getNumArguments_wrapper"[@@ocaml.doc
                                                            "Retrieve the number of non-variadic arguments associated with a given cursor."]
external cursor_get_argument :
  cxcursor -> int -> cxcursor = "clang_Cursor_getArgument_wrapper"[@@ocaml.doc
                                                                    "Retrieve the argument cursor of a function or method."]
external equal_types : cxtype -> cxtype -> bool = "clang_equalTypes_wrapper"
[@@ocaml.doc "Determine whether two CXTypes represent the same type."]
external get_canonical_type :
  cxtype -> cxtype = "clang_getCanonicalType_wrapper"[@@ocaml.doc
                                                       "Return the canonical type for a CXType."]
external is_const_qualified_type :
  cxtype -> bool = "clang_isConstQualifiedType_wrapper"[@@ocaml.doc
                                                         "Determine whether a CXType has the \"const\" qualifier set, without looking through typedefs that may have added \"const\" at a different level."]
external is_volatile_qualified_type :
  cxtype -> bool = "clang_isVolatileQualifiedType_wrapper"[@@ocaml.doc
                                                            "Determine whether a CXType has the \"volatile\" qualifier set, without looking through typedefs that may have added \"volatile\" at a different level."]
external is_restrict_qualified_type :
  cxtype -> bool = "clang_isRestrictQualifiedType_wrapper"[@@ocaml.doc
                                                            "Determine whether a CXType has the \"restrict\" qualifier set, without looking through typedefs that may have added \"restrict\" at a different level."]
external get_pointee_type : cxtype -> cxtype = "clang_getPointeeType_wrapper"
[@@ocaml.doc "For pointer types, returns the type of the pointee."]
external get_type_declaration :
  cxtype -> cxcursor = "clang_getTypeDeclaration_wrapper"[@@ocaml.doc
                                                           "Return the cursor for the declaration of the given type."]
external get_decl_obj_ctype_encoding :
  cxcursor -> string = "clang_getDeclObjCTypeEncoding_wrapper"[@@ocaml.doc
                                                                "Returns the Objective-C type encoding for the specified declaration."]
external get_type_kind_spelling :
  cxtypekind -> string = "clang_getTypeKindSpelling_wrapper"[@@ocaml.doc
                                                              "Retrieve the spelling of a given CXTypeKind."]
type cxcallingconv =
  | Default 
  | C 
  | X86StdCall 
  | X86FastCall 
  | X86ThisCall 
  | X86Pascal 
  | AAPCS 
  | AAPCS_VFP 
  | PnaclCall 
  | IntelOclBicc 
  | X86_64Win64 
  | X86_64SysV 
  | Invalid 
  | Unexposed [@@deriving refl][@@ocaml.doc
                                 "Describes the calling convention of a function type"]
external get_function_type_calling_conv :
  cxtype -> cxcallingconv = "clang_getFunctionTypeCallingConv_wrapper"
[@@ocaml.doc
  "Retrieve the calling convention associated with a function type."]
external get_result_type : cxtype -> cxtype = "clang_getResultType_wrapper"
[@@ocaml.doc "Retrieve the return type associated with a function type."]
external get_num_arg_types : cxtype -> int = "clang_getNumArgTypes_wrapper"
[@@ocaml.doc
  "Retrieve the number of non-variadic parameters associated with a function type."]
external get_arg_type : cxtype -> int -> cxtype = "clang_getArgType_wrapper"
[@@ocaml.doc "Retrieve the type of a parameter of a function type."]
external is_function_type_variadic :
  cxtype -> bool = "clang_isFunctionTypeVariadic_wrapper"[@@ocaml.doc
                                                           "Return 1 if the CXType is a variadic function type, and 0 otherwise."]
external get_cursor_result_type :
  cxcursor -> cxtype = "clang_getCursorResultType_wrapper"[@@ocaml.doc
                                                            "Retrieve the return type associated with a given cursor."]
external is_podtype : cxtype -> bool = "clang_isPODType_wrapper"[@@ocaml.doc
                                                                  "Return 1 if the CXType is a POD (plain old data) type, and 0 otherwise."]
external get_element_type : cxtype -> cxtype = "clang_getElementType_wrapper"
[@@ocaml.doc "Return the element type of an array, complex, or vector type."]
external get_num_elements : cxtype -> int = "clang_getNumElements_wrapper"
[@@ocaml.doc "Return the number of elements of an array or vector type."]
external get_array_element_type :
  cxtype -> cxtype = "clang_getArrayElementType_wrapper"[@@ocaml.doc
                                                          "Return the element type of an array type."]
external get_array_size : cxtype -> int = "clang_getArraySize_wrapper"
[@@ocaml.doc "Return the array size of a constant array."]
external type_get_align_of : cxtype -> int = "clang_Type_getAlignOf_wrapper"
[@@ocaml.doc
  "Return the alignment of a type in bytes as per C++\\[expr.alignof\\] standard."]
external type_get_class_type :
  cxtype -> cxtype = "clang_Type_getClassType_wrapper"[@@ocaml.doc
                                                        "Return the class type of an member pointer type."]
external type_get_size_of : cxtype -> int = "clang_Type_getSizeOf_wrapper"
[@@ocaml.doc
  "Return the size of a type in bytes as per C++\\[expr.sizeof\\] standard."]
external type_get_offset_of :
  cxtype -> string -> int = "clang_Type_getOffsetOf_wrapper"[@@ocaml.doc
                                                              "Return the offset of a field named S in a record of type T in bits as it would be returned by __offsetof__ as per C++11\\[18.2p4\\]"]
external type_get_num_template_arguments :
  cxtype -> int = "clang_Type_getNumTemplateArguments_wrapper"[@@ocaml.doc
                                                                "Returns the number of template arguments for given class template specialization, or -1 if type T is not a class template specialization."]
external type_get_template_argument_as_type :
  cxtype -> int -> cxtype = "clang_Type_getTemplateArgumentAsType_wrapper"
[@@ocaml.doc
  "Returns the type template argument of a template class specialization at given index."]
type cxrefqualifierkind =
  | None [@ocaml.doc "No ref-qualifier was provided."]
  | LValue [@ocaml.doc "An lvalue ref-qualifier was provided ( &)."]
  | RValue [@ocaml.doc "An rvalue ref-qualifier was provided ( &&)."]
[@@deriving refl]
external type_get_cxxref_qualifier :
  cxtype -> cxrefqualifierkind = "clang_Type_getCXXRefQualifier_wrapper"
[@@ocaml.doc "Retrieve the ref-qualifier kind of a function or method."]
external cursor_is_bit_field :
  cxcursor -> bool = "clang_Cursor_isBitField_wrapper"[@@ocaml.doc
                                                        "Returns non-zero if the cursor specifies a Record member that is a bitfield."]
external is_virtual_base : cxcursor -> bool = "clang_isVirtualBase_wrapper"
[@@ocaml.doc
  "Returns 1 if the base class specified by the cursor with kind CX_CXXBaseSpecifier is virtual."]
type cx_cxxaccessspecifier =
  | CXXInvalidAccessSpecifier 
  | CXXPublic 
  | CXXProtected 
  | CXXPrivate [@@deriving refl][@@ocaml.doc
                                  "Represents the C++ access control level to a base class for a cursor with kind CX_CXXBaseSpecifier."]
external get_cxxaccess_specifier :
  cxcursor -> cx_cxxaccessspecifier = "clang_getCXXAccessSpecifier_wrapper"
[@@ocaml.doc "Returns the access control level for the referenced object."]
external get_num_overloaded_decls :
  cxcursor -> int = "clang_getNumOverloadedDecls_wrapper"[@@ocaml.doc
                                                           "Determine the number of overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor."]
external get_overloaded_decl :
  cxcursor -> int -> cxcursor = "clang_getOverloadedDecl_wrapper"[@@ocaml.doc
                                                                   "Retrieve a cursor for one of the overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor."]
external get_iboutlet_collection_type :
  cxcursor -> cxtype = "clang_getIBOutletCollectionType_wrapper"[@@ocaml.doc
                                                                  "For cursors representing an iboutletcollection attribute, this function returns the collection element type."]
type cxchildvisitresult =
  | Break [@ocaml.doc "Terminates the cursor traversal."]
  | Continue
  [@ocaml.doc
    "Continues the cursor traversal with the next sibling of the cursor just visited, without visiting its children."]
  | Recurse
  [@ocaml.doc
    "Recursively traverse the children of this cursor, using the same visitor and client data."]
[@@deriving refl][@@ocaml.doc
                   "Describes how the traversal of the children of a particular cursor should proceed after visiting a particular child cursor."]
external visit_children :
  cxcursor -> (cxcursor -> cxcursor -> cxchildvisitresult) -> bool =
    "clang_visitChildren_wrapper"[@@ocaml.doc
                                   "Visit the children of a particular cursor."]
external get_cursor_usr : cxcursor -> string = "clang_getCursorUSR_wrapper"
[@@ocaml.doc
  "Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor."]
external get_cursor_spelling :
  cxcursor -> string = "clang_getCursorSpelling_wrapper"[@@ocaml.doc
                                                          "Retrieve a name for the entity referenced by this cursor."]
external cursor_get_spelling_name_range :
  cxcursor -> piece_index:int -> options:int -> cxsourcerange =
    "clang_Cursor_getSpellingNameRange_wrapper"[@@ocaml.doc
                                                 "Retrieve a range for a piece that forms the cursors spelling name. Most of the times there is only one range for the complete spelling but for Objective-C methods and Objective-C message expressions, there are multiple pieces for each selector identifier."]
external get_cursor_display_name :
  cxcursor -> string = "clang_getCursorDisplayName_wrapper"[@@ocaml.doc
                                                             "Retrieve the display name for the entity referenced by this cursor."]
external get_cursor_referenced :
  cxcursor -> cxcursor = "clang_getCursorReferenced_wrapper"[@@ocaml.doc
                                                              "For a cursor that is a reference, retrieve a cursor representing the entity that it references."]
external get_cursor_definition :
  cxcursor -> cxcursor = "clang_getCursorDefinition_wrapper"[@@ocaml.doc
                                                              "For a cursor that is either a reference to or a declaration of some entity, retrieve a cursor that describes the definition of that entity."]
external is_cursor_definition :
  cxcursor -> bool = "clang_isCursorDefinition_wrapper"[@@ocaml.doc
                                                         "Determine whether the declaration pointed to by this cursor is also a definition of that entity."]
external get_canonical_cursor :
  cxcursor -> cxcursor = "clang_getCanonicalCursor_wrapper"[@@ocaml.doc
                                                             "Retrieve the canonical cursor corresponding to the given cursor."]
external cursor_get_obj_cselector_index :
  cxcursor -> int = "clang_Cursor_getObjCSelectorIndex_wrapper"[@@ocaml.doc
                                                                 "If the cursor points to a selector identifier in an Objective-C method or message expression, this returns the selector index."]
external cursor_is_dynamic_call :
  cxcursor -> bool = "clang_Cursor_isDynamicCall_wrapper"[@@ocaml.doc
                                                           "Given a cursor pointing to a C++ method call or an Objective-C message, returns non-zero if the method/message is \"dynamic\", meaning:"]
external cursor_get_receiver_type :
  cxcursor -> cxtype = "clang_Cursor_getReceiverType_wrapper"[@@ocaml.doc
                                                               "Given a cursor pointing to an Objective-C message, returns the CXType of the receiver."]
external cursor_get_obj_cproperty_attributes :
  cxcursor -> int -> int = "clang_Cursor_getObjCPropertyAttributes_wrapper"
[@@ocaml.doc
  "Given a cursor that represents a property declaration, return the associated property attributes. The bits are formed from CXObjCPropertyAttrKind."]
external cursor_get_obj_cdecl_qualifiers :
  cxcursor -> int = "clang_Cursor_getObjCDeclQualifiers_wrapper"[@@ocaml.doc
                                                                  "Given a cursor that represents an Objective-C method or parameter declaration, return the associated Objective-C qualifiers for the return type or the parameter respectively. The bits are formed from CXObjCDeclQualifierKind."]
external cursor_is_obj_coptional :
  cxcursor -> bool = "clang_Cursor_isObjCOptional_wrapper"[@@ocaml.doc
                                                            "\nGiven a cursor that represents an ObjC method or property declaration,\nreturn non-zero if the declaration was affected by \"\\@optional\".\nReturns zero if the cursor is not such a declaration or it is \"\\@required\". "]
external cursor_is_variadic :
  cxcursor -> bool = "clang_Cursor_isVariadic_wrapper"[@@ocaml.doc
                                                        "Returns non-zero if the given cursor is a variadic function or method."]
external cursor_get_comment_range :
  cxcursor -> cxsourcerange = "clang_Cursor_getCommentRange_wrapper"[@@ocaml.doc
                                                                    "Given a cursor that represents a declaration, return the associated comment's source range. The range may include multiple consecutive comments with whitespace in between."]
external cursor_get_raw_comment_text :
  cxcursor -> string = "clang_Cursor_getRawCommentText_wrapper"[@@ocaml.doc
                                                                 "Given a cursor that represents a declaration, return the associated comment text, including comment markers."]
external cursor_get_brief_comment_text :
  cxcursor -> string option = "clang_Cursor_getBriefCommentText_wrapper"
[@@ocaml.doc
  "Given a cursor that represents a documentable entity (e.g., declaration), return the associated \\brief paragraph; otherwise return the first paragraph."]
type cxmodule
external cursor_get_module :
  cxcursor -> cxmodule = "clang_Cursor_getModule_wrapper"[@@ocaml.doc
                                                           "Given a CXCursor_ModuleImportDecl cursor, return the associated module."]
external get_module_for_file :
  cxtranslationunit -> cxfile -> cxmodule = "clang_getModuleForFile_wrapper"
[@@ocaml.doc
  "Given a CXFile header file, return the module that contains it, if one exists."]
external module_get_astfile :
  cxmodule -> cxfile = "clang_Module_getASTFile_wrapper"[@@ocaml.doc
                                                          "Returns the module file where the provided module object came from."]
external module_get_parent :
  cxmodule -> cxmodule = "clang_Module_getParent_wrapper"[@@ocaml.doc
                                                           "Returns the parent of a sub-module or NULL if the given module is top-level, e.g. for 'std.vector' it will return the 'std' module."]
external module_get_name :
  cxmodule -> string = "clang_Module_getName_wrapper"[@@ocaml.doc
                                                       "Returns the name of the module, e.g. for the 'std.vector' sub-module it will return \"vector\"."]
external module_get_full_name :
  cxmodule -> string = "clang_Module_getFullName_wrapper"[@@ocaml.doc
                                                           "Returns the full name of the module, e.g. \"std.vector\"."]
external module_is_system :
  cxmodule -> bool = "clang_Module_isSystem_wrapper"[@@ocaml.doc
                                                      "Returns non-zero if the module is a system one."]
external module_get_num_top_level_headers :
  cxtranslationunit -> cxmodule -> int =
    "clang_Module_getNumTopLevelHeaders_wrapper"[@@ocaml.doc
                                                  "Returns the number of top level headers associated with this module."]
external module_get_top_level_header :
  cxtranslationunit -> cxmodule -> int -> cxfile =
    "clang_Module_getTopLevelHeader_wrapper"[@@ocaml.doc
                                              "Returns the specified top level header associated with the module."]
external cxxmethod_is_pure_virtual :
  cxcursor -> bool = "clang_CXXMethod_isPureVirtual_wrapper"[@@ocaml.doc
                                                              "Determine if a C++ member function or member function template is pure virtual."]
external cxxmethod_is_static :
  cxcursor -> bool = "clang_CXXMethod_isStatic_wrapper"[@@ocaml.doc
                                                         "Determine if a C++ member function or member function template is declared 'static'."]
external cxxmethod_is_virtual :
  cxcursor -> bool = "clang_CXXMethod_isVirtual_wrapper"[@@ocaml.doc
                                                          "Determine if a C++ member function or member function template is explicitly declared 'virtual' or if it overrides a virtual method from one of the base classes."]
external cxxmethod_is_const :
  cxcursor -> bool = "clang_CXXMethod_isConst_wrapper"[@@ocaml.doc
                                                        "Determine if a C++ member function or member function template is declared 'const'."]
external get_template_cursor_kind :
  cxcursor -> cxcursorkind = "clang_getTemplateCursorKind_wrapper"[@@ocaml.doc
                                                                    "Given a cursor that represents a template, determine the cursor kind of the specializations would be generated by instantiating the template."]
external get_specialized_cursor_template :
  cxcursor -> cxcursor = "clang_getSpecializedCursorTemplate_wrapper"
[@@ocaml.doc
  "Given a cursor that may represent a specialization or instantiation of a template, retrieve the cursor that represents the template that it specializes or from which it was instantiated."]
external get_cursor_reference_name_range :
  cxcursor -> name_flags:int -> piece_index:int -> cxsourcerange =
    "clang_getCursorReferenceNameRange_wrapper"[@@ocaml.doc
                                                 "Given a cursor that references something else, return the source range covering that reference."]
type cxtokenkind =
  | Punctuation
  [@ocaml.doc "A token that contains some kind of punctuation."]
  | Keyword [@ocaml.doc "A language keyword."]
  | Identifier [@ocaml.doc "An identifier (that is not a keyword)."]
  | Literal [@ocaml.doc "A numeric, string, or character literal."]
  | Comment [@ocaml.doc "A comment."][@@deriving refl][@@ocaml.doc
                                                        "Describes a kind of token."]
type cxtoken[@@ocaml.doc "Describes a single preprocessing token."]
external get_token_kind :
  cxtoken -> cxtokenkind = "clang_getTokenKind_wrapper"[@@ocaml.doc
                                                         "Determine the kind of the given token."]
external get_token_spelling :
  cxtranslationunit -> cxtoken -> string = "clang_getTokenSpelling_wrapper"
[@@ocaml.doc "Determine the spelling of the given token."]
external get_token_location :
  cxtranslationunit -> cxtoken -> cxsourcelocation =
    "clang_getTokenLocation_wrapper"[@@ocaml.doc
                                      "Retrieve the source location of the given token."]
external get_token_extent :
  cxtranslationunit -> cxtoken -> cxsourcerange =
    "clang_getTokenExtent_wrapper"[@@ocaml.doc
                                    "Retrieve a source range that covers the given token."]
external get_cursor_kind_spelling :
  cxcursorkind -> string = "clang_getCursorKindSpelling_wrapper"[@@ocaml.doc
                                                                  "These routines are used for testing and debugging, only, and should not be relied upon."]
external enable_stack_traces :
  unit -> unit = "clang_enableStackTraces_wrapper"
type cxcompletionchunkkind =
  | Optional
  [@ocaml.doc
    "A code-completion string that describes \"optional\" text that could be a part of the template (but is not required)."]
  | TypedText
  [@ocaml.doc
    "Text that a user would be expected to type to get this code-completion result."]
  | Text
  [@ocaml.doc
    "Text that should be inserted as part of a code-completion result."]
  | Placeholder
  [@ocaml.doc "Placeholder text that should be replaced by the user."]
  | Informative
  [@ocaml.doc
    "Informative text that should be displayed but never inserted as part of the template."]
  | CurrentParameter
  [@ocaml.doc
    "Text that describes the current parameter when code-completion is referring to function call, message send, or template specialization."]
  | LeftParen
  [@ocaml.doc
    "A left parenthesis ('('), used to initiate a function call or signal the beginning of a function parameter list."]
  | RightParen
  [@ocaml.doc
    "A right parenthesis (')'), used to finish a function call or signal the end of a function parameter list."]
  | LeftBracket [@ocaml.doc "A left bracket ('\\[')."]
  | RightBracket [@ocaml.doc "A right bracket ('\\]')."]
  | LeftBrace [@ocaml.doc "A left brace ('\\{')."]
  | RightBrace [@ocaml.doc "A right brace ('\\}')."]
  | LeftAngle [@ocaml.doc "A left angle bracket ('<')."]
  | RightAngle [@ocaml.doc "A right angle bracket ('>')."]
  | Comma [@ocaml.doc "A comma separator (',')."]
  | ResultType
  [@ocaml.doc "Text that specifies the result type of a given result."]
  | Colon [@ocaml.doc "A colon (':')."]
  | SemiColon [@ocaml.doc "A semicolon (';')."]
  | Equal [@ocaml.doc "An '=' sign."]
  | HorizontalSpace [@ocaml.doc "Horizontal space (' ')."]
  | VerticalSpace
  [@ocaml.doc
    "Vertical space (''), after which it is generally a good idea to perform indentation."]
[@@deriving refl][@@ocaml.doc
                   "Describes a single piece of text within a code-completion string."]
type cxcompletionstring
external get_completion_chunk_kind :
  cxcompletionstring -> int -> cxcompletionchunkkind =
    "clang_getCompletionChunkKind_wrapper"[@@ocaml.doc
                                            "Determine the kind of a particular chunk within a completion string."]
external get_completion_chunk_text :
  cxcompletionstring -> int -> string =
    "clang_getCompletionChunkText_wrapper"[@@ocaml.doc
                                            "Retrieve the text associated with a particular chunk within a completion string."]
external get_completion_chunk_completion_string :
  cxcompletionstring -> int -> cxcompletionstring =
    "clang_getCompletionChunkCompletionString_wrapper"[@@ocaml.doc
                                                        "Retrieve the completion string associated with a particular chunk within a completion string."]
external get_num_completion_chunks :
  cxcompletionstring -> int = "clang_getNumCompletionChunks_wrapper"[@@ocaml.doc
                                                                    "Retrieve the number of chunks in the given code-completion string."]
external get_completion_priority :
  cxcompletionstring -> int = "clang_getCompletionPriority_wrapper"[@@ocaml.doc
                                                                    "Determine the priority of this code completion."]
external get_completion_availability :
  cxcompletionstring -> cxavailabilitykind =
    "clang_getCompletionAvailability_wrapper"[@@ocaml.doc
                                               "Determine the availability of the entity that this code-completion string refers to."]
external get_completion_num_annotations :
  cxcompletionstring -> int = "clang_getCompletionNumAnnotations_wrapper"
[@@ocaml.doc
  "Retrieve the number of annotations associated with the given completion string."]
external get_completion_annotation :
  cxcompletionstring -> int -> string =
    "clang_getCompletionAnnotation_wrapper"[@@ocaml.doc
                                             "Retrieve the annotation associated with the given completion string."]
external get_completion_parent :
  cxcompletionstring -> string = "clang_getCompletionParent_wrapper"[@@ocaml.doc
                                                                    "Retrieve the parent context of the given completion string."]
external get_completion_brief_comment :
  cxcompletionstring -> string = "clang_getCompletionBriefComment_wrapper"
[@@ocaml.doc
  "Retrieve the brief documentation comment attached to the declaration that corresponds to the given completion string."]
external get_cursor_completion_string :
  cxcursor -> cxcompletionstring = "clang_getCursorCompletionString_wrapper"
[@@ocaml.doc
  "Retrieve a completion string for an arbitrary declaration or macro definition cursor."]
external default_code_complete_options :
  unit -> int = "clang_defaultCodeCompleteOptions_wrapper"[@@ocaml.doc
                                                            "Returns a default set of code-completion options that can be passed to clang_codeCompleteAt()."]
external get_clang_version : unit -> string = "clang_getClangVersion_wrapper"
[@@ocaml.doc
  "Return a version string, suitable for showing to a user, but not intended to be parsed (the format is not guaranteed to be stable)."]
external toggle_crash_recovery :
  int -> unit = "clang_toggleCrashRecovery_wrapper"[@@ocaml.doc
                                                     "Enable/disable crash recovery."]
type cxremapping
external get_remappings :
  string -> cxremapping = "clang_getRemappings_wrapper"[@@ocaml.doc
                                                         "Retrieve a remapping."]
external get_remappings_from_file_list :
  string array -> cxremapping = "clang_getRemappingsFromFileList_wrapper"
[@@ocaml.doc "Retrieve a remapping."]
external remap_get_num_files :
  cxremapping -> int = "clang_remap_getNumFiles_wrapper"[@@ocaml.doc
                                                          "Determine the number of remappings."]
type cxindexaction
external index_action_create :
  cxindex -> cxindexaction = "clang_IndexAction_create_wrapper"[@@ocaml.doc
                                                                 "An indexing action/session, to be applied to one or multiple translation units."]
type cxcomment[@@ocaml.doc "A parsed comment."]
external cursor_get_parsed_comment :
  cxcursor -> cxcomment = "clang_Cursor_getParsedComment_wrapper"[@@ocaml.doc
                                                                   "Given a cursor that represents a documentable entity (e.g., declaration), return the associated parsed comment as a CXComment_FullComment AST node."]
type cxcommentkind =
  | Null
  [@ocaml.doc
    "Null comment. No AST node is constructed at the requested location because there is no text or a syntax error."]
  | Text [@ocaml.doc "Plain text. Inline content."]
  | InlineCommand
  [@ocaml.doc
    "A command with word-like arguments that is considered inline content."]
  | HTMLStartTag
  [@ocaml.doc
    "HTML start tag with attributes (name-value pairs). Considered inline content."]
  | HTMLEndTag [@ocaml.doc "HTML end tag. Considered inline content."]
  | Paragraph
  [@ocaml.doc
    "A paragraph, contains inline comment. The paragraph itself is block content."]
  | BlockCommand
  [@ocaml.doc
    "A command that has zero or more word-like arguments (number of word-like arguments depends on command name) and a paragraph as an argument. Block command is block content."]
  | ParamCommand
  [@ocaml.doc
    "A \\param or \\arg command that describes the function parameter (name, passing direction, description)."]
  | TParamCommand
  [@ocaml.doc
    "A \\tparam command that describes a template parameter (name and description)."]
  | VerbatimBlockCommand
  [@ocaml.doc
    "A verbatim block command (e. g., preformatted code). Verbatim block has an opening and a closing command and contains multiple lines of text ( CXComment_VerbatimBlockLine child nodes)."]
  | VerbatimBlockLine
  [@ocaml.doc
    "A line of text that is contained within a CXComment_VerbatimBlockCommand node."]
  | VerbatimLine
  [@ocaml.doc
    "A verbatim line command. Verbatim line has an opening command, a single line of text (up to the newline after the opening command) and has no closing command."]
  | FullComment
  [@ocaml.doc
    "A full comment attached to a declaration, contains block content."]
[@@deriving refl][@@ocaml.doc
                   "Describes the type of the comment AST node ( CXComment). A comment node can be considered block content (e. g., paragraph), inline content (plain text) or neither (the root AST node)."]
external comment_get_kind :
  cxcomment -> cxcommentkind = "clang_Comment_getKind_wrapper"[@@ocaml.doc
                                                                "Returns the type of the AST node."]
external comment_get_num_children :
  cxcomment -> int = "clang_Comment_getNumChildren_wrapper"[@@ocaml.doc
                                                             "Returns number of children of the AST node."]
external comment_get_child :
  cxcomment -> int -> cxcomment = "clang_Comment_getChild_wrapper"[@@ocaml.doc
                                                                    "Returns the specified child of the AST node."]
external comment_is_whitespace :
  cxcomment -> bool = "clang_Comment_isWhitespace_wrapper"[@@ocaml.doc
                                                            "A CXComment_Paragraph node is considered whitespace if it contains only CXComment_Text nodes that are empty or whitespace."]
external inline_content_comment_has_trailing_newline :
  cxcomment -> int = "clang_InlineContentComment_hasTrailingNewline_wrapper"
[@@ocaml.doc
  "Returns non-zero if Comment is inline content and has a newline immediately following it in the comment text. Newlines between paragraphs do not count."]
external text_comment_get_text :
  cxcomment -> string = "clang_TextComment_getText_wrapper"[@@ocaml.doc
                                                             "Returns text contained in the AST node."]
external inline_command_comment_get_command_name :
  cxcomment -> string = "clang_InlineCommandComment_getCommandName_wrapper"
[@@ocaml.doc "Returns name of the inline command."]
type cxcommentinlinecommandrenderkind =
  | Normal
  [@ocaml.doc "Command argument should be rendered in a normal font."]
  | Bold [@ocaml.doc "Command argument should be rendered in a bold font."]
  | Monospaced
  [@ocaml.doc "Command argument should be rendered in a monospaced font."]
  | Emphasized
  [@ocaml.doc
    "Command argument should be rendered emphasized (typically italic font)."]
[@@deriving refl][@@ocaml.doc
                   "The most appropriate rendering mode for an inline command, chosen on command semantics in Doxygen."]
external inline_command_comment_get_render_kind :
  cxcomment -> cxcommentinlinecommandrenderkind =
    "clang_InlineCommandComment_getRenderKind_wrapper"[@@ocaml.doc
                                                        "Returns the most appropriate rendering mode, chosen on command semantics in Doxygen."]
external inline_command_comment_get_num_args :
  cxcomment -> int = "clang_InlineCommandComment_getNumArgs_wrapper"[@@ocaml.doc
                                                                    "Returns number of command arguments."]
external inline_command_comment_get_arg_text :
  cxcomment -> int -> string =
    "clang_InlineCommandComment_getArgText_wrapper"[@@ocaml.doc
                                                     "Returns text of the specified argument."]
external htmltag_comment_get_tag_name :
  cxcomment -> string = "clang_HTMLTagComment_getTagName_wrapper"[@@ocaml.doc
                                                                   "Returns HTML tag name."]
external htmlstart_tag_comment_is_self_closing :
  cxcomment -> bool = "clang_HTMLStartTagComment_isSelfClosing_wrapper"
[@@ocaml.doc
  "Returns non-zero if tag is self-closing (for example, <br />)."]
external htmlstart_tag_get_num_attrs :
  cxcomment -> int = "clang_HTMLStartTag_getNumAttrs_wrapper"[@@ocaml.doc
                                                               "Returns number of attributes (name-value pairs) attached to the start tag."]
external htmlstart_tag_get_attr_name :
  cxcomment -> int -> string = "clang_HTMLStartTag_getAttrName_wrapper"
[@@ocaml.doc "Returns name of the specified attribute."]
external htmlstart_tag_get_attr_value :
  cxcomment -> int -> string = "clang_HTMLStartTag_getAttrValue_wrapper"
[@@ocaml.doc "Returns value of the specified attribute."]
external block_command_comment_get_command_name :
  cxcomment -> string = "clang_BlockCommandComment_getCommandName_wrapper"
[@@ocaml.doc "Returns name of the block command."]
external block_command_comment_get_num_args :
  cxcomment -> int = "clang_BlockCommandComment_getNumArgs_wrapper"[@@ocaml.doc
                                                                    "Returns number of word-like arguments."]
external block_command_comment_get_arg_text :
  cxcomment -> int -> string = "clang_BlockCommandComment_getArgText_wrapper"
[@@ocaml.doc "Returns text of the specified word-like argument."]
external block_command_comment_get_paragraph :
  cxcomment -> cxcomment = "clang_BlockCommandComment_getParagraph_wrapper"
[@@ocaml.doc "Returns paragraph argument of the block command."]
external param_command_comment_get_param_name :
  cxcomment -> string = "clang_ParamCommandComment_getParamName_wrapper"
[@@ocaml.doc "Returns parameter name."]
external param_command_comment_is_param_index_valid :
  cxcomment -> bool = "clang_ParamCommandComment_isParamIndexValid_wrapper"
[@@ocaml.doc
  "Returns non-zero if the parameter that this AST node represents was found in the function prototype and clang_ParamCommandComment_getParamIndex function will return a meaningful value."]
external param_command_comment_get_param_index :
  cxcomment -> int = "clang_ParamCommandComment_getParamIndex_wrapper"
[@@ocaml.doc "Returns zero-based parameter index in function prototype."]
external param_command_comment_is_direction_explicit :
  cxcomment -> bool = "clang_ParamCommandComment_isDirectionExplicit_wrapper"
[@@ocaml.doc
  "Returns non-zero if parameter passing direction was specified explicitly in the comment."]
type cxcommentparampassdirection =
  | In [@ocaml.doc "The parameter is an input parameter."]
  | Out [@ocaml.doc "The parameter is an output parameter."]
  | InOut [@ocaml.doc "The parameter is an input and output parameter."]
[@@deriving refl][@@ocaml.doc
                   "Describes parameter passing direction for \\param or \\arg command."]
external param_command_comment_get_direction :
  cxcomment -> cxcommentparampassdirection =
    "clang_ParamCommandComment_getDirection_wrapper"[@@ocaml.doc
                                                      "Returns parameter passing direction."]
external tparam_command_comment_get_param_name :
  cxcomment -> string = "clang_TParamCommandComment_getParamName_wrapper"
[@@ocaml.doc "Returns template parameter name."]
external tparam_command_comment_is_param_position_valid :
  cxcomment -> bool =
    "clang_TParamCommandComment_isParamPositionValid_wrapper"[@@ocaml.doc
                                                               "Returns non-zero if the parameter that this AST node represents was found in the template parameter list and clang_TParamCommandComment_getDepth and clang_TParamCommandComment_getIndex functions will return a meaningful value."]
external tparam_command_comment_get_depth :
  cxcomment -> int = "clang_TParamCommandComment_getDepth_wrapper"[@@ocaml.doc
                                                                    "Returns zero-based nesting depth of this parameter in the template parameter list."]
external tparam_command_comment_get_index :
  cxcomment -> int -> int = "clang_TParamCommandComment_getIndex_wrapper"
[@@ocaml.doc
  "Returns zero-based parameter index in the template parameter list at a given nesting depth."]
external verbatim_block_line_comment_get_text :
  cxcomment -> string = "clang_VerbatimBlockLineComment_getText_wrapper"
[@@ocaml.doc "Returns text contained in the AST node."]
external verbatim_line_comment_get_text :
  cxcomment -> string = "clang_VerbatimLineComment_getText_wrapper"[@@ocaml.doc
                                                                    "Returns text contained in the AST node."]
external htmltag_comment_get_as_string :
  cxcomment -> string = "clang_HTMLTagComment_getAsString_wrapper"[@@ocaml.doc
                                                                    "Convert an HTML tag AST node to string."]
external full_comment_get_as_html :
  cxcomment -> string = "clang_FullComment_getAsHTML_wrapper"[@@ocaml.doc
                                                               "Convert a given full parsed comment to an HTML fragment."]
external full_comment_get_as_xml :
  cxcomment -> string = "clang_FullComment_getAsXML_wrapper"[@@ocaml.doc
                                                              "Convert a given full parsed comment to an XML document."]
type cxversion =
  {
  major: int
    [@ocaml.doc
      "The major version number, e.g., the '10' in '10.7.3'. A negative value indicates that there is no version number at all."];
  minor: int
    [@ocaml.doc
      "The minor version number, e.g., the '7' in '10.7.3'. This value will be negative if no minor version number was provided, e.g., for version '10'."];
  subminor: int
    [@ocaml.doc
      "The subminor version number, e.g., the '3' in '10.7.3'. This value will be negative if no minor or subminor version number was provided, e.g., in version '10' or '10.7'."]}
[@@deriving refl][@@ocaml.doc
                   "Describes a version number of the form major.minor.subminor."]
external ext_get_version : unit -> cxversion = "clang_ext_getVersion_wrapper"
type cxint
external equal_cxint : cxint -> cxint -> bool = "clang_equal_cxint_wrapper"
external compare_cxint :
  cxint -> cxint -> int = "clang_compare_cxint_wrapper"
external ext_integer_literal_get_value :
  cxcursor -> cxint = "clang_ext_IntegerLiteral_getValue_wrapper"
external ext_int_is_valid : cxint -> bool = "clang_ext_Int_isValid_wrapper"
external ext_int_to_string :
  cxint -> int -> bool -> string = "clang_ext_Int_toString_wrapper"
external ext_int_round_to_double :
  cxint -> bool -> float = "clang_ext_Int_roundToDouble_wrapper"
external ext_int_bits_to_float :
  cxint -> float = "clang_ext_Int_bitsToFloat_wrapper"
external ext_int_get_bit_width :
  cxint -> int = "clang_ext_Int_getBitWidth_wrapper"
external ext_int_get_active_bits :
  cxint -> int = "clang_ext_Int_getActiveBits_wrapper"
external ext_int_get_min_signed_bits :
  cxint -> int = "clang_ext_Int_getMinSignedBits_wrapper"
external ext_int_get_bool_value :
  cxint -> bool = "clang_ext_Int_getBoolValue_wrapper"
external ext_int_get_zext_value :
  cxint -> int = "clang_ext_Int_getZExtValue_wrapper"
external ext_int_get_sext_value :
  cxint -> int = "clang_ext_Int_getSExtValue_wrapper"
external ext_int_get_zext_value64 :
  cxint -> Int64.t = "clang_ext_Int_getZExtValue64_wrapper"
external ext_int_get_sext_value64 :
  cxint -> Int64.t = "clang_ext_Int_getSExtValue64_wrapper"
type cxfloat
external equal_cxfloat :
  cxfloat -> cxfloat -> bool = "clang_equal_cxfloat_wrapper"
external compare_cxfloat :
  cxfloat -> cxfloat -> int = "clang_compare_cxfloat_wrapper"
external ext_floating_literal_get_value :
  cxcursor -> cxfloat = "clang_ext_FloatingLiteral_getValue_wrapper"
external ext_float_is_valid :
  cxfloat -> bool = "clang_ext_Float_isValid_wrapper"
external ext_float_to_string :
  cxfloat -> string = "clang_ext_Float_toString_wrapper"
type clang_ext_fltsemantics =
  | IEEEhalf 
  | IEEEsingle 
  | IEEEdouble 
  | IEEEquad 
  | PPCDoubleDouble 
  | X87DoubleExtended 
  | Bogus 
  | Invalid [@@deriving refl]
external ext_float_get_semantics :
  cxfloat -> clang_ext_fltsemantics = "clang_ext_Float_getSemantics_wrapper"
external ext_float_convert_to_float :
  cxfloat -> float = "clang_ext_Float_convertToFloat_wrapper"
external ext_float_convert_to_double :
  cxfloat -> float = "clang_ext_Float_convertToDouble_wrapper"
external ext_string_literal_get_string :
  cxcursor -> string = "clang_ext_StringLiteral_GetString_wrapper"
external ext_string_literal_get_bytes :
  cxcursor -> string = "clang_ext_StringLiteral_getBytes_wrapper"
external ext_string_literal_get_byte_length :
  cxcursor -> int = "clang_ext_StringLiteral_getByteLength_wrapper"
external ext_string_literal_get_char_byte_width :
  cxcursor -> int = "clang_ext_StringLiteral_getCharByteWidth_wrapper"
type clang_ext_stringkind =
  | Ascii 
  | Wide 
  | UTF8 
  | UTF16 
  | UTF32 
  | InvalidStringKind [@@deriving refl]
external ext_string_literal_get_kind :
  cxcursor -> clang_ext_stringkind =
    "clang_ext_StringLiteral_getKind_wrapper"
type clang_ext_unaryoperatorkind =
  | PostInc 
  | PostDec 
  | PreInc 
  | PreDec 
  | AddrOf 
  | Deref 
  | Plus 
  | Minus 
  | Not 
  | LNot 
  | Real 
  | Imag 
  | Extension 
  | Invalid [@@deriving refl]
external ext_unary_operator_get_opcode :
  cxcursor -> clang_ext_unaryoperatorkind =
    "clang_ext_UnaryOperator_getOpcode_wrapper"
external ext_unary_operator_get_opcode_spelling :
  clang_ext_unaryoperatorkind -> string =
    "clang_ext_UnaryOperator_getOpcodeSpelling_wrapper"
type clang_ext_binaryoperatorkind =
  | PtrMemD 
  | PtrMemI 
  | Mul 
  | Div 
  | Rem 
  | Add 
  | Sub 
  | Shl 
  | Shr 
  | LT 
  | GT 
  | LE 
  | GE 
  | EQ 
  | NE 
  | And 
  | Xor 
  | Or 
  | LAnd 
  | LOr 
  | Assign 
  | MulAssign 
  | DivAssign 
  | RemAssign 
  | AddAssign 
  | SubAssign 
  | ShlAssign 
  | ShrAssign 
  | AndAssign 
  | XorAssign 
  | OrAssign 
  | Comma 
  | Invalid [@@deriving refl]
external ext_binary_operator_get_opcode :
  cxcursor -> clang_ext_binaryoperatorkind =
    "clang_ext_BinaryOperator_getOpcode_wrapper"
external ext_binary_operator_get_opcode_spelling :
  clang_ext_binaryoperatorkind -> string =
    "clang_ext_BinaryOperator_getOpcodeSpelling_wrapper"
external ext_for_stmt_get_children_set :
  cxcursor -> int = "clang_ext_ForStmt_getChildrenSet_wrapper"
external ext_if_stmt_get_children_set :
  cxcursor -> int = "clang_ext_IfStmt_getChildrenSet_wrapper"
external ext_if_stmt_get_init :
  cxcursor -> cxcursor = "clang_ext_IfStmt_getInit_wrapper"
external ext_if_stmt_get_condition_variable :
  cxcursor -> cxcursor = "clang_ext_IfStmt_getConditionVariable_wrapper"
external ext_if_stmt_get_cond :
  cxcursor -> cxcursor = "clang_ext_IfStmt_getCond_wrapper"
external ext_if_stmt_get_then :
  cxcursor -> cxcursor = "clang_ext_IfStmt_getThen_wrapper"
external ext_if_stmt_get_else :
  cxcursor -> cxcursor = "clang_ext_IfStmt_getElse_wrapper"
external ext_switch_stmt_get_children_set :
  cxcursor -> int = "clang_ext_SwitchStmt_getChildrenSet_wrapper"
external ext_switch_stmt_get_init :
  cxcursor -> cxcursor = "clang_ext_SwitchStmt_getInit_wrapper"
external ext_while_stmt_get_children_set :
  cxcursor -> int = "clang_ext_WhileStmt_getChildrenSet_wrapper"
type clang_ext_elaboratedtypekeyword =
  | Struct 
  | Interface 
  | Union 
  | Class 
  | Enum 
  | Typename 
  | NoKeyword [@@deriving refl]
external ext_elaborated_type_get_keyword :
  cxtype -> clang_ext_elaboratedtypekeyword =
    "clang_ext_ElaboratedType_getKeyword_wrapper"
external ext_elaborated_type_get_keyword_spelling :
  clang_ext_elaboratedtypekeyword -> string =
    "clang_ext_ElaboratedType_getKeywordSpelling_wrapper"
external ext_var_decl_has_init :
  cxcursor -> bool = "clang_ext_VarDecl_hasInit_wrapper"
external ext_var_decl_is_constexpr :
  cxcursor -> bool = "clang_ext_VarDecl_isConstexpr_wrapper"
external ext_member_ref_expr_is_arrow :
  cxcursor -> bool = "clang_ext_MemberRefExpr_isArrow_wrapper"
external ext_stmt_get_class_name :
  cxcursor -> string = "clang_ext_Stmt_GetClassName_wrapper"
external ext_stmt_get_class_kind :
  cxcursor -> int = "clang_ext_Stmt_GetClassKind_wrapper"
type clang_ext_cursorkind =
  | ImplicitCastExpr 
  | BinaryConditionalOperator 
  | UnaryExprOrTypeTraitExpr 
  | EmptyDecl 
  | LinkageSpecDecl 
  | Unknown [@@deriving refl]
external ext_get_cursor_kind :
  cxcursor -> clang_ext_cursorkind = "clang_ext_GetCursorKind_wrapper"
type clang_ext_declkind =
  | InvalidDecl 
  | AccessSpec 
  | Block 
  | Captured 
  | ClassScopeFunctionSpecialization 
  | Empty 
  | FileScopeAsm 
  | Friend 
  | FriendTemplate 
  | Import 
  | LinkageSpec 
  | Label 
  | Namespace 
  | NamespaceAlias 
  | ObjCCompatibleAlias 
  | ObjCCategory 
  | ObjCCategoryImpl 
  | ObjCImplementation 
  | ObjCInterface 
  | ObjCProtocol 
  | ObjCMethod 
  | ObjCProperty 
  | ClassTemplate 
  | FunctionTemplate 
  | TypeAliasTemplate 
  | VarTemplate 
  | TemplateTemplateParm 
  | Enum 
  | Record 
  | CXXRecord 
  | ClassTemplateSpecialization 
  | ClassTemplatePartialSpecialization 
  | TemplateTypeParm 
  | TypeAlias 
  | Typedef 
  | UnresolvedUsingTypename 
  | Using 
  | UsingDirective 
  | UsingShadow 
  | Field 
  | ObjCAtDefsField 
  | ObjCIvar 
  | Function 
  | CXXMethod 
  | CXXConstructor 
  | CXXConversion 
  | CXXDestructor 
  | MSProperty 
  | NonTypeTemplateParm 
  | Var 
  | ImplicitParam 
  | ParmVar 
  | VarTemplateSpecialization 
  | VarTemplatePartialSpecialization 
  | EnumConstant 
  | IndirectField 
  | UnresolvedUsingValue 
  | OMPThreadPrivate 
  | ObjCPropertyImpl 
  | StaticAssert 
  | TranslationUnit 
  | UnknownDecl [@@deriving refl]
external ext_decl_get_kind :
  cxcursor -> clang_ext_declkind = "clang_ext_Decl_GetKind_wrapper"
external ext_decl_visit_attributes :
  cxcursor -> (cxcursor -> cxcursor -> cxchildvisitresult) -> bool =
    "clang_ext_Decl_visitAttributes_wrapper"
external ext_decl_is_implicit :
  cxcursor -> bool = "clang_ext_Decl_isImplicit_wrapper"
external ext_record_decl_is_injected_class_name :
  cxcursor -> bool = "clang_ext_RecordDecl_isInjectedClassName_wrapper"
external ext_cxxrecord_decl_visit_bases :
  cxcursor -> (cxcursor -> cxcursor -> cxchildvisitresult) -> bool =
    "clang_ext_CXXRecordDecl_visitBases_wrapper"
type clang_ext_stmtkind =
  | InvalidStmt 
  | GCCAsmStmt 
  | MSAsmStmt 
  | AttributedStmt 
  | BreakStmt 
  | CXXCatchStmt 
  | CXXForRangeStmt 
  | CXXTryStmt 
  | CapturedStmt 
  | CompoundStmt 
  | ContinueStmt 
  | DeclStmt 
  | DoStmt 
  | BinaryConditionalOperator 
  | ConditionalOperator 
  | AddrLabelExpr 
  | ArraySubscriptExpr 
  | ArrayTypeTraitExpr 
  | AsTypeExpr 
  | AtomicExpr 
  | BinaryOperator 
  | CompoundAssignOperator 
  | BlockExpr 
  | CXXBindTemporaryExpr 
  | CXXBoolLiteralExpr 
  | CXXConstructExpr 
  | CXXTemporaryObjectExpr 
  | CXXDefaultArgExpr 
  | CXXDefaultInitExpr 
  | CXXDeleteExpr 
  | CXXDependentScopeMemberExpr 
  | CXXNewExpr 
  | CXXNoexceptExpr 
  | CXXNullPtrLiteralExpr 
  | CXXPseudoDestructorExpr 
  | CXXScalarValueInitExpr 
  | CXXStdInitializerListExpr 
  | CXXThisExpr 
  | CXXThrowExpr 
  | CXXTypeidExpr 
  | CXXUnresolvedConstructExpr 
  | CXXUuidofExpr 
  | CallExpr 
  | CUDAKernelCallExpr 
  | CXXMemberCallExpr 
  | CXXOperatorCallExpr 
  | UserDefinedLiteral 
  | CStyleCastExpr 
  | CXXFunctionalCastExpr 
  | CXXConstCastExpr 
  | CXXDynamicCastExpr 
  | CXXReinterpretCastExpr 
  | CXXStaticCastExpr 
  | ObjCBridgedCastExpr 
  | ImplicitCastExpr 
  | CharacterLiteral 
  | ChooseExpr 
  | CompoundLiteralExpr 
  | ConvertVectorExpr 
  | DeclRefExpr 
  | DependentScopeDeclRefExpr 
  | DesignatedInitExpr 
  | ExprWithCleanups 
  | ExpressionTraitExpr 
  | ExtVectorElementExpr 
  | FloatingLiteral 
  | FunctionParmPackExpr 
  | GNUNullExpr 
  | GenericSelectionExpr 
  | ImaginaryLiteral 
  | ImplicitValueInitExpr 
  | InitListExpr 
  | IntegerLiteral 
  | LambdaExpr 
  | MSPropertyRefExpr 
  | MaterializeTemporaryExpr 
  | MemberExpr 
  | ObjCArrayLiteral 
  | ObjCBoolLiteralExpr 
  | ObjCBoxedExpr 
  | ObjCDictionaryLiteral 
  | ObjCEncodeExpr 
  | ObjCIndirectCopyRestoreExpr 
  | ObjCIsaExpr 
  | ObjCIvarRefExpr 
  | ObjCMessageExpr 
  | ObjCPropertyRefExpr 
  | ObjCProtocolExpr 
  | ObjCSelectorExpr 
  | ObjCStringLiteral 
  | ObjCSubscriptRefExpr 
  | OffsetOfExpr 
  | OpaqueValueExpr 
  | UnresolvedLookupExpr 
  | UnresolvedMemberExpr 
  | PackExpansionExpr 
  | ParenExpr 
  | ParenListExpr 
  | PredefinedExpr 
  | PseudoObjectExpr 
  | ShuffleVectorExpr 
  | SizeOfPackExpr 
  | StmtExpr 
  | StringLiteral 
  | SubstNonTypeTemplateParmExpr 
  | SubstNonTypeTemplateParmPackExpr 
  | TypeTraitExpr 
  | UnaryExprOrTypeTraitExpr 
  | UnaryOperator 
  | VAArgExpr 
  | ForStmt 
  | GotoStmt 
  | IfStmt 
  | IndirectGotoStmt 
  | LabelStmt 
  | MSDependentExistsStmt 
  | NullStmt 
  | OMPBarrierDirective 
  | OMPCriticalDirective 
  | OMPFlushDirective 
  | OMPForDirective 
  | OMPMasterDirective 
  | OMPParallelDirective 
  | OMPParallelForDirective 
  | OMPParallelSectionsDirective 
  | OMPSectionDirective 
  | OMPSectionsDirective 
  | OMPSimdDirective 
  | OMPSingleDirective 
  | OMPTaskDirective 
  | OMPTaskwaitDirective 
  | OMPTaskyieldDirective 
  | ObjCAtCatchStmt 
  | ObjCAtFinallyStmt 
  | ObjCAtSynchronizedStmt 
  | ObjCAtThrowStmt 
  | ObjCAtTryStmt 
  | ObjCAutoreleasePoolStmt 
  | ObjCForCollectionStmt 
  | ReturnStmt 
  | SEHExceptStmt 
  | SEHFinallyStmt 
  | SEHLeaveStmt 
  | SEHTryStmt 
  | CaseStmt 
  | DefaultStmt 
  | SwitchStmt 
  | WhileStmt 
  | UnknownStmt [@@deriving refl]
external ext_stmt_get_kind :
  cxcursor -> clang_ext_stmtkind = "clang_ext_Stmt_GetKind_wrapper"
type clang_ext_typekind =
  | InvalidType 
  | Builtin 
  | Complex 
  | Pointer 
  | BlockPointer 
  | LValueReference 
  | RValueReference 
  | MemberPointer 
  | ConstantArray 
  | IncompleteArray 
  | VariableArray 
  | DependentSizedArray 
  | DependentSizedExtVector 
  | Vector 
  | ExtVector 
  | FunctionProto 
  | FunctionNoProto 
  | UnresolvedUsing 
  | Paren 
  | Typedef 
  | Adjusted 
  | Decayed 
  | TypeOfExpr 
  | TypeOf 
  | Decltype 
  | UnaryTransform 
  | Record 
  | Enum 
  | Elaborated 
  | Attributed 
  | TemplateTypeParm 
  | SubstTemplateTypeParm 
  | SubstTemplateTypeParmPack 
  | TemplateSpecialization 
  | Auto 
  | InjectedClassName 
  | DependentName 
  | DependentTemplateSpecialization 
  | PackExpansion 
  | ObjCObject 
  | ObjCInterface 
  | ObjCObjectPointer 
  | Atomic 
  | UnknownType [@@deriving refl]
external ext_type_get_kind :
  cxtype -> clang_ext_typekind = "clang_ext_Type_GetKind_wrapper"
external ext_get_type_kind :
  cxtype -> clang_ext_typekind = "clang_ext_GetTypeKind_wrapper"
external ext_get_inner_type :
  cxtype -> cxtype = "clang_ext_GetInnerType_wrapper"
external ext_declarator_decl_get_size_expr :
  cxcursor -> cxcursor = "clang_ext_DeclaratorDecl_GetSizeExpr_wrapper"
external ext_variable_array_type_get_size_expr :
  cxtype -> cxcursor = "clang_ext_VariableArrayType_GetSizeExpr_wrapper"
external ext_character_literal_get_character_kind :
  cxcursor -> clang_ext_stringkind =
    "clang_ext_CharacterLiteral_GetCharacterKind_wrapper"
external ext_character_literal_get_value :
  cxcursor -> int = "clang_ext_CharacterLiteral_GetValue_wrapper"
type clang_ext_unaryexpr =
  | SizeOf 
  | AlignOf 
  | VecStep 
  | OpenMPRequiredSimdAlign 
  | PreferredAlignOf [@@deriving refl]
external ext_unary_expr_get_kind :
  cxcursor -> clang_ext_unaryexpr = "clang_ext_UnaryExpr_GetKind_wrapper"
external ext_unary_expr_is_argument_type :
  cxcursor -> bool = "clang_ext_UnaryExpr_isArgumentType_wrapper"
type clang_ext_typeloc
external ext_unary_expr_get_argument_type_loc :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_UnaryExpr_getArgumentTypeLoc_wrapper"
external ext_type_get_named_type :
  cxtype -> cxtype = "clang_ext_Type_getNamedType_wrapper"
type clang_ext_attrkind =
  | NoAttr 
  | Annotate 
  | CFConsumed 
  | CarriesDependency 
  | NSConsumed 
  | ARMInterrupt 
  | AcquireCapability 
  | AcquiredAfter 
  | AcquiredBefore 
  | AlignMac68k 
  | Aligned 
  | AlwaysInline 
  | AnalyzerNoReturn 
  | ArcWeakrefUnavailable 
  | ArgumentWithTypeTag 
  | AsmLabel 
  | AssertCapability 
  | AssertExclusiveLock 
  | AssertSharedLock 
  | Availability 
  | Blocks 
  | C11NoReturn 
  | CDecl 
  | CFAuditedTransfer 
  | CFReturnsNotRetained 
  | CFReturnsRetained 
  | CFUnknownTransfer 
  | CUDAConstant 
  | CUDADevice 
  | CUDAGlobal 
  | CUDAHost 
  | CUDALaunchBounds 
  | CUDAShared 
  | CXX11NoReturn 
  | CallableWhen 
  | Capability 
  | Cleanup 
  | Cold 
  | Common 
  | Const 
  | Constructor 
  | Consumable 
  | ConsumableAutoCast 
  | ConsumableSetOnRead 
  | DLLExport 
  | DLLImport 
  | Deprecated 
  | Destructor 
  | EnableIf 
  | ExclusiveTrylockFunction 
  | FastCall 
  | Final 
  | Flatten 
  | Format 
  | FormatArg 
  | GNUInline 
  | GuardedBy 
  | GuardedVar 
  | Hot 
  | IBAction 
  | IBOutlet 
  | IBOutletCollection 
  | InitPriority 
  | IntelOclBicc 
  | LockReturned 
  | LocksExcluded 
  | MSABI 
  | MSInheritance 
  | MSP430Interrupt 
  | MSVtorDisp 
  | Malloc 
  | MaxFieldAlignment 
  | MayAlias 
  | MinSize 
  | Mips16 
  | MsStruct 
  | NSConsumesSelf 
  | NSReturnsAutoreleased 
  | NSReturnsNotRetained 
  | NSReturnsRetained 
  | Naked 
  | NoCommon 
  | NoDebug 
  | NoDuplicate 
  | NoInline 
  | NoInstrumentFunction 
  | NoMips16 
  | NoReturn 
  | NoSanitizeAddress 
  | NoSanitizeMemory 
  | NoSanitizeThread 
  | NoSplitStack 
  | NoThreadSafetyAnalysis 
  | NoThrow 
  | NonNull 
  | ObjCBridge 
  | ObjCBridgeMutable 
  | ObjCBridgeRelated 
  | ObjCException 
  | ObjCExplicitProtocolImpl 
  | ObjCMethodFamily 
  | ObjCNSObject 
  | ObjCPreciseLifetime 
  | ObjCRequiresPropertyDefs 
  | ObjCRequiresSuper 
  | ObjCReturnsInnerPointer 
  | ObjCRootClass 
  | OpenCLKernel 
  | OptimizeNone 
  | Override 
  | Ownership 
  | Packed 
  | ParamTypestate 
  | Pascal 
  | Pcs 
  | PnaclCall 
  | PtGuardedBy 
  | PtGuardedVar 
  | Pure 
  | ReleaseCapability 
  | ReqdWorkGroupSize 
  | RequiresCapability 
  | ReturnTypestate 
  | ReturnsNonNull 
  | ReturnsTwice 
  | ScopedLockable 
  | Section 
  | SelectAny 
  | Sentinel 
  | SetTypestate 
  | SharedTrylockFunction 
  | StdCall 
  | SysVABI 
  | TLSModel 
  | TestTypestate 
  | ThisCall 
  | TransparentUnion 
  | TryAcquireCapability 
  | TypeTagForDatatype 
  | TypeVisibility 
  | Unavailable 
  | Unused 
  | Used 
  | Uuid 
  | VecReturn 
  | VecTypeHint 
  | Visibility 
  | WarnUnused 
  | WarnUnusedResult 
  | Weak 
  | WeakImport 
  | WeakRef 
  | WorkGroupSizeHint 
  | X86ForceAlignArgPointer 
  | Alias 
  | FallThrough 
  | InitSeg 
  | LoopHint 
  | Mode 
  | ObjCDesignatedInitializer 
  | ObjCRuntimeName 
  | OpenCLImageAccess 
  | Overloadable 
  | Thread [@@deriving refl]
external ext_attr_kind_get_spelling :
  clang_ext_attrkind -> string = "clang_ext_AttrKind_GetSpelling_wrapper"
external ext_cxxmethod_is_defaulted :
  cxcursor -> bool = "clang_ext_CXXMethod_isDefaulted_wrapper"
external ext_cxxmethod_is_const :
  cxcursor -> bool = "clang_ext_CXXMethod_isConst_wrapper"
external ext_cxxconstructor_is_explicit :
  cxcursor -> bool = "clang_ext_CXXConstructor_isExplicit_wrapper"
external ext_function_decl_is_deleted :
  cxcursor -> bool = "clang_ext_FunctionDecl_isDeleted_wrapper"
external ext_function_decl_get_num_params :
  cxcursor -> int = "clang_ext_FunctionDecl_getNumParams_wrapper"
external ext_function_decl_get_param_decl :
  cxcursor -> int -> cxcursor = "clang_ext_FunctionDecl_getParamDecl_wrapper"
external ext_function_decl_is_constexpr :
  cxcursor -> bool = "clang_ext_FunctionDecl_isConstexpr_wrapper"
external ext_function_decl_has_written_prototype :
  cxcursor -> bool = "clang_ext_FunctionDecl_hasWrittenPrototype_wrapper"
external ext_function_decl_does_this_declaration_have_abody :
  cxcursor -> bool =
    "clang_ext_FunctionDecl_doesThisDeclarationHaveABody_wrapper"
external ext_function_decl_get_body :
  cxcursor -> cxcursor = "clang_ext_FunctionDecl_getBody_wrapper"
module Clang_ext_languageids =
  struct
    type t = int
    external (+) : t -> t -> t = "%orint"
    let (-) x y = x land (lnot y)
    external (&) : t -> t -> t = "%andint"
    external ( * ) : t -> t -> t = "%xorint"
    let subset x y = (y - x) = 0
    let zero = 0
    let c = 2
    let cxx = 4
  end
external ext_linkage_spec_decl_get_language_ids :
  cxcursor -> Clang_ext_languageids.t =
    "clang_ext_LinkageSpecDecl_getLanguageIDs_wrapper"
external ext_template_type_parm_decl_get_default_argument :
  cxcursor -> cxtype =
    "clang_ext_TemplateTypeParmDecl_getDefaultArgument_wrapper"
external ext_non_type_template_parm_decl_get_default_argument :
  cxcursor -> cxcursor =
    "clang_ext_NonTypeTemplateParmDecl_getDefaultArgument_wrapper"
type clang_ext_templatename_namekind =
  | Template 
  | OverloadedTemplate 
  | QualifiedTemplate 
  | DependentTemplate 
  | SubstTemplateTemplateParm 
  | SubstTemplateTemplateParmPack 
  | InvalidNameKind [@@deriving refl]
type clang_ext_templatename
external ext_template_name_get_kind :
  clang_ext_templatename -> clang_ext_templatename_namekind =
    "clang_ext_TemplateName_getKind_wrapper"
external ext_template_name_get_as_template_decl :
  clang_ext_templatename -> cxcursor =
    "clang_ext_TemplateName_getAsTemplateDecl_wrapper"
type cxtemplateargumentkind =
  | Null 
  | Type 
  | Declaration 
  | NullPtr 
  | Integral 
  | Template 
  | TemplateExpansion 
  | Expression 
  | Pack 
  | Invalid [@@deriving refl]
type clang_ext_templateargument
external ext_template_argument_get_kind :
  clang_ext_templateargument -> cxtemplateargumentkind =
    "clang_ext_TemplateArgument_getKind_wrapper"
external ext_template_argument_get_as_type :
  clang_ext_templateargument -> cxtype =
    "clang_ext_TemplateArgument_getAsType_wrapper"
external ext_template_argument_get_as_decl :
  clang_ext_templateargument -> cxcursor =
    "clang_ext_TemplateArgument_getAsDecl_wrapper"
external ext_template_argument_get_null_ptr_type :
  clang_ext_templateargument -> cxtype =
    "clang_ext_TemplateArgument_getNullPtrType_wrapper"
external ext_template_argument_get_as_template_or_template_pattern :
  clang_ext_templateargument -> clang_ext_templatename =
    "clang_ext_TemplateArgument_getAsTemplateOrTemplatePattern_wrapper"
external ext_template_argument_get_as_integral :
  clang_ext_templateargument -> cxint =
    "clang_ext_TemplateArgument_getAsIntegral_wrapper"
external ext_template_argument_get_integral_type :
  clang_ext_templateargument -> cxtype =
    "clang_ext_TemplateArgument_getIntegralType_wrapper"
external ext_template_argument_get_as_expr :
  clang_ext_templateargument -> cxcursor =
    "clang_ext_TemplateArgument_getAsExpr_wrapper"
external ext_template_argument_get_pack_size :
  clang_ext_templateargument -> int =
    "clang_ext_TemplateArgument_getPackSize_wrapper"
external ext_template_argument_get_pack_argument :
  clang_ext_templateargument -> int -> clang_ext_templateargument =
    "clang_ext_TemplateArgument_getPackArgument_wrapper"
external ext_template_argument_get_pack_expansion_pattern :
  clang_ext_templateargument -> clang_ext_templateargument =
    "clang_ext_TemplateArgument_getPackExpansionPattern_wrapper"
external ext_template_specialization_type_get_template_name :
  cxtype -> clang_ext_templatename =
    "clang_ext_TemplateSpecializationType_getTemplateName_wrapper"
external ext_template_specialization_type_get_num_args :
  cxtype -> int = "clang_ext_TemplateSpecializationType_getNumArgs_wrapper"
external ext_template_specialization_type_get_argument :
  cxtype -> int -> clang_ext_templateargument =
    "clang_ext_TemplateSpecializationType_getArgument_wrapper"
external ext_friend_decl_get_friend_decl :
  cxcursor -> cxcursor = "clang_ext_FriendDecl_getFriendDecl_wrapper"
external ext_friend_decl_get_friend_type :
  cxcursor -> cxtype = "clang_ext_FriendDecl_getFriendType_wrapper"
external ext_field_decl_get_in_class_initializer :
  cxcursor -> cxcursor = "clang_ext_FieldDecl_getInClassInitializer_wrapper"
external ext_generic_selection_expr_get_assoc_type :
  cxcursor -> int -> cxtype =
    "clang_ext_GenericSelectionExpr_getAssocType_wrapper"
external ext_template_parm_is_parameter_pack :
  cxcursor -> bool = "clang_ext_TemplateParm_isParameterPack_wrapper"
external ext_template_decl_get_templated_decl :
  cxcursor -> cxcursor = "clang_ext_TemplateDecl_getTemplatedDecl_wrapper"
type clang_ext_predefinedexpr_identkind =
  | Func 
  | Function 
  | LFunction 
  | FuncDName 
  | FuncSig 
  | LFuncSig 
  | PrettyFunction 
  | PrettyFunctionNoVirtual 
  | InvalidPredefinedExpr [@@deriving refl]
external ext_predefined_expr_get_ident_kind :
  cxcursor -> clang_ext_predefinedexpr_identkind =
    "clang_ext_PredefinedExpr_getIdentKind_wrapper"
external ext_predefined_expr_compute_name :
  clang_ext_predefinedexpr_identkind -> cxcursor -> string =
    "clang_ext_PredefinedExpr_ComputeName_wrapper"
external ext_lambda_expr_is_mutable :
  cxcursor -> bool = "clang_ext_LambdaExpr_isMutable_wrapper"
external ext_lambda_expr_has_explicit_parameters :
  cxcursor -> bool = "clang_ext_LambdaExpr_hasExplicitParameters_wrapper"
external ext_lambda_expr_has_explicit_result_type :
  cxcursor -> bool = "clang_ext_LambdaExpr_hasExplicitResultType_wrapper"
type clang_ext_lambdacapturedefault =
  | CaptureNone 
  | ByCopy 
  | ByRef [@@deriving refl]
external ext_lambda_expr_get_capture_default :
  cxcursor -> clang_ext_lambdacapturedefault =
    "clang_ext_LambdaExpr_getCaptureDefault_wrapper"
type clang_ext_lambdacapture
external ext_lambda_expr_get_captures :
  cxcursor -> (clang_ext_lambdacapture -> unit) -> unit =
    "clang_ext_LambdaExpr_getCaptures_wrapper"
external ext_lambda_expr_get_call_operator :
  cxcursor -> cxcursor = "clang_ext_LambdaExpr_getCallOperator_wrapper"
type clang_ext_lambdacapturekind =
  | This 
  | StarThis 
  | ByCopy 
  | ByRef 
  | VLAType [@@deriving refl]
external ext_lambda_capture_get_kind :
  clang_ext_lambdacapture -> clang_ext_lambdacapturekind =
    "clang_ext_LambdaCapture_getKind_wrapper"
external ext_lambda_capture_get_captured_var :
  clang_ext_lambdacapture -> cxcursor =
    "clang_ext_LambdaCapture_getCapturedVar_wrapper"
external ext_lambda_capture_is_implicit :
  clang_ext_lambdacapture -> bool =
    "clang_ext_LambdaCapture_isImplicit_wrapper"
external ext_lambda_capture_is_pack_expansion :
  clang_ext_lambdacapture -> bool =
    "clang_ext_LambdaCapture_isPackExpansion_wrapper"
external ext_cxxnew_expr_get_allocated_type_loc :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_CXXNewExpr_getAllocatedTypeLoc_wrapper"
external ext_cxxnew_expr_get_array_size :
  cxcursor -> cxcursor = "clang_ext_CXXNewExpr_getArraySize_wrapper"
external ext_cxxnew_expr_get_num_placement_args :
  cxcursor -> int = "clang_ext_CXXNewExpr_getNumPlacementArgs_wrapper"
external ext_cxxnew_expr_get_placement_arg :
  cxcursor -> int -> cxcursor =
    "clang_ext_CXXNewExpr_getPlacementArg_wrapper"
external ext_cxxnew_expr_get_initializer :
  cxcursor -> cxcursor = "clang_ext_CXXNewExpr_getInitializer_wrapper"
external ext_cxxdelete_expr_is_global_delete :
  cxcursor -> bool = "clang_ext_CXXDeleteExpr_isGlobalDelete_wrapper"
external ext_cxxdelete_expr_is_array_form :
  cxcursor -> bool = "clang_ext_CXXDeleteExpr_isArrayForm_wrapper"
external ext_cxxtypeid_expr_is_type_operand :
  cxcursor -> bool = "clang_ext_CXXTypeidExpr_isTypeOperand_wrapper"
external ext_cxxtypeid_expr_get_type_operand :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_CXXTypeidExpr_getTypeOperand_wrapper"
external ext_cxxtypeid_expr_get_expr_operand :
  cxcursor -> cxcursor = "clang_ext_CXXTypeidExpr_getExprOperand_wrapper"
type clang_ext_langstandards =
  | C89 
  | C90 
  | Iso9899_1990 
  | C94 
  | Gnu89 
  | Gnu90 
  | C99 
  | C9x 
  | Iso9899_1999 
  | Iso9899_199x 
  | Gnu99 
  | Gnu9x 
  | C11 
  | C1x 
  | Iso9899_2011 
  | Iso9899_201x 
  | Gnu11 
  | Gnu1x 
  | Cxx98 
  | Cxx03 
  | Gnucxx98 
  | Cxx0x 
  | Cxx11 
  | Gnucxx0x 
  | Gnucxx11 
  | Cxx1y 
  | Cxx14 
  | Gnucxx1y 
  | Gnucxx14 
  | Cxx1z 
  | Gnucxx1z 
  | Opencl 
  | Opencl11 
  | Opencl12 
  | Cuda 
  | InvalidLang [@@deriving refl]
external ext_lang_standard_get_name :
  clang_ext_langstandards -> string =
    "clang_ext_LangStandard_getName_wrapper"
external ext_lang_standard_of_name :
  string -> clang_ext_langstandards = "clang_ext_LangStandard_ofName_wrapper"
external ext_pack_expansion_get_pattern :
  cxtype -> cxtype = "clang_ext_PackExpansion_getPattern_wrapper"
external ext_cxxfold_expr_is_right_fold :
  cxcursor -> bool = "clang_ext_CXXFoldExpr_isRightFold_wrapper"
external ext_cxxfold_expr_get_operator :
  cxcursor -> clang_ext_binaryoperatorkind =
    "clang_ext_CXXFoldExpr_getOperator_wrapper"
external ext_cxxbool_literal_expr_get_value :
  cxcursor -> bool = "clang_ext_CXXBoolLiteralExpr_getValue_wrapper"
external ext_call_expr_get_callee :
  cxcursor -> cxcursor = "clang_ext_CallExpr_getCallee_wrapper"
external ext_call_expr_get_num_args :
  cxcursor -> int = "clang_ext_CallExpr_getNumArgs_wrapper"
external ext_call_expr_get_arg :
  cxcursor -> int -> cxcursor = "clang_ext_CallExpr_getArg_wrapper"
external ext_size_of_pack_expr_get_pack :
  cxcursor -> cxcursor = "clang_ext_SizeOfPackExpr_getPack_wrapper"
external ext_decltype_type_get_underlying_expr :
  cxtype -> cxcursor = "clang_ext_DecltypeType_getUnderlyingExpr_wrapper"
external ext_namespace_decl_is_inline :
  cxcursor -> bool = "clang_ext_NamespaceDecl_isInline_wrapper"
type clang_ext_overloadedoperatorkind =
  | InvalidOverloadedOperator 
  | New 
  | Delete 
  | Array_New 
  | Array_Delete 
  | Plus 
  | Minus 
  | Star 
  | Slash 
  | Percent 
  | Caret 
  | Amp 
  | Pipe 
  | Tilde 
  | Exclaim 
  | Equal 
  | Less 
  | Greater 
  | PlusEqual 
  | MinusEqual 
  | StarEqual 
  | SlashEqual 
  | PercentEqual 
  | CaretEqual 
  | AmpEqual 
  | PipeEqual 
  | LessLess 
  | GreaterGreater 
  | LessLessEqual 
  | GreaterGreaterEqual 
  | EqualEqual 
  | ExclaimEqual 
  | LessEqual 
  | GreaterEqual 
  | AmpAmp 
  | PipePipe 
  | PlusPlus 
  | MinusMinus 
  | Comma 
  | ArrowStar 
  | Arrow 
  | Call 
  | Subscript 
  | Conditional [@@deriving refl]
external ext_overloaded_operator_get_spelling :
  clang_ext_overloadedoperatorkind -> string =
    "clang_ext_OverloadedOperator_getSpelling_wrapper"
type clang_ext_declarationnamekind =
  | Identifier 
  | ObjCZeroArgSelector 
  | ObjCOneArgSelector 
  | ObjCMultiArgSelector 
  | CXXConstructorName 
  | CXXDestructorName 
  | CXXConversionFunctionName 
  | CXXDeductionGuideName 
  | CXXOperatorName 
  | CXXLiteralOperatorName 
  | CXXUsingDirective 
  | InvalidDeclarationName [@@deriving refl]
type clang_ext_declarationname
external ext_declaration_name_get_kind :
  clang_ext_declarationname -> clang_ext_declarationnamekind =
    "clang_ext_DeclarationName_getKind_wrapper"
external ext_declaration_name_get_cxxoverloaded_operator :
  clang_ext_declarationname -> clang_ext_overloadedoperatorkind =
    "clang_ext_DeclarationName_getCXXOverloadedOperator_wrapper"
external ext_declaration_name_get_cxxname_type :
  clang_ext_declarationname -> cxtype =
    "clang_ext_DeclarationName_getCXXNameType_wrapper"
external ext_declaration_name_get_as_identifier :
  clang_ext_declarationname -> string =
    "clang_ext_DeclarationName_getAsIdentifier_wrapper"
external ext_declaration_name_get_cxxdeduction_guide_template :
  clang_ext_declarationname -> cxcursor =
    "clang_ext_DeclarationName_getCXXDeductionGuideTemplate_wrapper"
external ext_declaration_name_get_cxxliteral_identifier :
  clang_ext_declarationname -> string =
    "clang_ext_DeclarationName_getCXXLiteralIdentifier_wrapper"
external ext_decl_get_name :
  cxcursor -> clang_ext_declarationname = "clang_ext_Decl_getName_wrapper"
external ext_using_directive_decl_get_nominated_namespace :
  cxcursor -> cxcursor =
    "clang_ext_UsingDirectiveDecl_getNominatedNamespace_wrapper"
type clang_ext_nestednamespecifierkind =
  | InvalidNestedNameSpecifier 
  | Identifier 
  | Namespace 
  | NamespaceAlias 
  | TypeSpec 
  | TypeSpecWithTemplate 
  | Global 
  | Super [@@deriving refl]
type clang_ext_nestednamespecifier
external ext_nested_name_specifier_get_kind :
  clang_ext_nestednamespecifier -> clang_ext_nestednamespecifierkind =
    "clang_ext_NestedNameSpecifier_getKind_wrapper"
external ext_nested_name_specifier_get_prefix :
  clang_ext_nestednamespecifier -> clang_ext_nestednamespecifier =
    "clang_ext_NestedNameSpecifier_getPrefix_wrapper"
external ext_nested_name_specifier_get_as_identifier :
  clang_ext_nestednamespecifier -> string =
    "clang_ext_NestedNameSpecifier_getAsIdentifier_wrapper"
external ext_nested_name_specifier_get_as_namespace :
  clang_ext_nestednamespecifier -> cxcursor =
    "clang_ext_NestedNameSpecifier_getAsNamespace_wrapper"
external ext_nested_name_specifier_get_as_type :
  clang_ext_nestednamespecifier -> cxtype =
    "clang_ext_NestedNameSpecifier_getAsType_wrapper"
type clang_ext_nestednamespecifierloc
external ext_nested_name_specifier_loc_get_nested_name_specifier :
  clang_ext_nestednamespecifierloc -> clang_ext_nestednamespecifier =
    "clang_ext_NestedNameSpecifierLoc_getNestedNameSpecifier_wrapper"
external ext_nested_name_specifier_loc_get_prefix :
  clang_ext_nestednamespecifierloc -> clang_ext_nestednamespecifierloc =
    "clang_ext_NestedNameSpecifierLoc_getPrefix_wrapper"
external ext_nested_name_specifier_loc_get_as_type_loc :
  clang_ext_nestednamespecifierloc -> clang_ext_typeloc =
    "clang_ext_NestedNameSpecifierLoc_getAsTypeLoc_wrapper"
external ext_decl_get_nested_name_specifier_loc :
  cxcursor -> clang_ext_nestednamespecifierloc =
    "clang_ext_Decl_getNestedNameSpecifierLoc_wrapper"
external ext_type_loc_get_qualifier_loc :
  clang_ext_typeloc -> clang_ext_nestednamespecifierloc =
    "clang_ext_TypeLoc_getQualifierLoc_wrapper"
external ext_type_get_qualifier :
  cxtype -> clang_ext_nestednamespecifier =
    "clang_ext_Type_getQualifier_wrapper"
external ext_tag_decl_is_complete_definition :
  cxcursor -> bool = "clang_ext_TagDecl_isCompleteDefinition_wrapper"
external ext_cxxpseudo_destructor_expr_get_destroyed_type_loc :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_CXXPseudoDestructorExpr_getDestroyedTypeLoc_wrapper"
external ext_cursor_get_num_template_args :
  cxcursor -> int = "clang_ext_Cursor_getNumTemplateArgs_wrapper"
external ext_cursor_get_template_arg :
  cxcursor -> int -> clang_ext_templateargument =
    "clang_ext_Cursor_getTemplateArg_wrapper"
type clang_ext_templateparameterlist
external ext_template_parameter_list_size :
  clang_ext_templateparameterlist -> int =
    "clang_ext_TemplateParameterList_size_wrapper"
external ext_template_parameter_list_get_param :
  clang_ext_templateparameterlist -> int -> cxcursor =
    "clang_ext_TemplateParameterList_getParam_wrapper"
external ext_template_parameter_list_get_requires_clause :
  clang_ext_templateparameterlist -> cxcursor =
    "clang_ext_TemplateParameterList_getRequiresClause_wrapper"
external ext_template_decl_get_template_parameters :
  cxcursor -> clang_ext_templateparameterlist =
    "clang_ext_TemplateDecl_getTemplateParameters_wrapper"
external ext_template_decl_get_parameter_count :
  cxcursor -> int = "clang_ext_TemplateDecl_getParameterCount_wrapper"
external ext_template_decl_get_parameter :
  cxcursor -> int -> cxcursor = "clang_ext_TemplateDecl_getParameter_wrapper"
external ext_subst_non_type_template_parm_expr_get_replacement :
  cxcursor -> cxcursor =
    "clang_ext_SubstNonTypeTemplateParmExpr_getReplacement_wrapper"
external ext_attributed_stmt_get_attribute_count :
  cxcursor -> int = "clang_ext_AttributedStmt_GetAttributeCount_wrapper"
external ext_attributed_stmt_get_attribute_kind :
  cxcursor -> int -> clang_ext_attrkind =
    "clang_ext_AttributedStmt_GetAttributeKind_wrapper"
external ext_attributed_stmt_get_attrs :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_AttributedStmt_getAttrs_wrapper"
external ext_decomposition_decl_get_bindings_count :
  cxcursor -> int = "clang_ext_DecompositionDecl_GetBindingsCount_wrapper"
external ext_decomposition_decl_get_bindings :
  cxcursor -> int -> cxcursor =
    "clang_ext_DecompositionDecl_GetBindings_wrapper"
external ext_attr_get_kind :
  cxcursor -> clang_ext_attrkind = "clang_ext_Attr_GetKind_wrapper"
type clang_ext_exceptionspecificationtype =
  | NoExceptionSpecification 
  | DynamicNone 
  | Dynamic 
  | MSAny 
  | NoThrow 
  | BasicNoexcept 
  | DependentNoexcept 
  | NoexceptFalse 
  | NoexceptTrue 
  | Unevaluated 
  | Uninstantiated 
  | Unparsed [@@deriving refl]
external ext_function_proto_type_get_exception_spec_type :
  cxtype -> clang_ext_exceptionspecificationtype =
    "clang_ext_FunctionProtoType_getExceptionSpecType_wrapper"
external ext_function_proto_type_get_num_exceptions :
  cxtype -> int = "clang_ext_FunctionProtoType_getNumExceptions_wrapper"
external ext_function_proto_type_get_exception_type :
  cxtype -> int -> cxtype =
    "clang_ext_FunctionProtoType_getExceptionType_wrapper"
external ext_function_proto_type_get_noexcept_expr :
  cxtype -> cxcursor = "clang_ext_FunctionProtoType_getNoexceptExpr_wrapper"
external ext_asm_stmt_get_asm_string :
  cxcursor -> string = "clang_ext_AsmStmt_GetAsmString_wrapper"
external ext_asm_stmt_get_num_outputs :
  cxcursor -> int = "clang_ext_AsmStmt_getNumOutputs_wrapper"
external ext_asm_stmt_get_output_constraint :
  cxcursor -> int -> string = "clang_ext_AsmStmt_getOutputConstraint_wrapper"
external ext_asm_stmt_get_output_expr :
  cxcursor -> int -> cxcursor = "clang_ext_AsmStmt_getOutputExpr_wrapper"
external ext_asm_stmt_get_num_inputs :
  cxcursor -> int = "clang_ext_AsmStmt_getNumInputs_wrapper"
external ext_asm_stmt_get_input_constraint :
  cxcursor -> int -> string = "clang_ext_AsmStmt_getInputConstraint_wrapper"
external ext_asm_stmt_get_input_expr :
  cxcursor -> int -> cxcursor = "clang_ext_AsmStmt_getInputExpr_wrapper"
external ext_declarator_decl_get_type_loc :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_DeclaratorDecl_getTypeLoc_wrapper"
type clang_ext_typeloc_class =
  | Qualified 
  | Builtin 
  | Complex 
  | Pointer 
  | BlockPointer 
  | LValueReference 
  | RValueReference 
  | MemberPointer 
  | ConstantArray 
  | IncompleteArray 
  | VariableArray 
  | DependentSizedArray 
  | DependentSizedExtVector 
  | Vector 
  | ExtVector 
  | FunctionProto 
  | FunctionNoProto 
  | UnresolvedUsing 
  | Paren 
  | Typedef 
  | Adjusted 
  | Decayed 
  | TypeOfExpr 
  | TypeOf 
  | Decltype 
  | UnaryTransform 
  | Record 
  | Enum 
  | Elaborated 
  | Attributed 
  | TemplateTypeParm 
  | SubstTemplateTypeParm 
  | SubstTemplateTypeParmPack 
  | TemplateSpecialization 
  | Auto 
  | InjectedClassName 
  | DependentName 
  | DependentTemplateSpecialization 
  | PackExpansion 
  | ObjCObject 
  | ObjCInterface 
  | ObjCObjectPointer 
  | Atomic 
  | InvalidTypeLoc [@@deriving refl]
external ext_type_loc_get_class :
  clang_ext_typeloc -> clang_ext_typeloc_class =
    "clang_ext_TypeLoc_getClass_wrapper"
external ext_type_loc_get_type :
  clang_ext_typeloc -> cxtype = "clang_ext_TypeLoc_getType_wrapper"
external ext_array_type_loc_get_size_expr :
  clang_ext_typeloc -> cxcursor =
    "clang_ext_ArrayTypeLoc_getSizeExpr_wrapper"
external ext_array_type_loc_get_element_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_ArrayTypeLoc_getElementLoc_wrapper"
external ext_paren_type_loc_get_inner_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_ParenTypeLoc_getInnerLoc_wrapper"
external ext_pointer_like_type_loc_get_pointee_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_PointerLikeTypeLoc_getPointeeLoc_wrapper"
external ext_member_pointer_type_loc_get_class_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_MemberPointerTypeLoc_getClassLoc_wrapper"
external ext_qualified_type_loc_get_unqualified_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_QualifiedTypeLoc_getUnqualifiedLoc_wrapper"
external ext_function_type_loc_get_return_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_FunctionTypeLoc_getReturnLoc_wrapper"
external ext_function_type_loc_get_num_params :
  clang_ext_typeloc -> int = "clang_ext_FunctionTypeLoc_getNumParams_wrapper"
external ext_function_type_loc_get_param :
  clang_ext_typeloc -> int -> cxcursor =
    "clang_ext_FunctionTypeLoc_getParam_wrapper"
external ext_init_list_expr_get_syntactic_form :
  cxcursor -> cxcursor = "clang_ext_InitListExpr_getSyntacticForm_wrapper"
external ext_init_list_expr_get_semantic_form :
  cxcursor -> cxcursor = "clang_ext_InitListExpr_getSemanticForm_wrapper"
external ext_init_list_expr_get_num_inits :
  cxcursor -> int = "clang_ext_InitListExpr_getNumInits_wrapper"
external ext_init_list_expr_get_init :
  cxcursor -> int -> cxcursor = "clang_ext_InitListExpr_getInit_wrapper"
external ext_designated_init_expr_size :
  cxcursor -> int = "clang_ext_DesignatedInitExpr_size_wrapper"
type clang_ext_designatedinitexpr_designatorkind =
  | FieldDesignator 
  | ArrayDesignator 
  | ArrayRangeDesignator [@@deriving refl]
external ext_designated_init_expr_get_kind :
  cxcursor -> int -> clang_ext_designatedinitexpr_designatorkind =
    "clang_ext_DesignatedInitExpr_getKind_wrapper"
external ext_designated_init_expr_get_field :
  cxcursor -> int -> cxcursor =
    "clang_ext_DesignatedInitExpr_getField_wrapper"
external ext_designated_init_expr_get_array_index :
  cxcursor -> int -> cxcursor =
    "clang_ext_DesignatedInitExpr_getArrayIndex_wrapper"
external ext_designated_init_expr_get_array_range_start :
  cxcursor -> int -> cxcursor =
    "clang_ext_DesignatedInitExpr_getArrayRangeStart_wrapper"
external ext_designated_init_expr_get_array_range_end :
  cxcursor -> int -> cxcursor =
    "clang_ext_DesignatedInitExpr_getArrayRangeEnd_wrapper"
external ext_designated_init_expr_get_init :
  cxcursor -> cxcursor = "clang_ext_DesignatedInitExpr_getInit_wrapper"
external ext_concept_decl_get_constraint_expr :
  cxcursor -> cxcursor = "clang_ext_ConceptDecl_getConstraintExpr_wrapper"
type clang_ext_requirementkind =
  | Type 
  | Simple 
  | Compound 
  | Nested [@@deriving refl]
type clang_ext_requirement
external ext_requirement_get_kind :
  clang_ext_requirement -> clang_ext_requirementkind =
    "clang_ext_Requirement_getKind_wrapper"
external ext_type_requirement_get_type :
  clang_ext_requirement -> clang_ext_typeloc =
    "clang_ext_TypeRequirement_getType_wrapper"
external ext_expr_requirement_get_expr :
  clang_ext_requirement -> cxcursor =
    "clang_ext_ExprRequirement_getExpr_wrapper"
external
  ext_expr_requirement_return_type_get_type_constraint_template_parameter_list
  :
  clang_ext_requirement -> clang_ext_templateparameterlist =
    "clang_ext_ExprRequirement_ReturnType_getTypeConstraintTemplateParameterList_wrapper"
external ext_expr_requirement_return_type_get_type_constraint :
  clang_ext_requirement -> cxcursor =
    "clang_ext_ExprRequirement_ReturnType_getTypeConstraint_wrapper"
external ext_nested_requirement_get_constraint_expr :
  clang_ext_requirement -> cxcursor =
    "clang_ext_NestedRequirement_getConstraintExpr_wrapper"
external ext_requires_expr_get_local_parameter_count :
  cxcursor -> int = "clang_ext_RequiresExpr_getLocalParameterCount_wrapper"
external ext_requires_expr_get_local_parameter :
  cxcursor -> int -> cxcursor =
    "clang_ext_RequiresExpr_getLocalParameter_wrapper"
external ext_requires_expr_get_requirement_count :
  cxcursor -> int = "clang_ext_RequiresExpr_getRequirementCount_wrapper"
external ext_requires_expr_get_requirement :
  cxcursor -> int -> clang_ext_requirement =
    "clang_ext_RequiresExpr_getRequirement_wrapper"
external ext_decl_context_visit_decls :
  cxcursor -> (cxcursor -> cxcursor -> cxchildvisitresult) -> bool =
    "clang_ext_DeclContext_visitDecls_wrapper"
external ext_indirect_field_decl_visit_chain :
  cxcursor -> (cxcursor -> cxcursor -> cxchildvisitresult) -> bool =
    "clang_ext_IndirectFieldDecl_visitChain_wrapper"
external ext_tag_decl_get_tag_kind :
  cxcursor -> clang_ext_elaboratedtypekeyword =
    "clang_ext_TagDecl_getTagKind_wrapper"
external ext_decl_has_attrs :
  cxcursor -> bool = "clang_ext_Decl_hasAttrs_wrapper"
external ext_decl_get_attr_count :
  cxcursor -> int = "clang_ext_Decl_getAttrCount_wrapper"
external ext_decl_get_attr :
  cxcursor -> int -> cxcursor = "clang_ext_Decl_getAttr_wrapper"
external ext_cursor_kind_is_attr :
  cxcursorkind -> bool = "clang_ext_CursorKind_isAttr_wrapper"
external ext_function_decl_is_inline_specified :
  cxcursor -> bool = "clang_ext_FunctionDecl_isInlineSpecified_wrapper"
external ext_function_decl_is_inlined :
  cxcursor -> bool = "clang_ext_FunctionDecl_isInlined_wrapper"
external ext_cursor_get_type_loc :
  cxcursor -> clang_ext_typeloc = "clang_ext_Cursor_getTypeLoc_wrapper"
external ext_cxxfor_range_stmt_get_loop_variable :
  cxcursor -> cxcursor = "clang_ext_CXXForRangeStmt_getLoopVariable_wrapper"
external ext_cxxfor_range_stmt_get_range_init :
  cxcursor -> cxcursor = "clang_ext_CXXForRangeStmt_getRangeInit_wrapper"
external ext_cxxfor_range_stmt_get_body :
  cxcursor -> cxcursor = "clang_ext_CXXForRangeStmt_getBody_wrapper"
external ext_attributed_type_loc_get_modified_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_AttributedTypeLoc_getModifiedLoc_wrapper"
external ext_attributed_type_loc_get_attr :
  clang_ext_typeloc -> cxcursor =
    "clang_ext_AttributedTypeLoc_getAttr_wrapper"
external ext_attributed_type_get_modified_type :
  cxtype -> cxtype = "clang_ext_AttributedType_getModifiedType_wrapper"
external ext_attributed_type_get_attr_kind :
  cxtype -> clang_ext_attrkind =
    "clang_ext_AttributedType_getAttrKind_wrapper"
external ext_elaborated_type_loc_get_named_type_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_ElaboratedTypeLoc_getNamedTypeLoc_wrapper"
external ext_pack_expansion_type_loc_get_pattern_loc :
  clang_ext_typeloc -> clang_ext_typeloc =
    "clang_ext_PackExpansionTypeLoc_getPatternLoc_wrapper"
external ext_typedef_decl_get_underlying_type_loc :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_TypedefDecl_getUnderlyingTypeLoc_wrapper"
external ext_cxxmethod_decl_get_parent :
  cxcursor -> cxcursor = "clang_ext_CXXMethodDecl_getParent_wrapper"
external ext_injected_class_name_type_get_injected_specialization_type :
  cxtype -> cxtype =
    "clang_ext_InjectedClassNameType_getInjectedSpecializationType_wrapper"
external ext_type_get_unqualified_type :
  cxtype -> cxtype = "clang_ext_Type_getUnqualifiedType_wrapper"
external ext_type_is_sugared :
  cxtype -> bool = "clang_ext_Type_isSugared_wrapper"
external ext_type_desugar :
  cxtype -> cxtype = "clang_ext_Type_desugar_wrapper"
type cxvisitorresult =
  | Break 
  | Continue [@@deriving refl][@@ocaml.doc "\\@\\{"]
type clang_ext_cxxctorinitializer
external ext_cxxconstructor_decl_visit_initializers :
  cxcursor -> (clang_ext_cxxctorinitializer -> cxvisitorresult) -> bool =
    "clang_ext_CXXConstructorDecl_visitInitializers_wrapper"
external ext_cxxctor_initializer_is_base_initializer :
  clang_ext_cxxctorinitializer -> bool =
    "clang_ext_CXXCtorInitializer_isBaseInitializer_wrapper"
external ext_cxxctor_initializer_is_pack_expansion :
  clang_ext_cxxctorinitializer -> bool =
    "clang_ext_CXXCtorInitializer_isPackExpansion_wrapper"
external ext_cxxctor_initializer_is_member_initializer :
  clang_ext_cxxctorinitializer -> bool =
    "clang_ext_CXXCtorInitializer_isMemberInitializer_wrapper"
external ext_cxxctor_initializer_is_indirect_member_initializer :
  clang_ext_cxxctorinitializer -> bool =
    "clang_ext_CXXCtorInitializer_isIndirectMemberInitializer_wrapper"
external ext_cxxctor_initializer_is_delegating_initializer :
  clang_ext_cxxctorinitializer -> bool =
    "clang_ext_CXXCtorInitializer_isDelegatingInitializer_wrapper"
external ext_cxxctor_initializer_get_type_source_info :
  clang_ext_cxxctorinitializer -> clang_ext_typeloc =
    "clang_ext_CXXCtorInitializer_getTypeSourceInfo_wrapper"
external ext_cxxctor_initializer_get_member :
  clang_ext_cxxctorinitializer -> cxcursor =
    "clang_ext_CXXCtorInitializer_getMember_wrapper"
external ext_cxxctor_initializer_get_any_member :
  clang_ext_cxxctorinitializer -> cxcursor =
    "clang_ext_CXXCtorInitializer_getAnyMember_wrapper"
external ext_cxxctor_initializer_get_init :
  clang_ext_cxxctorinitializer -> cxcursor =
    "clang_ext_CXXCtorInitializer_getInit_wrapper"
type clang_ext_aarch64vectorpcs_spelling =
  | GNU_aarch64_vector_pcs 
  | CXX11_clang_aarch64_vector_pcs 
  | C2x_clang_aarch64_vector_pcs 
  | SpellingNotCalculated [@@deriving refl]
external ext_aarch64_vector_pcs_get_spelling :
  cxcursor -> clang_ext_aarch64vectorpcs_spelling =
    "clang_ext_AArch64VectorPcs_getSpelling_wrapper"
type clang_ext_amdgpuflatworkgroupsize_spelling =
  | GNU_amdgpu_flat_work_group_size 
  | CXX11_clang_amdgpu_flat_work_group_size 
  | SpellingNotCalculated [@@deriving refl]
external ext_amdgpuflat_work_group_size_get_spelling :
  cxcursor -> clang_ext_amdgpuflatworkgroupsize_spelling =
    "clang_ext_AMDGPUFlatWorkGroupSize_getSpelling_wrapper"
type clang_ext_amdgpunumsgpr_spelling =
  | GNU_amdgpu_num_sgpr 
  | CXX11_clang_amdgpu_num_sgpr 
  | SpellingNotCalculated [@@deriving refl]
external ext_amdgpunum_sgpr_get_spelling :
  cxcursor -> clang_ext_amdgpunumsgpr_spelling =
    "clang_ext_AMDGPUNumSGPR_getSpelling_wrapper"
type clang_ext_amdgpunumvgpr_spelling =
  | GNU_amdgpu_num_vgpr 
  | CXX11_clang_amdgpu_num_vgpr 
  | SpellingNotCalculated [@@deriving refl]
external ext_amdgpunum_vgpr_get_spelling :
  cxcursor -> clang_ext_amdgpunumvgpr_spelling =
    "clang_ext_AMDGPUNumVGPR_getSpelling_wrapper"
type clang_ext_amdgpuwavespereu_spelling =
  | GNU_amdgpu_waves_per_eu 
  | CXX11_clang_amdgpu_waves_per_eu 
  | SpellingNotCalculated [@@deriving refl]
external ext_amdgpuwaves_per_eu_get_spelling :
  cxcursor -> clang_ext_amdgpuwavespereu_spelling =
    "clang_ext_AMDGPUWavesPerEU_getSpelling_wrapper"
type clang_ext_arminterrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_arminterrupt_get_spelling :
  cxcursor -> clang_ext_arminterrupt_spelling =
    "clang_ext_ARMInterrupt_getSpelling_wrapper"
type clang_ext_avrinterrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_avrinterrupt_get_spelling :
  cxcursor -> clang_ext_avrinterrupt_spelling =
    "clang_ext_AVRInterrupt_getSpelling_wrapper"
type clang_ext_avrsignal_spelling =
  | GNU_signal 
  | CXX11_gnu_signal 
  | C2x_gnu_signal 
  | SpellingNotCalculated [@@deriving refl]
external ext_avrsignal_get_spelling :
  cxcursor -> clang_ext_avrsignal_spelling =
    "clang_ext_AVRSignal_getSpelling_wrapper"
type clang_ext_abitag_spelling =
  | GNU_abi_tag 
  | CXX11_gnu_abi_tag 
  | SpellingNotCalculated [@@deriving refl]
external ext_abi_tag_get_spelling :
  cxcursor -> clang_ext_abitag_spelling =
    "clang_ext_AbiTag_getSpelling_wrapper"
type clang_ext_acquirecapability_spelling =
  | GNU_acquire_capability 
  | CXX11_clang_acquire_capability 
  | GNU_acquire_shared_capability 
  | CXX11_clang_acquire_shared_capability 
  | GNU_exclusive_lock_function 
  | GNU_shared_lock_function 
  | SpellingNotCalculated [@@deriving refl]
external ext_acquire_capability_get_spelling :
  cxcursor -> clang_ext_acquirecapability_spelling =
    "clang_ext_AcquireCapability_getSpelling_wrapper"
type clang_ext_acquirehandle_spelling =
  | GNU_acquire_handle 
  | CXX11_clang_acquire_handle 
  | C2x_clang_acquire_handle 
  | SpellingNotCalculated [@@deriving refl]
external ext_acquire_handle_get_spelling :
  cxcursor -> clang_ext_acquirehandle_spelling =
    "clang_ext_AcquireHandle_getSpelling_wrapper"
type clang_ext_addressspace_spelling =
  | GNU_address_space 
  | CXX11_clang_address_space 
  | C2x_clang_address_space 
  | SpellingNotCalculated [@@deriving refl]
external ext_address_space_get_spelling :
  cxcursor -> clang_ext_addressspace_spelling =
    "clang_ext_AddressSpace_getSpelling_wrapper"
type clang_ext_alias_spelling =
  | GNU_alias 
  | CXX11_gnu_alias 
  | C2x_gnu_alias 
  | SpellingNotCalculated [@@deriving refl]
external ext_alias_get_spelling :
  cxcursor -> clang_ext_alias_spelling =
    "clang_ext_Alias_getSpelling_wrapper"
type clang_ext_aligned_spelling =
  | GNU_aligned 
  | CXX11_gnu_aligned 
  | C2x_gnu_aligned 
  | Declspec_align 
  | Keyword_alignas 
  | Keyword_Alignas 
  | SpellingNotCalculated [@@deriving refl]
external ext_aligned_get_spelling :
  cxcursor -> clang_ext_aligned_spelling =
    "clang_ext_Aligned_getSpelling_wrapper"
type clang_ext_allocalign_spelling =
  | GNU_alloc_align 
  | CXX11_gnu_alloc_align 
  | C2x_gnu_alloc_align 
  | SpellingNotCalculated [@@deriving refl]
external ext_alloc_align_get_spelling :
  cxcursor -> clang_ext_allocalign_spelling =
    "clang_ext_AllocAlign_getSpelling_wrapper"
type clang_ext_allocsize_spelling =
  | GNU_alloc_size 
  | CXX11_gnu_alloc_size 
  | C2x_gnu_alloc_size 
  | SpellingNotCalculated [@@deriving refl]
external ext_alloc_size_get_spelling :
  cxcursor -> clang_ext_allocsize_spelling =
    "clang_ext_AllocSize_getSpelling_wrapper"
type clang_ext_alwaysdestroy_spelling =
  | GNU_always_destroy 
  | CXX11_clang_always_destroy 
  | SpellingNotCalculated [@@deriving refl]
external ext_always_destroy_get_spelling :
  cxcursor -> clang_ext_alwaysdestroy_spelling =
    "clang_ext_AlwaysDestroy_getSpelling_wrapper"
type clang_ext_alwaysinline_spelling =
  | GNU_always_inline 
  | CXX11_gnu_always_inline 
  | C2x_gnu_always_inline 
  | Keyword_forceinline 
  | SpellingNotCalculated [@@deriving refl]
external ext_always_inline_get_spelling :
  cxcursor -> clang_ext_alwaysinline_spelling =
    "clang_ext_AlwaysInline_getSpelling_wrapper"
type clang_ext_annotate_spelling =
  | GNU_annotate 
  | CXX11_clang_annotate 
  | C2x_clang_annotate 
  | SpellingNotCalculated [@@deriving refl]
external ext_annotate_get_spelling :
  cxcursor -> clang_ext_annotate_spelling =
    "clang_ext_Annotate_getSpelling_wrapper"
type clang_ext_anyx86interrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_any_x86_interrupt_get_spelling :
  cxcursor -> clang_ext_anyx86interrupt_spelling =
    "clang_ext_AnyX86Interrupt_getSpelling_wrapper"
type clang_ext_anyx86nocallersavedregisters_spelling =
  | GNU_no_caller_saved_registers 
  | CXX11_gnu_no_caller_saved_registers 
  | C2x_gnu_no_caller_saved_registers 
  | SpellingNotCalculated [@@deriving refl]
external ext_any_x86_no_caller_saved_registers_get_spelling :
  cxcursor -> clang_ext_anyx86nocallersavedregisters_spelling =
    "clang_ext_AnyX86NoCallerSavedRegisters_getSpelling_wrapper"
type clang_ext_anyx86nocfcheck_spelling =
  | GNU_nocf_check 
  | CXX11_gnu_nocf_check 
  | C2x_gnu_nocf_check 
  | SpellingNotCalculated [@@deriving refl]
external ext_any_x86_no_cf_check_get_spelling :
  cxcursor -> clang_ext_anyx86nocfcheck_spelling =
    "clang_ext_AnyX86NoCfCheck_getSpelling_wrapper"
type clang_ext_arcweakrefunavailable_spelling =
  | GNU_objc_arc_weak_reference_unavailable 
  | CXX11_clang_objc_arc_weak_reference_unavailable 
  | C2x_clang_objc_arc_weak_reference_unavailable 
  | SpellingNotCalculated [@@deriving refl]
external ext_arc_weakref_unavailable_get_spelling :
  cxcursor -> clang_ext_arcweakrefunavailable_spelling =
    "clang_ext_ArcWeakrefUnavailable_getSpelling_wrapper"
type clang_ext_argumentwithtypetag_spelling =
  | GNU_argument_with_type_tag 
  | CXX11_clang_argument_with_type_tag 
  | C2x_clang_argument_with_type_tag 
  | GNU_pointer_with_type_tag 
  | CXX11_clang_pointer_with_type_tag 
  | C2x_clang_pointer_with_type_tag 
  | SpellingNotCalculated [@@deriving refl]
external ext_argument_with_type_tag_get_spelling :
  cxcursor -> clang_ext_argumentwithtypetag_spelling =
    "clang_ext_ArgumentWithTypeTag_getSpelling_wrapper"
type clang_ext_armbuiltinalias_spelling =
  | GNU_clang_arm_builtin_alias 
  | CXX11_clang_clang_arm_builtin_alias 
  | C2x_clang_clang_arm_builtin_alias 
  | SpellingNotCalculated [@@deriving refl]
external ext_arm_builtin_alias_get_spelling :
  cxcursor -> clang_ext_armbuiltinalias_spelling =
    "clang_ext_ArmBuiltinAlias_getSpelling_wrapper"
type clang_ext_armmvestrictpolymorphism_spelling =
  | GNU_clang_arm_mve_strict_polymorphism 
  | CXX11_clang_clang_arm_mve_strict_polymorphism 
  | C2x_clang_clang_arm_mve_strict_polymorphism 
  | SpellingNotCalculated [@@deriving refl]
external ext_arm_mve_strict_polymorphism_get_spelling :
  cxcursor -> clang_ext_armmvestrictpolymorphism_spelling =
    "clang_ext_ArmMveStrictPolymorphism_getSpelling_wrapper"
type clang_ext_artificial_spelling =
  | GNU_artificial 
  | CXX11_gnu_artificial 
  | C2x_gnu_artificial 
  | SpellingNotCalculated [@@deriving refl]
external ext_artificial_get_spelling :
  cxcursor -> clang_ext_artificial_spelling =
    "clang_ext_Artificial_getSpelling_wrapper"
type clang_ext_asmlabel_spelling =
  | Keyword_asm 
  | SpellingNotCalculated [@@deriving refl]
external ext_asm_label_get_spelling :
  cxcursor -> clang_ext_asmlabel_spelling =
    "clang_ext_AsmLabel_getSpelling_wrapper"
type clang_ext_assertcapability_spelling =
  | GNU_assert_capability 
  | CXX11_clang_assert_capability 
  | GNU_assert_shared_capability 
  | CXX11_clang_assert_shared_capability 
  | SpellingNotCalculated [@@deriving refl]
external ext_assert_capability_get_spelling :
  cxcursor -> clang_ext_assertcapability_spelling =
    "clang_ext_AssertCapability_getSpelling_wrapper"
type clang_ext_assumealigned_spelling =
  | GNU_assume_aligned 
  | CXX11_gnu_assume_aligned 
  | C2x_gnu_assume_aligned 
  | SpellingNotCalculated [@@deriving refl]
external ext_assume_aligned_get_spelling :
  cxcursor -> clang_ext_assumealigned_spelling =
    "clang_ext_AssumeAligned_getSpelling_wrapper"
type clang_ext_assumption_spelling =
  | GNU_assume 
  | CXX11_clang_assume 
  | C2x_clang_assume 
  | SpellingNotCalculated [@@deriving refl]
external ext_assumption_get_spelling :
  cxcursor -> clang_ext_assumption_spelling =
    "clang_ext_Assumption_getSpelling_wrapper"
type clang_ext_availability_spelling =
  | GNU_availability 
  | CXX11_clang_availability 
  | C2x_clang_availability 
  | SpellingNotCalculated [@@deriving refl]
external ext_availability_get_spelling :
  cxcursor -> clang_ext_availability_spelling =
    "clang_ext_Availability_getSpelling_wrapper"
type clang_ext_bpfpreserveaccessindex_spelling =
  | GNU_preserve_access_index 
  | CXX11_clang_preserve_access_index 
  | C2x_clang_preserve_access_index 
  | SpellingNotCalculated [@@deriving refl]
external ext_bpfpreserve_access_index_get_spelling :
  cxcursor -> clang_ext_bpfpreserveaccessindex_spelling =
    "clang_ext_BPFPreserveAccessIndex_getSpelling_wrapper"
type clang_ext_btfdecltag_spelling =
  | GNU_btf_decl_tag 
  | CXX11_clang_btf_decl_tag 
  | C2x_clang_btf_decl_tag 
  | SpellingNotCalculated [@@deriving refl]
external ext_btfdecl_tag_get_spelling :
  cxcursor -> clang_ext_btfdecltag_spelling =
    "clang_ext_BTFDeclTag_getSpelling_wrapper"
type clang_ext_btftypetag_spelling =
  | GNU_btf_type_tag 
  | CXX11_clang_btf_type_tag 
  | C2x_clang_btf_type_tag 
  | SpellingNotCalculated [@@deriving refl]
external ext_btftype_tag_get_spelling :
  cxcursor -> clang_ext_btftypetag_spelling =
    "clang_ext_BTFTypeTag_getSpelling_wrapper"
type clang_ext_blocks_spelling =
  | GNU_blocks 
  | CXX11_clang_blocks 
  | C2x_clang_blocks 
  | SpellingNotCalculated [@@deriving refl]
external ext_blocks_get_spelling :
  cxcursor -> clang_ext_blocks_spelling =
    "clang_ext_Blocks_getSpelling_wrapper"
type clang_ext_builtinalias_spelling =
  | CXX11_clang_builtin_alias 
  | C2x_clang_builtin_alias 
  | GNU_clang_builtin_alias 
  | SpellingNotCalculated [@@deriving refl]
external ext_builtin_alias_get_spelling :
  cxcursor -> clang_ext_builtinalias_spelling =
    "clang_ext_BuiltinAlias_getSpelling_wrapper"
type clang_ext_cdecl_spelling =
  | GNU_cdecl 
  | CXX11_gnu_cdecl 
  | C2x_gnu_cdecl 
  | Keyword_cdecl 
  | SpellingNotCalculated [@@deriving refl]
external ext_cdecl_get_spelling :
  cxcursor -> clang_ext_cdecl_spelling =
    "clang_ext_CDecl_getSpelling_wrapper"
type clang_ext_cfauditedtransfer_spelling =
  | GNU_cf_audited_transfer 
  | CXX11_clang_cf_audited_transfer 
  | C2x_clang_cf_audited_transfer 
  | SpellingNotCalculated [@@deriving refl]
external ext_cfaudited_transfer_get_spelling :
  cxcursor -> clang_ext_cfauditedtransfer_spelling =
    "clang_ext_CFAuditedTransfer_getSpelling_wrapper"
type clang_ext_cfconsumed_spelling =
  | GNU_cf_consumed 
  | CXX11_clang_cf_consumed 
  | C2x_clang_cf_consumed 
  | SpellingNotCalculated [@@deriving refl]
external ext_cfconsumed_get_spelling :
  cxcursor -> clang_ext_cfconsumed_spelling =
    "clang_ext_CFConsumed_getSpelling_wrapper"
type clang_ext_cficanonicaljumptable_spelling =
  | GNU_cfi_canonical_jump_table 
  | CXX11_clang_cfi_canonical_jump_table 
  | C2x_clang_cfi_canonical_jump_table 
  | SpellingNotCalculated [@@deriving refl]
external ext_cficanonical_jump_table_get_spelling :
  cxcursor -> clang_ext_cficanonicaljumptable_spelling =
    "clang_ext_CFICanonicalJumpTable_getSpelling_wrapper"
type clang_ext_cfreturnsnotretained_spelling =
  | GNU_cf_returns_not_retained 
  | CXX11_clang_cf_returns_not_retained 
  | C2x_clang_cf_returns_not_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_cfreturns_not_retained_get_spelling :
  cxcursor -> clang_ext_cfreturnsnotretained_spelling =
    "clang_ext_CFReturnsNotRetained_getSpelling_wrapper"
type clang_ext_cfreturnsretained_spelling =
  | GNU_cf_returns_retained 
  | CXX11_clang_cf_returns_retained 
  | C2x_clang_cf_returns_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_cfreturns_retained_get_spelling :
  cxcursor -> clang_ext_cfreturnsretained_spelling =
    "clang_ext_CFReturnsRetained_getSpelling_wrapper"
type clang_ext_cfunknowntransfer_spelling =
  | GNU_cf_unknown_transfer 
  | CXX11_clang_cf_unknown_transfer 
  | C2x_clang_cf_unknown_transfer 
  | SpellingNotCalculated [@@deriving refl]
external ext_cfunknown_transfer_get_spelling :
  cxcursor -> clang_ext_cfunknowntransfer_spelling =
    "clang_ext_CFUnknownTransfer_getSpelling_wrapper"
type clang_ext_cpudispatch_spelling =
  | GNU_cpu_dispatch 
  | CXX11_clang_cpu_dispatch 
  | C2x_clang_cpu_dispatch 
  | Declspec_cpu_dispatch 
  | SpellingNotCalculated [@@deriving refl]
external ext_cpudispatch_get_spelling :
  cxcursor -> clang_ext_cpudispatch_spelling =
    "clang_ext_CPUDispatch_getSpelling_wrapper"
type clang_ext_cpuspecific_spelling =
  | GNU_cpu_specific 
  | CXX11_clang_cpu_specific 
  | C2x_clang_cpu_specific 
  | Declspec_cpu_specific 
  | SpellingNotCalculated [@@deriving refl]
external ext_cpuspecific_get_spelling :
  cxcursor -> clang_ext_cpuspecific_spelling =
    "clang_ext_CPUSpecific_getSpelling_wrapper"
type clang_ext_cudaconstant_spelling =
  | GNU_constant 
  | Declspec_constant 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudaconstant_get_spelling :
  cxcursor -> clang_ext_cudaconstant_spelling =
    "clang_ext_CUDAConstant_getSpelling_wrapper"
type clang_ext_cudadevice_spelling =
  | GNU_device 
  | Declspec_device 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudadevice_get_spelling :
  cxcursor -> clang_ext_cudadevice_spelling =
    "clang_ext_CUDADevice_getSpelling_wrapper"
type clang_ext_cudadevicebuiltinsurfacetype_spelling =
  | GNU_device_builtin_surface_type 
  | Declspec_device_builtin_surface_type 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudadevice_builtin_surface_type_get_spelling :
  cxcursor -> clang_ext_cudadevicebuiltinsurfacetype_spelling =
    "clang_ext_CUDADeviceBuiltinSurfaceType_getSpelling_wrapper"
type clang_ext_cudadevicebuiltintexturetype_spelling =
  | GNU_device_builtin_texture_type 
  | Declspec_device_builtin_texture_type 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudadevice_builtin_texture_type_get_spelling :
  cxcursor -> clang_ext_cudadevicebuiltintexturetype_spelling =
    "clang_ext_CUDADeviceBuiltinTextureType_getSpelling_wrapper"
type clang_ext_cudaglobal_spelling =
  | GNU_global 
  | Declspec_global 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudaglobal_get_spelling :
  cxcursor -> clang_ext_cudaglobal_spelling =
    "clang_ext_CUDAGlobal_getSpelling_wrapper"
type clang_ext_cudahost_spelling =
  | GNU_host 
  | Declspec_host 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudahost_get_spelling :
  cxcursor -> clang_ext_cudahost_spelling =
    "clang_ext_CUDAHost_getSpelling_wrapper"
type clang_ext_cudalaunchbounds_spelling =
  | GNU_launch_bounds 
  | Declspec_launch_bounds 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudalaunch_bounds_get_spelling :
  cxcursor -> clang_ext_cudalaunchbounds_spelling =
    "clang_ext_CUDALaunchBounds_getSpelling_wrapper"
type clang_ext_cudashared_spelling =
  | GNU_shared 
  | Declspec_shared 
  | SpellingNotCalculated [@@deriving refl]
external ext_cudashared_get_spelling :
  cxcursor -> clang_ext_cudashared_spelling =
    "clang_ext_CUDAShared_getSpelling_wrapper"
type clang_ext_callablewhen_spelling =
  | GNU_callable_when 
  | CXX11_clang_callable_when 
  | SpellingNotCalculated [@@deriving refl]
external ext_callable_when_get_spelling :
  cxcursor -> clang_ext_callablewhen_spelling =
    "clang_ext_CallableWhen_getSpelling_wrapper"
type clang_ext_callback_spelling =
  | GNU_callback 
  | CXX11_clang_callback 
  | C2x_clang_callback 
  | SpellingNotCalculated [@@deriving refl]
external ext_callback_get_spelling :
  cxcursor -> clang_ext_callback_spelling =
    "clang_ext_Callback_getSpelling_wrapper"
type clang_ext_calledonce_spelling =
  | GNU_called_once 
  | CXX11_clang_called_once 
  | C2x_clang_called_once 
  | SpellingNotCalculated [@@deriving refl]
external ext_called_once_get_spelling :
  cxcursor -> clang_ext_calledonce_spelling =
    "clang_ext_CalledOnce_getSpelling_wrapper"
type clang_ext_capability_spelling =
  | GNU_capability 
  | CXX11_clang_capability 
  | GNU_shared_capability 
  | CXX11_clang_shared_capability 
  | SpellingNotCalculated [@@deriving refl]
external ext_capability_get_spelling :
  cxcursor -> clang_ext_capability_spelling =
    "clang_ext_Capability_getSpelling_wrapper"
type clang_ext_carriesdependency_spelling =
  | GNU_carries_dependency 
  | CXX11_carries_dependency 
  | SpellingNotCalculated [@@deriving refl]
external ext_carries_dependency_get_spelling :
  cxcursor -> clang_ext_carriesdependency_spelling =
    "clang_ext_CarriesDependency_getSpelling_wrapper"
type clang_ext_cleanup_spelling =
  | GNU_cleanup 
  | CXX11_gnu_cleanup 
  | C2x_gnu_cleanup 
  | SpellingNotCalculated [@@deriving refl]
external ext_cleanup_get_spelling :
  cxcursor -> clang_ext_cleanup_spelling =
    "clang_ext_Cleanup_getSpelling_wrapper"
type clang_ext_cold_spelling =
  | GNU_cold 
  | CXX11_gnu_cold 
  | C2x_gnu_cold 
  | SpellingNotCalculated [@@deriving refl]
external ext_cold_get_spelling :
  cxcursor -> clang_ext_cold_spelling = "clang_ext_Cold_getSpelling_wrapper"
type clang_ext_common_spelling =
  | GNU_common 
  | CXX11_gnu_common 
  | C2x_gnu_common 
  | SpellingNotCalculated [@@deriving refl]
external ext_common_get_spelling :
  cxcursor -> clang_ext_common_spelling =
    "clang_ext_Common_getSpelling_wrapper"
type clang_ext_const_spelling =
  | GNU_const 
  | CXX11_gnu_const 
  | C2x_gnu_const 
  | SpellingNotCalculated [@@deriving refl]
external ext_const_get_spelling :
  cxcursor -> clang_ext_const_spelling =
    "clang_ext_Const_getSpelling_wrapper"
type clang_ext_constinit_spelling =
  | Keyword_constinit 
  | GNU_require_constant_initialization 
  | CXX11_clang_require_constant_initialization 
  | SpellingNotCalculated [@@deriving refl]
external ext_const_init_get_spelling :
  cxcursor -> clang_ext_constinit_spelling =
    "clang_ext_ConstInit_getSpelling_wrapper"
type clang_ext_constructor_spelling =
  | GNU_constructor 
  | CXX11_gnu_constructor 
  | C2x_gnu_constructor 
  | SpellingNotCalculated [@@deriving refl]
external ext_constructor_get_spelling :
  cxcursor -> clang_ext_constructor_spelling =
    "clang_ext_Constructor_getSpelling_wrapper"
type clang_ext_consumable_spelling =
  | GNU_consumable 
  | CXX11_clang_consumable 
  | SpellingNotCalculated [@@deriving refl]
external ext_consumable_get_spelling :
  cxcursor -> clang_ext_consumable_spelling =
    "clang_ext_Consumable_getSpelling_wrapper"
type clang_ext_consumableautocast_spelling =
  | GNU_consumable_auto_cast_state 
  | CXX11_clang_consumable_auto_cast_state 
  | SpellingNotCalculated [@@deriving refl]
external ext_consumable_auto_cast_get_spelling :
  cxcursor -> clang_ext_consumableautocast_spelling =
    "clang_ext_ConsumableAutoCast_getSpelling_wrapper"
type clang_ext_consumablesetonread_spelling =
  | GNU_consumable_set_state_on_read 
  | CXX11_clang_consumable_set_state_on_read 
  | SpellingNotCalculated [@@deriving refl]
external ext_consumable_set_on_read_get_spelling :
  cxcursor -> clang_ext_consumablesetonread_spelling =
    "clang_ext_ConsumableSetOnRead_getSpelling_wrapper"
type clang_ext_convergent_spelling =
  | GNU_convergent 
  | CXX11_clang_convergent 
  | C2x_clang_convergent 
  | SpellingNotCalculated [@@deriving refl]
external ext_convergent_get_spelling :
  cxcursor -> clang_ext_convergent_spelling =
    "clang_ext_Convergent_getSpelling_wrapper"
type clang_ext_dllexport_spelling =
  | Declspec_dllexport 
  | GNU_dllexport 
  | CXX11_gnu_dllexport 
  | C2x_gnu_dllexport 
  | SpellingNotCalculated [@@deriving refl]
external ext_dllexport_get_spelling :
  cxcursor -> clang_ext_dllexport_spelling =
    "clang_ext_DLLExport_getSpelling_wrapper"
type clang_ext_dllimport_spelling =
  | Declspec_dllimport 
  | GNU_dllimport 
  | CXX11_gnu_dllimport 
  | C2x_gnu_dllimport 
  | SpellingNotCalculated [@@deriving refl]
external ext_dllimport_get_spelling :
  cxcursor -> clang_ext_dllimport_spelling =
    "clang_ext_DLLImport_getSpelling_wrapper"
type clang_ext_deprecated_spelling =
  | GNU_deprecated 
  | CXX11_gnu_deprecated 
  | C2x_gnu_deprecated 
  | Declspec_deprecated 
  | CXX11_deprecated 
  | C2x_deprecated 
  | SpellingNotCalculated [@@deriving refl]
external ext_deprecated_get_spelling :
  cxcursor -> clang_ext_deprecated_spelling =
    "clang_ext_Deprecated_getSpelling_wrapper"
type clang_ext_destructor_spelling =
  | GNU_destructor 
  | CXX11_gnu_destructor 
  | C2x_gnu_destructor 
  | SpellingNotCalculated [@@deriving refl]
external ext_destructor_get_spelling :
  cxcursor -> clang_ext_destructor_spelling =
    "clang_ext_Destructor_getSpelling_wrapper"
type clang_ext_diagnoseasbuiltin_spelling =
  | GNU_diagnose_as_builtin 
  | CXX11_clang_diagnose_as_builtin 
  | C2x_clang_diagnose_as_builtin 
  | SpellingNotCalculated [@@deriving refl]
external ext_diagnose_as_builtin_get_spelling :
  cxcursor -> clang_ext_diagnoseasbuiltin_spelling =
    "clang_ext_DiagnoseAsBuiltin_getSpelling_wrapper"
type clang_ext_disablesanitizerinstrumentation_spelling =
  | GNU_disable_sanitizer_instrumentation 
  | CXX11_clang_disable_sanitizer_instrumentation 
  | C2x_clang_disable_sanitizer_instrumentation 
  | SpellingNotCalculated [@@deriving refl]
external ext_disable_sanitizer_instrumentation_get_spelling :
  cxcursor -> clang_ext_disablesanitizerinstrumentation_spelling =
    "clang_ext_DisableSanitizerInstrumentation_getSpelling_wrapper"
type clang_ext_disabletailcalls_spelling =
  | GNU_disable_tail_calls 
  | CXX11_clang_disable_tail_calls 
  | C2x_clang_disable_tail_calls 
  | SpellingNotCalculated [@@deriving refl]
external ext_disable_tail_calls_get_spelling :
  cxcursor -> clang_ext_disabletailcalls_spelling =
    "clang_ext_DisableTailCalls_getSpelling_wrapper"
type clang_ext_enforcetcb_spelling =
  | GNU_enforce_tcb 
  | CXX11_clang_enforce_tcb 
  | C2x_clang_enforce_tcb 
  | SpellingNotCalculated [@@deriving refl]
external ext_enforce_tcb_get_spelling :
  cxcursor -> clang_ext_enforcetcb_spelling =
    "clang_ext_EnforceTCB_getSpelling_wrapper"
type clang_ext_enforcetcbleaf_spelling =
  | GNU_enforce_tcb_leaf 
  | CXX11_clang_enforce_tcb_leaf 
  | C2x_clang_enforce_tcb_leaf 
  | SpellingNotCalculated [@@deriving refl]
external ext_enforce_tcbleaf_get_spelling :
  cxcursor -> clang_ext_enforcetcbleaf_spelling =
    "clang_ext_EnforceTCBLeaf_getSpelling_wrapper"
type clang_ext_enumextensibility_spelling =
  | GNU_enum_extensibility 
  | CXX11_clang_enum_extensibility 
  | C2x_clang_enum_extensibility 
  | SpellingNotCalculated [@@deriving refl]
external ext_enum_extensibility_get_spelling :
  cxcursor -> clang_ext_enumextensibility_spelling =
    "clang_ext_EnumExtensibility_getSpelling_wrapper"
type clang_ext_error_spelling =
  | GNU_error 
  | CXX11_gnu_error 
  | C2x_gnu_error 
  | GNU_warning 
  | CXX11_gnu_warning 
  | C2x_gnu_warning 
  | SpellingNotCalculated [@@deriving refl]
external ext_error_get_spelling :
  cxcursor -> clang_ext_error_spelling =
    "clang_ext_Error_getSpelling_wrapper"
type clang_ext_excludefromexplicitinstantiation_spelling =
  | GNU_exclude_from_explicit_instantiation 
  | CXX11_clang_exclude_from_explicit_instantiation 
  | C2x_clang_exclude_from_explicit_instantiation 
  | SpellingNotCalculated [@@deriving refl]
external ext_exclude_from_explicit_instantiation_get_spelling :
  cxcursor -> clang_ext_excludefromexplicitinstantiation_spelling =
    "clang_ext_ExcludeFromExplicitInstantiation_getSpelling_wrapper"
type clang_ext_externalsourcesymbol_spelling =
  | GNU_external_source_symbol 
  | CXX11_clang_external_source_symbol 
  | C2x_clang_external_source_symbol 
  | SpellingNotCalculated [@@deriving refl]
external ext_external_source_symbol_get_spelling :
  cxcursor -> clang_ext_externalsourcesymbol_spelling =
    "clang_ext_ExternalSourceSymbol_getSpelling_wrapper"
type clang_ext_fallthrough_spelling =
  | CXX11_fallthrough 
  | C2x_fallthrough 
  | CXX11_clang_fallthrough 
  | GNU_fallthrough 
  | CXX11_gnu_fallthrough 
  | C2x_gnu_fallthrough 
  | SpellingNotCalculated [@@deriving refl]
external ext_fall_through_get_spelling :
  cxcursor -> clang_ext_fallthrough_spelling =
    "clang_ext_FallThrough_getSpelling_wrapper"
type clang_ext_fastcall_spelling =
  | GNU_fastcall 
  | CXX11_gnu_fastcall 
  | C2x_gnu_fastcall 
  | Keyword_fastcall 
  | SpellingNotCalculated [@@deriving refl]
external ext_fast_call_get_spelling :
  cxcursor -> clang_ext_fastcall_spelling =
    "clang_ext_FastCall_getSpelling_wrapper"
type clang_ext_final_spelling =
  | Keyword_final 
  | Keyword_sealed 
  | SpellingNotCalculated [@@deriving refl]
external ext_final_get_spelling :
  cxcursor -> clang_ext_final_spelling =
    "clang_ext_Final_getSpelling_wrapper"
type clang_ext_flagenum_spelling =
  | GNU_flag_enum 
  | CXX11_clang_flag_enum 
  | C2x_clang_flag_enum 
  | SpellingNotCalculated [@@deriving refl]
external ext_flag_enum_get_spelling :
  cxcursor -> clang_ext_flagenum_spelling =
    "clang_ext_FlagEnum_getSpelling_wrapper"
type clang_ext_flatten_spelling =
  | GNU_flatten 
  | CXX11_gnu_flatten 
  | C2x_gnu_flatten 
  | SpellingNotCalculated [@@deriving refl]
external ext_flatten_get_spelling :
  cxcursor -> clang_ext_flatten_spelling =
    "clang_ext_Flatten_getSpelling_wrapper"
type clang_ext_format_spelling =
  | GNU_format 
  | CXX11_gnu_format 
  | C2x_gnu_format 
  | SpellingNotCalculated [@@deriving refl]
external ext_format_get_spelling :
  cxcursor -> clang_ext_format_spelling =
    "clang_ext_Format_getSpelling_wrapper"
type clang_ext_formatarg_spelling =
  | GNU_format_arg 
  | CXX11_gnu_format_arg 
  | C2x_gnu_format_arg 
  | SpellingNotCalculated [@@deriving refl]
external ext_format_arg_get_spelling :
  cxcursor -> clang_ext_formatarg_spelling =
    "clang_ext_FormatArg_getSpelling_wrapper"
type clang_ext_gnuinline_spelling =
  | GNU_gnu_inline 
  | CXX11_gnu_gnu_inline 
  | C2x_gnu_gnu_inline 
  | SpellingNotCalculated [@@deriving refl]
external ext_gnuinline_get_spelling :
  cxcursor -> clang_ext_gnuinline_spelling =
    "clang_ext_GNUInline_getSpelling_wrapper"
type clang_ext_guardedvar_spelling =
  | GNU_guarded_var 
  | CXX11_clang_guarded_var 
  | SpellingNotCalculated [@@deriving refl]
external ext_guarded_var_get_spelling :
  cxcursor -> clang_ext_guardedvar_spelling =
    "clang_ext_GuardedVar_getSpelling_wrapper"
type clang_ext_hipmanaged_spelling =
  | GNU_managed 
  | Declspec_managed 
  | SpellingNotCalculated [@@deriving refl]
external ext_hipmanaged_get_spelling :
  cxcursor -> clang_ext_hipmanaged_spelling =
    "clang_ext_HIPManaged_getSpelling_wrapper"
type clang_ext_hot_spelling =
  | GNU_hot 
  | CXX11_gnu_hot 
  | C2x_gnu_hot 
  | SpellingNotCalculated [@@deriving refl]
external ext_hot_get_spelling :
  cxcursor -> clang_ext_hot_spelling = "clang_ext_Hot_getSpelling_wrapper"
type clang_ext_ibaction_spelling =
  | GNU_ibaction 
  | CXX11_clang_ibaction 
  | C2x_clang_ibaction 
  | SpellingNotCalculated [@@deriving refl]
external ext_ibaction_get_spelling :
  cxcursor -> clang_ext_ibaction_spelling =
    "clang_ext_IBAction_getSpelling_wrapper"
type clang_ext_iboutlet_spelling =
  | GNU_iboutlet 
  | CXX11_clang_iboutlet 
  | C2x_clang_iboutlet 
  | SpellingNotCalculated [@@deriving refl]
external ext_iboutlet_get_spelling :
  cxcursor -> clang_ext_iboutlet_spelling =
    "clang_ext_IBOutlet_getSpelling_wrapper"
type clang_ext_iboutletcollection_spelling =
  | GNU_iboutletcollection 
  | CXX11_clang_iboutletcollection 
  | C2x_clang_iboutletcollection 
  | SpellingNotCalculated [@@deriving refl]
external ext_iboutlet_collection_get_spelling :
  cxcursor -> clang_ext_iboutletcollection_spelling =
    "clang_ext_IBOutletCollection_getSpelling_wrapper"
type clang_ext_ifunc_spelling =
  | GNU_ifunc 
  | CXX11_gnu_ifunc 
  | C2x_gnu_ifunc 
  | SpellingNotCalculated [@@deriving refl]
external ext_ifunc_get_spelling :
  cxcursor -> clang_ext_ifunc_spelling =
    "clang_ext_IFunc_getSpelling_wrapper"
type clang_ext_initpriority_spelling =
  | GNU_init_priority 
  | CXX11_gnu_init_priority 
  | SpellingNotCalculated [@@deriving refl]
external ext_init_priority_get_spelling :
  cxcursor -> clang_ext_initpriority_spelling =
    "clang_ext_InitPriority_getSpelling_wrapper"
type clang_ext_inteloclbicc_spelling =
  | GNU_intel_ocl_bicc 
  | CXX11_clang_intel_ocl_bicc 
  | SpellingNotCalculated [@@deriving refl]
external ext_intel_ocl_bicc_get_spelling :
  cxcursor -> clang_ext_inteloclbicc_spelling =
    "clang_ext_IntelOclBicc_getSpelling_wrapper"
type clang_ext_internallinkage_spelling =
  | GNU_internal_linkage 
  | CXX11_clang_internal_linkage 
  | C2x_clang_internal_linkage 
  | SpellingNotCalculated [@@deriving refl]
external ext_internal_linkage_get_spelling :
  cxcursor -> clang_ext_internallinkage_spelling =
    "clang_ext_InternalLinkage_getSpelling_wrapper"
type clang_ext_ltovisibilitypublic_spelling =
  | GNU_lto_visibility_public 
  | CXX11_clang_lto_visibility_public 
  | C2x_clang_lto_visibility_public 
  | SpellingNotCalculated [@@deriving refl]
external ext_ltovisibility_public_get_spelling :
  cxcursor -> clang_ext_ltovisibilitypublic_spelling =
    "clang_ext_LTOVisibilityPublic_getSpelling_wrapper"
type clang_ext_leaf_spelling =
  | GNU_leaf 
  | CXX11_gnu_leaf 
  | C2x_gnu_leaf 
  | SpellingNotCalculated [@@deriving refl]
external ext_leaf_get_spelling :
  cxcursor -> clang_ext_leaf_spelling = "clang_ext_Leaf_getSpelling_wrapper"
type clang_ext_lifetimebound_spelling =
  | GNU_lifetimebound 
  | CXX11_clang_lifetimebound 
  | SpellingNotCalculated [@@deriving refl]
external ext_lifetime_bound_get_spelling :
  cxcursor -> clang_ext_lifetimebound_spelling =
    "clang_ext_LifetimeBound_getSpelling_wrapper"
type clang_ext_likely_spelling =
  | CXX11_likely 
  | C2x_clang_likely 
  | SpellingNotCalculated [@@deriving refl]
external ext_likely_get_spelling :
  cxcursor -> clang_ext_likely_spelling =
    "clang_ext_Likely_getSpelling_wrapper"
type clang_ext_loaderuninitialized_spelling =
  | GNU_loader_uninitialized 
  | CXX11_clang_loader_uninitialized 
  | C2x_clang_loader_uninitialized 
  | SpellingNotCalculated [@@deriving refl]
external ext_loader_uninitialized_get_spelling :
  cxcursor -> clang_ext_loaderuninitialized_spelling =
    "clang_ext_LoaderUninitialized_getSpelling_wrapper"
type clang_ext_loophint_spelling =
  | Pragma_clang_loop 
  | Pragma_unroll 
  | Pragma_nounroll 
  | Pragma_unroll_and_jam 
  | Pragma_nounroll_and_jam 
  | SpellingNotCalculated [@@deriving refl]
external ext_loop_hint_get_spelling :
  cxcursor -> clang_ext_loophint_spelling =
    "clang_ext_LoopHint_getSpelling_wrapper"
type clang_ext_migserverroutine_spelling =
  | GNU_mig_server_routine 
  | CXX11_clang_mig_server_routine 
  | C2x_clang_mig_server_routine 
  | SpellingNotCalculated [@@deriving refl]
external ext_migserver_routine_get_spelling :
  cxcursor -> clang_ext_migserverroutine_spelling =
    "clang_ext_MIGServerRoutine_getSpelling_wrapper"
type clang_ext_msabi_spelling =
  | GNU_ms_abi 
  | CXX11_gnu_ms_abi 
  | C2x_gnu_ms_abi 
  | SpellingNotCalculated [@@deriving refl]
external ext_msabi_get_spelling :
  cxcursor -> clang_ext_msabi_spelling =
    "clang_ext_MSABI_getSpelling_wrapper"
type clang_ext_msinheritance_spelling =
  | Keyword_single_inheritance 
  | Keyword_multiple_inheritance 
  | Keyword_virtual_inheritance 
  | Keyword_unspecified_inheritance 
  | SpellingNotCalculated [@@deriving refl]
external ext_msinheritance_get_spelling :
  cxcursor -> clang_ext_msinheritance_spelling =
    "clang_ext_MSInheritance_getSpelling_wrapper"
type clang_ext_msp430interrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_msp430_interrupt_get_spelling :
  cxcursor -> clang_ext_msp430interrupt_spelling =
    "clang_ext_MSP430Interrupt_getSpelling_wrapper"
type clang_ext_msstruct_spelling =
  | GNU_ms_struct 
  | CXX11_gnu_ms_struct 
  | C2x_gnu_ms_struct 
  | SpellingNotCalculated [@@deriving refl]
external ext_msstruct_get_spelling :
  cxcursor -> clang_ext_msstruct_spelling =
    "clang_ext_MSStruct_getSpelling_wrapper"
type clang_ext_mayalias_spelling =
  | GNU_may_alias 
  | CXX11_gnu_may_alias 
  | C2x_gnu_may_alias 
  | SpellingNotCalculated [@@deriving refl]
external ext_may_alias_get_spelling :
  cxcursor -> clang_ext_mayalias_spelling =
    "clang_ext_MayAlias_getSpelling_wrapper"
type clang_ext_micromips_spelling =
  | GNU_micromips 
  | CXX11_gnu_micromips 
  | C2x_gnu_micromips 
  | SpellingNotCalculated [@@deriving refl]
external ext_micro_mips_get_spelling :
  cxcursor -> clang_ext_micromips_spelling =
    "clang_ext_MicroMips_getSpelling_wrapper"
type clang_ext_minsize_spelling =
  | GNU_minsize 
  | CXX11_clang_minsize 
  | C2x_clang_minsize 
  | SpellingNotCalculated [@@deriving refl]
external ext_min_size_get_spelling :
  cxcursor -> clang_ext_minsize_spelling =
    "clang_ext_MinSize_getSpelling_wrapper"
type clang_ext_minvectorwidth_spelling =
  | GNU_min_vector_width 
  | CXX11_clang_min_vector_width 
  | C2x_clang_min_vector_width 
  | SpellingNotCalculated [@@deriving refl]
external ext_min_vector_width_get_spelling :
  cxcursor -> clang_ext_minvectorwidth_spelling =
    "clang_ext_MinVectorWidth_getSpelling_wrapper"
type clang_ext_mips16_spelling =
  | GNU_mips16 
  | CXX11_gnu_mips16 
  | C2x_gnu_mips16 
  | SpellingNotCalculated [@@deriving refl]
external ext_mips16_get_spelling :
  cxcursor -> clang_ext_mips16_spelling =
    "clang_ext_Mips16_getSpelling_wrapper"
type clang_ext_mipsinterrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_mips_interrupt_get_spelling :
  cxcursor -> clang_ext_mipsinterrupt_spelling =
    "clang_ext_MipsInterrupt_getSpelling_wrapper"
type clang_ext_mipslongcall_spelling =
  | GNU_long_call 
  | CXX11_gnu_long_call 
  | C2x_gnu_long_call 
  | GNU_far 
  | CXX11_gnu_far 
  | C2x_gnu_far 
  | SpellingNotCalculated [@@deriving refl]
external ext_mips_long_call_get_spelling :
  cxcursor -> clang_ext_mipslongcall_spelling =
    "clang_ext_MipsLongCall_getSpelling_wrapper"
type clang_ext_mipsshortcall_spelling =
  | GNU_short_call 
  | CXX11_gnu_short_call 
  | C2x_gnu_short_call 
  | GNU_near 
  | CXX11_gnu_near 
  | C2x_gnu_near 
  | SpellingNotCalculated [@@deriving refl]
external ext_mips_short_call_get_spelling :
  cxcursor -> clang_ext_mipsshortcall_spelling =
    "clang_ext_MipsShortCall_getSpelling_wrapper"
type clang_ext_mode_spelling =
  | GNU_mode 
  | CXX11_gnu_mode 
  | C2x_gnu_mode 
  | SpellingNotCalculated [@@deriving refl]
external ext_mode_get_spelling :
  cxcursor -> clang_ext_mode_spelling = "clang_ext_Mode_getSpelling_wrapper"
type clang_ext_musttail_spelling =
  | GNU_musttail 
  | CXX11_clang_musttail 
  | C2x_clang_musttail 
  | SpellingNotCalculated [@@deriving refl]
external ext_must_tail_get_spelling :
  cxcursor -> clang_ext_musttail_spelling =
    "clang_ext_MustTail_getSpelling_wrapper"
type clang_ext_nsconsumed_spelling =
  | GNU_ns_consumed 
  | CXX11_clang_ns_consumed 
  | C2x_clang_ns_consumed 
  | SpellingNotCalculated [@@deriving refl]
external ext_nsconsumed_get_spelling :
  cxcursor -> clang_ext_nsconsumed_spelling =
    "clang_ext_NSConsumed_getSpelling_wrapper"
type clang_ext_nsconsumesself_spelling =
  | GNU_ns_consumes_self 
  | CXX11_clang_ns_consumes_self 
  | C2x_clang_ns_consumes_self 
  | SpellingNotCalculated [@@deriving refl]
external ext_nsconsumes_self_get_spelling :
  cxcursor -> clang_ext_nsconsumesself_spelling =
    "clang_ext_NSConsumesSelf_getSpelling_wrapper"
type clang_ext_nsreturnsautoreleased_spelling =
  | GNU_ns_returns_autoreleased 
  | CXX11_clang_ns_returns_autoreleased 
  | C2x_clang_ns_returns_autoreleased 
  | SpellingNotCalculated [@@deriving refl]
external ext_nsreturns_autoreleased_get_spelling :
  cxcursor -> clang_ext_nsreturnsautoreleased_spelling =
    "clang_ext_NSReturnsAutoreleased_getSpelling_wrapper"
type clang_ext_nsreturnsnotretained_spelling =
  | GNU_ns_returns_not_retained 
  | CXX11_clang_ns_returns_not_retained 
  | C2x_clang_ns_returns_not_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_nsreturns_not_retained_get_spelling :
  cxcursor -> clang_ext_nsreturnsnotretained_spelling =
    "clang_ext_NSReturnsNotRetained_getSpelling_wrapper"
type clang_ext_nsreturnsretained_spelling =
  | GNU_ns_returns_retained 
  | CXX11_clang_ns_returns_retained 
  | C2x_clang_ns_returns_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_nsreturns_retained_get_spelling :
  cxcursor -> clang_ext_nsreturnsretained_spelling =
    "clang_ext_NSReturnsRetained_getSpelling_wrapper"
type clang_ext_naked_spelling =
  | GNU_naked 
  | CXX11_gnu_naked 
  | C2x_gnu_naked 
  | Declspec_naked 
  | SpellingNotCalculated [@@deriving refl]
external ext_naked_get_spelling :
  cxcursor -> clang_ext_naked_spelling =
    "clang_ext_Naked_getSpelling_wrapper"
type clang_ext_nobuiltin_spelling =
  | GNU_no_builtin 
  | CXX11_clang_no_builtin 
  | C2x_clang_no_builtin 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_builtin_get_spelling :
  cxcursor -> clang_ext_nobuiltin_spelling =
    "clang_ext_NoBuiltin_getSpelling_wrapper"
type clang_ext_nocommon_spelling =
  | GNU_nocommon 
  | CXX11_gnu_nocommon 
  | C2x_gnu_nocommon 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_common_get_spelling :
  cxcursor -> clang_ext_nocommon_spelling =
    "clang_ext_NoCommon_getSpelling_wrapper"
type clang_ext_nodebug_spelling =
  | GNU_nodebug 
  | CXX11_gnu_nodebug 
  | C2x_gnu_nodebug 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_debug_get_spelling :
  cxcursor -> clang_ext_nodebug_spelling =
    "clang_ext_NoDebug_getSpelling_wrapper"
type clang_ext_noderef_spelling =
  | GNU_noderef 
  | CXX11_clang_noderef 
  | C2x_clang_noderef 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_deref_get_spelling :
  cxcursor -> clang_ext_noderef_spelling =
    "clang_ext_NoDeref_getSpelling_wrapper"
type clang_ext_nodestroy_spelling =
  | GNU_no_destroy 
  | CXX11_clang_no_destroy 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_destroy_get_spelling :
  cxcursor -> clang_ext_nodestroy_spelling =
    "clang_ext_NoDestroy_getSpelling_wrapper"
type clang_ext_noduplicate_spelling =
  | GNU_noduplicate 
  | CXX11_clang_noduplicate 
  | C2x_clang_noduplicate 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_duplicate_get_spelling :
  cxcursor -> clang_ext_noduplicate_spelling =
    "clang_ext_NoDuplicate_getSpelling_wrapper"
type clang_ext_noescape_spelling =
  | GNU_noescape 
  | CXX11_clang_noescape 
  | C2x_clang_noescape 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_escape_get_spelling :
  cxcursor -> clang_ext_noescape_spelling =
    "clang_ext_NoEscape_getSpelling_wrapper"
type clang_ext_noinline_spelling =
  | GNU_noinline 
  | CXX11_gnu_noinline 
  | C2x_gnu_noinline 
  | Declspec_noinline 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_inline_get_spelling :
  cxcursor -> clang_ext_noinline_spelling =
    "clang_ext_NoInline_getSpelling_wrapper"
type clang_ext_noinstrumentfunction_spelling =
  | GNU_no_instrument_function 
  | CXX11_gnu_no_instrument_function 
  | C2x_gnu_no_instrument_function 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_instrument_function_get_spelling :
  cxcursor -> clang_ext_noinstrumentfunction_spelling =
    "clang_ext_NoInstrumentFunction_getSpelling_wrapper"
type clang_ext_nomicromips_spelling =
  | GNU_nomicromips 
  | CXX11_gnu_nomicromips 
  | C2x_gnu_nomicromips 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_micro_mips_get_spelling :
  cxcursor -> clang_ext_nomicromips_spelling =
    "clang_ext_NoMicroMips_getSpelling_wrapper"
type clang_ext_nomips16_spelling =
  | GNU_nomips16 
  | CXX11_gnu_nomips16 
  | C2x_gnu_nomips16 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_mips16_get_spelling :
  cxcursor -> clang_ext_nomips16_spelling =
    "clang_ext_NoMips16_getSpelling_wrapper"
type clang_ext_noprofilefunction_spelling =
  | GNU_no_profile_instrument_function 
  | CXX11_gnu_no_profile_instrument_function 
  | C2x_gnu_no_profile_instrument_function 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_profile_function_get_spelling :
  cxcursor -> clang_ext_noprofilefunction_spelling =
    "clang_ext_NoProfileFunction_getSpelling_wrapper"
type clang_ext_noreturn_spelling =
  | GNU_noreturn 
  | CXX11_gnu_noreturn 
  | C2x_gnu_noreturn 
  | Declspec_noreturn 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_return_get_spelling :
  cxcursor -> clang_ext_noreturn_spelling =
    "clang_ext_NoReturn_getSpelling_wrapper"
type clang_ext_nosanitize_spelling =
  | GNU_no_sanitize 
  | CXX11_clang_no_sanitize 
  | C2x_clang_no_sanitize 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_sanitize_get_spelling :
  cxcursor -> clang_ext_nosanitize_spelling =
    "clang_ext_NoSanitize_getSpelling_wrapper"
type clang_ext_nospeculativeloadhardening_spelling =
  | GNU_no_speculative_load_hardening 
  | CXX11_clang_no_speculative_load_hardening 
  | C2x_clang_no_speculative_load_hardening 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_speculative_load_hardening_get_spelling :
  cxcursor -> clang_ext_nospeculativeloadhardening_spelling =
    "clang_ext_NoSpeculativeLoadHardening_getSpelling_wrapper"
type clang_ext_nosplitstack_spelling =
  | GNU_no_split_stack 
  | CXX11_gnu_no_split_stack 
  | C2x_gnu_no_split_stack 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_split_stack_get_spelling :
  cxcursor -> clang_ext_nosplitstack_spelling =
    "clang_ext_NoSplitStack_getSpelling_wrapper"
type clang_ext_nostackprotector_spelling =
  | GNU_no_stack_protector 
  | CXX11_clang_no_stack_protector 
  | C2x_clang_no_stack_protector 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_stack_protector_get_spelling :
  cxcursor -> clang_ext_nostackprotector_spelling =
    "clang_ext_NoStackProtector_getSpelling_wrapper"
type clang_ext_nothreadsafetyanalysis_spelling =
  | GNU_no_thread_safety_analysis 
  | CXX11_clang_no_thread_safety_analysis 
  | C2x_clang_no_thread_safety_analysis 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_thread_safety_analysis_get_spelling :
  cxcursor -> clang_ext_nothreadsafetyanalysis_spelling =
    "clang_ext_NoThreadSafetyAnalysis_getSpelling_wrapper"
type clang_ext_nothrow_spelling =
  | GNU_nothrow 
  | CXX11_gnu_nothrow 
  | C2x_gnu_nothrow 
  | Declspec_nothrow 
  | SpellingNotCalculated [@@deriving refl]
external ext_no_throw_get_spelling :
  cxcursor -> clang_ext_nothrow_spelling =
    "clang_ext_NoThrow_getSpelling_wrapper"
type clang_ext_nonnull_spelling =
  | GNU_nonnull 
  | CXX11_gnu_nonnull 
  | C2x_gnu_nonnull 
  | SpellingNotCalculated [@@deriving refl]
external ext_non_null_get_spelling :
  cxcursor -> clang_ext_nonnull_spelling =
    "clang_ext_NonNull_getSpelling_wrapper"
type clang_ext_nottailcalled_spelling =
  | GNU_not_tail_called 
  | CXX11_clang_not_tail_called 
  | C2x_clang_not_tail_called 
  | SpellingNotCalculated [@@deriving refl]
external ext_not_tail_called_get_spelling :
  cxcursor -> clang_ext_nottailcalled_spelling =
    "clang_ext_NotTailCalled_getSpelling_wrapper"
type clang_ext_osconsumed_spelling =
  | GNU_os_consumed 
  | CXX11_clang_os_consumed 
  | C2x_clang_os_consumed 
  | SpellingNotCalculated [@@deriving refl]
external ext_osconsumed_get_spelling :
  cxcursor -> clang_ext_osconsumed_spelling =
    "clang_ext_OSConsumed_getSpelling_wrapper"
type clang_ext_osconsumesthis_spelling =
  | GNU_os_consumes_this 
  | CXX11_clang_os_consumes_this 
  | C2x_clang_os_consumes_this 
  | SpellingNotCalculated [@@deriving refl]
external ext_osconsumes_this_get_spelling :
  cxcursor -> clang_ext_osconsumesthis_spelling =
    "clang_ext_OSConsumesThis_getSpelling_wrapper"
type clang_ext_osreturnsnotretained_spelling =
  | GNU_os_returns_not_retained 
  | CXX11_clang_os_returns_not_retained 
  | C2x_clang_os_returns_not_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_osreturns_not_retained_get_spelling :
  cxcursor -> clang_ext_osreturnsnotretained_spelling =
    "clang_ext_OSReturnsNotRetained_getSpelling_wrapper"
type clang_ext_osreturnsretained_spelling =
  | GNU_os_returns_retained 
  | CXX11_clang_os_returns_retained 
  | C2x_clang_os_returns_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_osreturns_retained_get_spelling :
  cxcursor -> clang_ext_osreturnsretained_spelling =
    "clang_ext_OSReturnsRetained_getSpelling_wrapper"
type clang_ext_osreturnsretainedonnonzero_spelling =
  | GNU_os_returns_retained_on_non_zero 
  | CXX11_clang_os_returns_retained_on_non_zero 
  | C2x_clang_os_returns_retained_on_non_zero 
  | SpellingNotCalculated [@@deriving refl]
external ext_osreturns_retained_on_non_zero_get_spelling :
  cxcursor -> clang_ext_osreturnsretainedonnonzero_spelling =
    "clang_ext_OSReturnsRetainedOnNonZero_getSpelling_wrapper"
type clang_ext_osreturnsretainedonzero_spelling =
  | GNU_os_returns_retained_on_zero 
  | CXX11_clang_os_returns_retained_on_zero 
  | C2x_clang_os_returns_retained_on_zero 
  | SpellingNotCalculated [@@deriving refl]
external ext_osreturns_retained_on_zero_get_spelling :
  cxcursor -> clang_ext_osreturnsretainedonzero_spelling =
    "clang_ext_OSReturnsRetainedOnZero_getSpelling_wrapper"
type clang_ext_objcboxable_spelling =
  | GNU_objc_boxable 
  | CXX11_clang_objc_boxable 
  | C2x_clang_objc_boxable 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cboxable_get_spelling :
  cxcursor -> clang_ext_objcboxable_spelling =
    "clang_ext_ObjCBoxable_getSpelling_wrapper"
type clang_ext_objcbridge_spelling =
  | GNU_objc_bridge 
  | CXX11_clang_objc_bridge 
  | C2x_clang_objc_bridge 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cbridge_get_spelling :
  cxcursor -> clang_ext_objcbridge_spelling =
    "clang_ext_ObjCBridge_getSpelling_wrapper"
type clang_ext_objcbridgemutable_spelling =
  | GNU_objc_bridge_mutable 
  | CXX11_clang_objc_bridge_mutable 
  | C2x_clang_objc_bridge_mutable 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cbridge_mutable_get_spelling :
  cxcursor -> clang_ext_objcbridgemutable_spelling =
    "clang_ext_ObjCBridgeMutable_getSpelling_wrapper"
type clang_ext_objcbridgerelated_spelling =
  | GNU_objc_bridge_related 
  | CXX11_clang_objc_bridge_related 
  | C2x_clang_objc_bridge_related 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cbridge_related_get_spelling :
  cxcursor -> clang_ext_objcbridgerelated_spelling =
    "clang_ext_ObjCBridgeRelated_getSpelling_wrapper"
type clang_ext_objcclassstub_spelling =
  | GNU_objc_class_stub 
  | CXX11_clang_objc_class_stub 
  | C2x_clang_objc_class_stub 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cclass_stub_get_spelling :
  cxcursor -> clang_ext_objcclassstub_spelling =
    "clang_ext_ObjCClassStub_getSpelling_wrapper"
type clang_ext_objcdesignatedinitializer_spelling =
  | GNU_objc_designated_initializer 
  | CXX11_clang_objc_designated_initializer 
  | C2x_clang_objc_designated_initializer 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cdesignated_initializer_get_spelling :
  cxcursor -> clang_ext_objcdesignatedinitializer_spelling =
    "clang_ext_ObjCDesignatedInitializer_getSpelling_wrapper"
type clang_ext_objcdirect_spelling =
  | GNU_objc_direct 
  | CXX11_clang_objc_direct 
  | C2x_clang_objc_direct 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cdirect_get_spelling :
  cxcursor -> clang_ext_objcdirect_spelling =
    "clang_ext_ObjCDirect_getSpelling_wrapper"
type clang_ext_objcdirectmembers_spelling =
  | GNU_objc_direct_members 
  | CXX11_clang_objc_direct_members 
  | C2x_clang_objc_direct_members 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cdirect_members_get_spelling :
  cxcursor -> clang_ext_objcdirectmembers_spelling =
    "clang_ext_ObjCDirectMembers_getSpelling_wrapper"
type clang_ext_objcexception_spelling =
  | GNU_objc_exception 
  | CXX11_clang_objc_exception 
  | C2x_clang_objc_exception 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cexception_get_spelling :
  cxcursor -> clang_ext_objcexception_spelling =
    "clang_ext_ObjCException_getSpelling_wrapper"
type clang_ext_objcexplicitprotocolimpl_spelling =
  | GNU_objc_protocol_requires_explicit_implementation 
  | CXX11_clang_objc_protocol_requires_explicit_implementation 
  | C2x_clang_objc_protocol_requires_explicit_implementation 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cexplicit_protocol_impl_get_spelling :
  cxcursor -> clang_ext_objcexplicitprotocolimpl_spelling =
    "clang_ext_ObjCExplicitProtocolImpl_getSpelling_wrapper"
type clang_ext_objcexternallyretained_spelling =
  | GNU_objc_externally_retained 
  | CXX11_clang_objc_externally_retained 
  | C2x_clang_objc_externally_retained 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cexternally_retained_get_spelling :
  cxcursor -> clang_ext_objcexternallyretained_spelling =
    "clang_ext_ObjCExternallyRetained_getSpelling_wrapper"
type clang_ext_objcgc_spelling =
  | GNU_objc_gc 
  | CXX11_clang_objc_gc 
  | C2x_clang_objc_gc 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cgc_get_spelling :
  cxcursor -> clang_ext_objcgc_spelling =
    "clang_ext_ObjCGC_getSpelling_wrapper"
type clang_ext_objcindependentclass_spelling =
  | GNU_objc_independent_class 
  | CXX11_clang_objc_independent_class 
  | C2x_clang_objc_independent_class 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cindependent_class_get_spelling :
  cxcursor -> clang_ext_objcindependentclass_spelling =
    "clang_ext_ObjCIndependentClass_getSpelling_wrapper"
type clang_ext_objcmethodfamily_spelling =
  | GNU_objc_method_family 
  | CXX11_clang_objc_method_family 
  | C2x_clang_objc_method_family 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cmethod_family_get_spelling :
  cxcursor -> clang_ext_objcmethodfamily_spelling =
    "clang_ext_ObjCMethodFamily_getSpelling_wrapper"
type clang_ext_objcnsobject_spelling =
  | GNU_NSObject 
  | CXX11_clang_NSObject 
  | C2x_clang_NSObject 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cnsobject_get_spelling :
  cxcursor -> clang_ext_objcnsobject_spelling =
    "clang_ext_ObjCNSObject_getSpelling_wrapper"
type clang_ext_objcnonlazyclass_spelling =
  | GNU_objc_nonlazy_class 
  | CXX11_clang_objc_nonlazy_class 
  | C2x_clang_objc_nonlazy_class 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cnon_lazy_class_get_spelling :
  cxcursor -> clang_ext_objcnonlazyclass_spelling =
    "clang_ext_ObjCNonLazyClass_getSpelling_wrapper"
type clang_ext_objcnonruntimeprotocol_spelling =
  | GNU_objc_non_runtime_protocol 
  | CXX11_clang_objc_non_runtime_protocol 
  | C2x_clang_objc_non_runtime_protocol 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cnon_runtime_protocol_get_spelling :
  cxcursor -> clang_ext_objcnonruntimeprotocol_spelling =
    "clang_ext_ObjCNonRuntimeProtocol_getSpelling_wrapper"
type clang_ext_objcownership_spelling =
  | GNU_objc_ownership 
  | CXX11_clang_objc_ownership 
  | C2x_clang_objc_ownership 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cownership_get_spelling :
  cxcursor -> clang_ext_objcownership_spelling =
    "clang_ext_ObjCOwnership_getSpelling_wrapper"
type clang_ext_objcpreciselifetime_spelling =
  | GNU_objc_precise_lifetime 
  | CXX11_clang_objc_precise_lifetime 
  | C2x_clang_objc_precise_lifetime 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cprecise_lifetime_get_spelling :
  cxcursor -> clang_ext_objcpreciselifetime_spelling =
    "clang_ext_ObjCPreciseLifetime_getSpelling_wrapper"
type clang_ext_objcrequirespropertydefs_spelling =
  | GNU_objc_requires_property_definitions 
  | CXX11_clang_objc_requires_property_definitions 
  | C2x_clang_objc_requires_property_definitions 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_crequires_property_defs_get_spelling :
  cxcursor -> clang_ext_objcrequirespropertydefs_spelling =
    "clang_ext_ObjCRequiresPropertyDefs_getSpelling_wrapper"
type clang_ext_objcrequiressuper_spelling =
  | GNU_objc_requires_super 
  | CXX11_clang_objc_requires_super 
  | C2x_clang_objc_requires_super 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_crequires_super_get_spelling :
  cxcursor -> clang_ext_objcrequiressuper_spelling =
    "clang_ext_ObjCRequiresSuper_getSpelling_wrapper"
type clang_ext_objcreturnsinnerpointer_spelling =
  | GNU_objc_returns_inner_pointer 
  | CXX11_clang_objc_returns_inner_pointer 
  | C2x_clang_objc_returns_inner_pointer 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_creturns_inner_pointer_get_spelling :
  cxcursor -> clang_ext_objcreturnsinnerpointer_spelling =
    "clang_ext_ObjCReturnsInnerPointer_getSpelling_wrapper"
type clang_ext_objcrootclass_spelling =
  | GNU_objc_root_class 
  | CXX11_clang_objc_root_class 
  | C2x_clang_objc_root_class 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_croot_class_get_spelling :
  cxcursor -> clang_ext_objcrootclass_spelling =
    "clang_ext_ObjCRootClass_getSpelling_wrapper"
type clang_ext_objcruntimename_spelling =
  | GNU_objc_runtime_name 
  | CXX11_clang_objc_runtime_name 
  | C2x_clang_objc_runtime_name 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cruntime_name_get_spelling :
  cxcursor -> clang_ext_objcruntimename_spelling =
    "clang_ext_ObjCRuntimeName_getSpelling_wrapper"
type clang_ext_objcruntimevisible_spelling =
  | GNU_objc_runtime_visible 
  | CXX11_clang_objc_runtime_visible 
  | C2x_clang_objc_runtime_visible 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_cruntime_visible_get_spelling :
  cxcursor -> clang_ext_objcruntimevisible_spelling =
    "clang_ext_ObjCRuntimeVisible_getSpelling_wrapper"
type clang_ext_objcsubclassingrestricted_spelling =
  | GNU_objc_subclassing_restricted 
  | CXX11_clang_objc_subclassing_restricted 
  | C2x_clang_objc_subclassing_restricted 
  | SpellingNotCalculated [@@deriving refl]
external ext_obj_csubclassing_restricted_get_spelling :
  cxcursor -> clang_ext_objcsubclassingrestricted_spelling =
    "clang_ext_ObjCSubclassingRestricted_getSpelling_wrapper"
type clang_ext_openclaccess_spelling =
  | Keyword_read_only 
  | Keyword_write_only 
  | Keyword_read_write 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_claccess_get_spelling :
  cxcursor -> clang_ext_openclaccess_spelling =
    "clang_ext_OpenCLAccess_getSpelling_wrapper"
type clang_ext_openclconstantaddressspace_spelling =
  | Keyword_constant 
  | GNU_opencl_constant 
  | CXX11_clang_opencl_constant 
  | C2x_clang_opencl_constant 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clconstant_address_space_get_spelling :
  cxcursor -> clang_ext_openclconstantaddressspace_spelling =
    "clang_ext_OpenCLConstantAddressSpace_getSpelling_wrapper"
type clang_ext_openclgenericaddressspace_spelling =
  | Keyword_generic 
  | GNU_opencl_generic 
  | CXX11_clang_opencl_generic 
  | C2x_clang_opencl_generic 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clgeneric_address_space_get_spelling :
  cxcursor -> clang_ext_openclgenericaddressspace_spelling =
    "clang_ext_OpenCLGenericAddressSpace_getSpelling_wrapper"
type clang_ext_openclglobaladdressspace_spelling =
  | Keyword_global 
  | GNU_opencl_global 
  | CXX11_clang_opencl_global 
  | C2x_clang_opencl_global 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clglobal_address_space_get_spelling :
  cxcursor -> clang_ext_openclglobaladdressspace_spelling =
    "clang_ext_OpenCLGlobalAddressSpace_getSpelling_wrapper"
type clang_ext_openclglobaldeviceaddressspace_spelling =
  | GNU_opencl_global_device 
  | CXX11_clang_opencl_global_device 
  | C2x_clang_opencl_global_device 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clglobal_device_address_space_get_spelling :
  cxcursor -> clang_ext_openclglobaldeviceaddressspace_spelling =
    "clang_ext_OpenCLGlobalDeviceAddressSpace_getSpelling_wrapper"
type clang_ext_openclglobalhostaddressspace_spelling =
  | GNU_opencl_global_host 
  | CXX11_clang_opencl_global_host 
  | C2x_clang_opencl_global_host 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clglobal_host_address_space_get_spelling :
  cxcursor -> clang_ext_openclglobalhostaddressspace_spelling =
    "clang_ext_OpenCLGlobalHostAddressSpace_getSpelling_wrapper"
type clang_ext_openclkernel_spelling =
  | Keyword_kernel 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clkernel_get_spelling :
  cxcursor -> clang_ext_openclkernel_spelling =
    "clang_ext_OpenCLKernel_getSpelling_wrapper"
type clang_ext_opencllocaladdressspace_spelling =
  | Keyword_local 
  | GNU_opencl_local 
  | CXX11_clang_opencl_local 
  | C2x_clang_opencl_local 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_cllocal_address_space_get_spelling :
  cxcursor -> clang_ext_opencllocaladdressspace_spelling =
    "clang_ext_OpenCLLocalAddressSpace_getSpelling_wrapper"
type clang_ext_openclprivateaddressspace_spelling =
  | Keyword_private 
  | GNU_opencl_private 
  | CXX11_clang_opencl_private 
  | C2x_clang_opencl_private 
  | SpellingNotCalculated [@@deriving refl]
external ext_open_clprivate_address_space_get_spelling :
  cxcursor -> clang_ext_openclprivateaddressspace_spelling =
    "clang_ext_OpenCLPrivateAddressSpace_getSpelling_wrapper"
type clang_ext_optimizenone_spelling =
  | GNU_optnone 
  | CXX11_clang_optnone 
  | C2x_clang_optnone 
  | SpellingNotCalculated [@@deriving refl]
external ext_optimize_none_get_spelling :
  cxcursor -> clang_ext_optimizenone_spelling =
    "clang_ext_OptimizeNone_getSpelling_wrapper"
type clang_ext_overloadable_spelling =
  | GNU_overloadable 
  | CXX11_clang_overloadable 
  | C2x_clang_overloadable 
  | SpellingNotCalculated [@@deriving refl]
external ext_overloadable_get_spelling :
  cxcursor -> clang_ext_overloadable_spelling =
    "clang_ext_Overloadable_getSpelling_wrapper"
type clang_ext_ownership_spelling =
  | GNU_ownership_holds 
  | CXX11_clang_ownership_holds 
  | C2x_clang_ownership_holds 
  | GNU_ownership_returns 
  | CXX11_clang_ownership_returns 
  | C2x_clang_ownership_returns 
  | GNU_ownership_takes 
  | CXX11_clang_ownership_takes 
  | C2x_clang_ownership_takes 
  | SpellingNotCalculated [@@deriving refl]
external ext_ownership_get_spelling :
  cxcursor -> clang_ext_ownership_spelling =
    "clang_ext_Ownership_getSpelling_wrapper"
type clang_ext_packed_spelling =
  | GNU_packed 
  | CXX11_gnu_packed 
  | C2x_gnu_packed 
  | SpellingNotCalculated [@@deriving refl]
external ext_packed_get_spelling :
  cxcursor -> clang_ext_packed_spelling =
    "clang_ext_Packed_getSpelling_wrapper"
type clang_ext_paramtypestate_spelling =
  | GNU_param_typestate 
  | CXX11_clang_param_typestate 
  | SpellingNotCalculated [@@deriving refl]
external ext_param_typestate_get_spelling :
  cxcursor -> clang_ext_paramtypestate_spelling =
    "clang_ext_ParamTypestate_getSpelling_wrapper"
type clang_ext_pascal_spelling =
  | GNU_pascal 
  | CXX11_clang_pascal 
  | C2x_clang_pascal 
  | Keyword_pascal 
  | SpellingNotCalculated [@@deriving refl]
external ext_pascal_get_spelling :
  cxcursor -> clang_ext_pascal_spelling =
    "clang_ext_Pascal_getSpelling_wrapper"
type clang_ext_passobjectsize_spelling =
  | GNU_pass_object_size 
  | CXX11_clang_pass_object_size 
  | C2x_clang_pass_object_size 
  | GNU_pass_dynamic_object_size 
  | CXX11_clang_pass_dynamic_object_size 
  | C2x_clang_pass_dynamic_object_size 
  | SpellingNotCalculated [@@deriving refl]
external ext_pass_object_size_get_spelling :
  cxcursor -> clang_ext_passobjectsize_spelling =
    "clang_ext_PassObjectSize_getSpelling_wrapper"
type clang_ext_patchablefunctionentry_spelling =
  | GNU_patchable_function_entry 
  | CXX11_gnu_patchable_function_entry 
  | C2x_gnu_patchable_function_entry 
  | SpellingNotCalculated [@@deriving refl]
external ext_patchable_function_entry_get_spelling :
  cxcursor -> clang_ext_patchablefunctionentry_spelling =
    "clang_ext_PatchableFunctionEntry_getSpelling_wrapper"
type clang_ext_pcs_spelling =
  | GNU_pcs 
  | CXX11_gnu_pcs 
  | C2x_gnu_pcs 
  | SpellingNotCalculated [@@deriving refl]
external ext_pcs_get_spelling :
  cxcursor -> clang_ext_pcs_spelling = "clang_ext_Pcs_getSpelling_wrapper"
type clang_ext_preferredname_spelling =
  | GNU_preferred_name 
  | CXX11_clang_preferred_name 
  | SpellingNotCalculated [@@deriving refl]
external ext_preferred_name_get_spelling :
  cxcursor -> clang_ext_preferredname_spelling =
    "clang_ext_PreferredName_getSpelling_wrapper"
type clang_ext_preserveall_spelling =
  | GNU_preserve_all 
  | CXX11_clang_preserve_all 
  | C2x_clang_preserve_all 
  | SpellingNotCalculated [@@deriving refl]
external ext_preserve_all_get_spelling :
  cxcursor -> clang_ext_preserveall_spelling =
    "clang_ext_PreserveAll_getSpelling_wrapper"
type clang_ext_preservemost_spelling =
  | GNU_preserve_most 
  | CXX11_clang_preserve_most 
  | C2x_clang_preserve_most 
  | SpellingNotCalculated [@@deriving refl]
external ext_preserve_most_get_spelling :
  cxcursor -> clang_ext_preservemost_spelling =
    "clang_ext_PreserveMost_getSpelling_wrapper"
type clang_ext_ptguardedvar_spelling =
  | GNU_pt_guarded_var 
  | CXX11_clang_pt_guarded_var 
  | SpellingNotCalculated [@@deriving refl]
external ext_pt_guarded_var_get_spelling :
  cxcursor -> clang_ext_ptguardedvar_spelling =
    "clang_ext_PtGuardedVar_getSpelling_wrapper"
type clang_ext_pure_spelling =
  | GNU_pure 
  | CXX11_gnu_pure 
  | C2x_gnu_pure 
  | SpellingNotCalculated [@@deriving refl]
external ext_pure_get_spelling :
  cxcursor -> clang_ext_pure_spelling = "clang_ext_Pure_getSpelling_wrapper"
type clang_ext_riscvinterrupt_spelling =
  | GNU_interrupt 
  | CXX11_gnu_interrupt 
  | C2x_gnu_interrupt 
  | SpellingNotCalculated [@@deriving refl]
external ext_riscvinterrupt_get_spelling :
  cxcursor -> clang_ext_riscvinterrupt_spelling =
    "clang_ext_RISCVInterrupt_getSpelling_wrapper"
type clang_ext_regcall_spelling =
  | GNU_regcall 
  | CXX11_gnu_regcall 
  | C2x_gnu_regcall 
  | Keyword_regcall 
  | SpellingNotCalculated [@@deriving refl]
external ext_reg_call_get_spelling :
  cxcursor -> clang_ext_regcall_spelling =
    "clang_ext_RegCall_getSpelling_wrapper"
type clang_ext_reinitializes_spelling =
  | GNU_reinitializes 
  | CXX11_clang_reinitializes 
  | SpellingNotCalculated [@@deriving refl]
external ext_reinitializes_get_spelling :
  cxcursor -> clang_ext_reinitializes_spelling =
    "clang_ext_Reinitializes_getSpelling_wrapper"
type clang_ext_releasecapability_spelling =
  | GNU_release_capability 
  | CXX11_clang_release_capability 
  | GNU_release_shared_capability 
  | CXX11_clang_release_shared_capability 
  | GNU_release_generic_capability 
  | CXX11_clang_release_generic_capability 
  | GNU_unlock_function 
  | CXX11_clang_unlock_function 
  | SpellingNotCalculated [@@deriving refl]
external ext_release_capability_get_spelling :
  cxcursor -> clang_ext_releasecapability_spelling =
    "clang_ext_ReleaseCapability_getSpelling_wrapper"
type clang_ext_releasehandle_spelling =
  | GNU_release_handle 
  | CXX11_clang_release_handle 
  | C2x_clang_release_handle 
  | SpellingNotCalculated [@@deriving refl]
external ext_release_handle_get_spelling :
  cxcursor -> clang_ext_releasehandle_spelling =
    "clang_ext_ReleaseHandle_getSpelling_wrapper"
type clang_ext_requirescapability_spelling =
  | GNU_requires_capability 
  | CXX11_clang_requires_capability 
  | GNU_exclusive_locks_required 
  | CXX11_clang_exclusive_locks_required 
  | GNU_requires_shared_capability 
  | CXX11_clang_requires_shared_capability 
  | GNU_shared_locks_required 
  | CXX11_clang_shared_locks_required 
  | SpellingNotCalculated [@@deriving refl]
external ext_requires_capability_get_spelling :
  cxcursor -> clang_ext_requirescapability_spelling =
    "clang_ext_RequiresCapability_getSpelling_wrapper"
type clang_ext_restrict_spelling =
  | Declspec_restrict 
  | GNU_malloc 
  | CXX11_gnu_malloc 
  | C2x_gnu_malloc 
  | SpellingNotCalculated [@@deriving refl]
external ext_restrict_get_spelling :
  cxcursor -> clang_ext_restrict_spelling =
    "clang_ext_Restrict_getSpelling_wrapper"
type clang_ext_retain_spelling =
  | GNU_retain 
  | CXX11_gnu_retain 
  | C2x_gnu_retain 
  | SpellingNotCalculated [@@deriving refl]
external ext_retain_get_spelling :
  cxcursor -> clang_ext_retain_spelling =
    "clang_ext_Retain_getSpelling_wrapper"
type clang_ext_returntypestate_spelling =
  | GNU_return_typestate 
  | CXX11_clang_return_typestate 
  | SpellingNotCalculated [@@deriving refl]
external ext_return_typestate_get_spelling :
  cxcursor -> clang_ext_returntypestate_spelling =
    "clang_ext_ReturnTypestate_getSpelling_wrapper"
type clang_ext_returnsnonnull_spelling =
  | GNU_returns_nonnull 
  | CXX11_gnu_returns_nonnull 
  | C2x_gnu_returns_nonnull 
  | SpellingNotCalculated [@@deriving refl]
external ext_returns_non_null_get_spelling :
  cxcursor -> clang_ext_returnsnonnull_spelling =
    "clang_ext_ReturnsNonNull_getSpelling_wrapper"
type clang_ext_returnstwice_spelling =
  | GNU_returns_twice 
  | CXX11_gnu_returns_twice 
  | C2x_gnu_returns_twice 
  | SpellingNotCalculated [@@deriving refl]
external ext_returns_twice_get_spelling :
  cxcursor -> clang_ext_returnstwice_spelling =
    "clang_ext_ReturnsTwice_getSpelling_wrapper"
type clang_ext_syclkernel_spelling =
  | GNU_sycl_kernel 
  | CXX11_clang_sycl_kernel 
  | C2x_clang_sycl_kernel 
  | SpellingNotCalculated [@@deriving refl]
external ext_syclkernel_get_spelling :
  cxcursor -> clang_ext_syclkernel_spelling =
    "clang_ext_SYCLKernel_getSpelling_wrapper"
type clang_ext_syclspecialclass_spelling =
  | GNU_sycl_special_class 
  | CXX11_clang_sycl_special_class 
  | C2x_clang_sycl_special_class 
  | SpellingNotCalculated [@@deriving refl]
external ext_syclspecial_class_get_spelling :
  cxcursor -> clang_ext_syclspecialclass_spelling =
    "clang_ext_SYCLSpecialClass_getSpelling_wrapper"
type clang_ext_scopedlockable_spelling =
  | GNU_scoped_lockable 
  | CXX11_clang_scoped_lockable 
  | SpellingNotCalculated [@@deriving refl]
external ext_scoped_lockable_get_spelling :
  cxcursor -> clang_ext_scopedlockable_spelling =
    "clang_ext_ScopedLockable_getSpelling_wrapper"
type clang_ext_section_spelling =
  | GNU_section 
  | CXX11_gnu_section 
  | C2x_gnu_section 
  | Declspec_allocate 
  | SpellingNotCalculated [@@deriving refl]
external ext_section_get_spelling :
  cxcursor -> clang_ext_section_spelling =
    "clang_ext_Section_getSpelling_wrapper"
type clang_ext_selectany_spelling =
  | Declspec_selectany 
  | GNU_selectany 
  | CXX11_gnu_selectany 
  | C2x_gnu_selectany 
  | SpellingNotCalculated [@@deriving refl]
external ext_select_any_get_spelling :
  cxcursor -> clang_ext_selectany_spelling =
    "clang_ext_SelectAny_getSpelling_wrapper"
type clang_ext_sentinel_spelling =
  | GNU_sentinel 
  | CXX11_gnu_sentinel 
  | C2x_gnu_sentinel 
  | SpellingNotCalculated [@@deriving refl]
external ext_sentinel_get_spelling :
  cxcursor -> clang_ext_sentinel_spelling =
    "clang_ext_Sentinel_getSpelling_wrapper"
type clang_ext_settypestate_spelling =
  | GNU_set_typestate 
  | CXX11_clang_set_typestate 
  | SpellingNotCalculated [@@deriving refl]
external ext_set_typestate_get_spelling :
  cxcursor -> clang_ext_settypestate_spelling =
    "clang_ext_SetTypestate_getSpelling_wrapper"
type clang_ext_speculativeloadhardening_spelling =
  | GNU_speculative_load_hardening 
  | CXX11_clang_speculative_load_hardening 
  | C2x_clang_speculative_load_hardening 
  | SpellingNotCalculated [@@deriving refl]
external ext_speculative_load_hardening_get_spelling :
  cxcursor -> clang_ext_speculativeloadhardening_spelling =
    "clang_ext_SpeculativeLoadHardening_getSpelling_wrapper"
type clang_ext_standalonedebug_spelling =
  | GNU_standalone_debug 
  | CXX11_clang_standalone_debug 
  | SpellingNotCalculated [@@deriving refl]
external ext_standalone_debug_get_spelling :
  cxcursor -> clang_ext_standalonedebug_spelling =
    "clang_ext_StandaloneDebug_getSpelling_wrapper"
type clang_ext_stdcall_spelling =
  | GNU_stdcall 
  | CXX11_gnu_stdcall 
  | C2x_gnu_stdcall 
  | Keyword_stdcall 
  | SpellingNotCalculated [@@deriving refl]
external ext_std_call_get_spelling :
  cxcursor -> clang_ext_stdcall_spelling =
    "clang_ext_StdCall_getSpelling_wrapper"
type clang_ext_swiftasync_spelling =
  | GNU_swift_async 
  | CXX11_clang_swift_async 
  | C2x_clang_swift_async 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_async_get_spelling :
  cxcursor -> clang_ext_swiftasync_spelling =
    "clang_ext_SwiftAsync_getSpelling_wrapper"
type clang_ext_swiftasynccall_spelling =
  | GNU_swiftasynccall 
  | CXX11_clang_swiftasynccall 
  | C2x_clang_swiftasynccall 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_async_call_get_spelling :
  cxcursor -> clang_ext_swiftasynccall_spelling =
    "clang_ext_SwiftAsyncCall_getSpelling_wrapper"
type clang_ext_swiftasynccontext_spelling =
  | GNU_swift_async_context 
  | CXX11_clang_swift_async_context 
  | C2x_clang_swift_async_context 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_async_context_get_spelling :
  cxcursor -> clang_ext_swiftasynccontext_spelling =
    "clang_ext_SwiftAsyncContext_getSpelling_wrapper"
type clang_ext_swiftasyncerror_spelling =
  | GNU_swift_async_error 
  | CXX11_clang_swift_async_error 
  | C2x_clang_swift_async_error 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_async_error_get_spelling :
  cxcursor -> clang_ext_swiftasyncerror_spelling =
    "clang_ext_SwiftAsyncError_getSpelling_wrapper"
type clang_ext_swiftcall_spelling =
  | GNU_swiftcall 
  | CXX11_clang_swiftcall 
  | C2x_clang_swiftcall 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_call_get_spelling :
  cxcursor -> clang_ext_swiftcall_spelling =
    "clang_ext_SwiftCall_getSpelling_wrapper"
type clang_ext_swiftcontext_spelling =
  | GNU_swift_context 
  | CXX11_clang_swift_context 
  | C2x_clang_swift_context 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_context_get_spelling :
  cxcursor -> clang_ext_swiftcontext_spelling =
    "clang_ext_SwiftContext_getSpelling_wrapper"
type clang_ext_swifterrorresult_spelling =
  | GNU_swift_error_result 
  | CXX11_clang_swift_error_result 
  | C2x_clang_swift_error_result 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_error_result_get_spelling :
  cxcursor -> clang_ext_swifterrorresult_spelling =
    "clang_ext_SwiftErrorResult_getSpelling_wrapper"
type clang_ext_swiftindirectresult_spelling =
  | GNU_swift_indirect_result 
  | CXX11_clang_swift_indirect_result 
  | C2x_clang_swift_indirect_result 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_indirect_result_get_spelling :
  cxcursor -> clang_ext_swiftindirectresult_spelling =
    "clang_ext_SwiftIndirectResult_getSpelling_wrapper"
type clang_ext_swiftnewtype_spelling =
  | GNU_swift_newtype 
  | GNU_swift_wrapper 
  | SpellingNotCalculated [@@deriving refl]
external ext_swift_new_type_get_spelling :
  cxcursor -> clang_ext_swiftnewtype_spelling =
    "clang_ext_SwiftNewType_getSpelling_wrapper"
type clang_ext_sysvabi_spelling =
  | GNU_sysv_abi 
  | CXX11_gnu_sysv_abi 
  | C2x_gnu_sysv_abi 
  | SpellingNotCalculated [@@deriving refl]
external ext_sys_vabi_get_spelling :
  cxcursor -> clang_ext_sysvabi_spelling =
    "clang_ext_SysVABI_getSpelling_wrapper"
type clang_ext_tlsmodel_spelling =
  | GNU_tls_model 
  | CXX11_gnu_tls_model 
  | C2x_gnu_tls_model 
  | SpellingNotCalculated [@@deriving refl]
external ext_tlsmodel_get_spelling :
  cxcursor -> clang_ext_tlsmodel_spelling =
    "clang_ext_TLSModel_getSpelling_wrapper"
type clang_ext_target_spelling =
  | GNU_target 
  | CXX11_gnu_target 
  | C2x_gnu_target 
  | SpellingNotCalculated [@@deriving refl]
external ext_target_get_spelling :
  cxcursor -> clang_ext_target_spelling =
    "clang_ext_Target_getSpelling_wrapper"
type clang_ext_targetclones_spelling =
  | GNU_target_clones 
  | CXX11_gnu_target_clones 
  | C2x_gnu_target_clones 
  | SpellingNotCalculated [@@deriving refl]
external ext_target_clones_get_spelling :
  cxcursor -> clang_ext_targetclones_spelling =
    "clang_ext_TargetClones_getSpelling_wrapper"
type clang_ext_testtypestate_spelling =
  | GNU_test_typestate 
  | CXX11_clang_test_typestate 
  | SpellingNotCalculated [@@deriving refl]
external ext_test_typestate_get_spelling :
  cxcursor -> clang_ext_testtypestate_spelling =
    "clang_ext_TestTypestate_getSpelling_wrapper"
type clang_ext_thiscall_spelling =
  | GNU_thiscall 
  | CXX11_gnu_thiscall 
  | C2x_gnu_thiscall 
  | Keyword_thiscall 
  | SpellingNotCalculated [@@deriving refl]
external ext_this_call_get_spelling :
  cxcursor -> clang_ext_thiscall_spelling =
    "clang_ext_ThisCall_getSpelling_wrapper"
type clang_ext_transparentunion_spelling =
  | GNU_transparent_union 
  | CXX11_gnu_transparent_union 
  | C2x_gnu_transparent_union 
  | SpellingNotCalculated [@@deriving refl]
external ext_transparent_union_get_spelling :
  cxcursor -> clang_ext_transparentunion_spelling =
    "clang_ext_TransparentUnion_getSpelling_wrapper"
type clang_ext_trivialabi_spelling =
  | GNU_trivial_abi 
  | CXX11_clang_trivial_abi 
  | SpellingNotCalculated [@@deriving refl]
external ext_trivial_abi_get_spelling :
  cxcursor -> clang_ext_trivialabi_spelling =
    "clang_ext_TrivialABI_getSpelling_wrapper"
type clang_ext_tryacquirecapability_spelling =
  | GNU_try_acquire_capability 
  | CXX11_clang_try_acquire_capability 
  | GNU_try_acquire_shared_capability 
  | CXX11_clang_try_acquire_shared_capability 
  | SpellingNotCalculated [@@deriving refl]
external ext_try_acquire_capability_get_spelling :
  cxcursor -> clang_ext_tryacquirecapability_spelling =
    "clang_ext_TryAcquireCapability_getSpelling_wrapper"
type clang_ext_typetagfordatatype_spelling =
  | GNU_type_tag_for_datatype 
  | CXX11_clang_type_tag_for_datatype 
  | C2x_clang_type_tag_for_datatype 
  | SpellingNotCalculated [@@deriving refl]
external ext_type_tag_for_datatype_get_spelling :
  cxcursor -> clang_ext_typetagfordatatype_spelling =
    "clang_ext_TypeTagForDatatype_getSpelling_wrapper"
type clang_ext_typevisibility_spelling =
  | GNU_type_visibility 
  | CXX11_clang_type_visibility 
  | C2x_clang_type_visibility 
  | SpellingNotCalculated [@@deriving refl]
external ext_type_visibility_get_spelling :
  cxcursor -> clang_ext_typevisibility_spelling =
    "clang_ext_TypeVisibility_getSpelling_wrapper"
type clang_ext_unavailable_spelling =
  | GNU_unavailable 
  | CXX11_clang_unavailable 
  | C2x_clang_unavailable 
  | SpellingNotCalculated [@@deriving refl]
external ext_unavailable_get_spelling :
  cxcursor -> clang_ext_unavailable_spelling =
    "clang_ext_Unavailable_getSpelling_wrapper"
type clang_ext_uninitialized_spelling =
  | GNU_uninitialized 
  | CXX11_clang_uninitialized 
  | SpellingNotCalculated [@@deriving refl]
external ext_uninitialized_get_spelling :
  cxcursor -> clang_ext_uninitialized_spelling =
    "clang_ext_Uninitialized_getSpelling_wrapper"
type clang_ext_unlikely_spelling =
  | CXX11_unlikely 
  | C2x_clang_unlikely 
  | SpellingNotCalculated [@@deriving refl]
external ext_unlikely_get_spelling :
  cxcursor -> clang_ext_unlikely_spelling =
    "clang_ext_Unlikely_getSpelling_wrapper"
type clang_ext_unused_spelling =
  | CXX11_maybe_unused 
  | GNU_unused 
  | CXX11_gnu_unused 
  | C2x_gnu_unused 
  | C2x_maybe_unused 
  | SpellingNotCalculated [@@deriving refl]
external ext_unused_get_spelling :
  cxcursor -> clang_ext_unused_spelling =
    "clang_ext_Unused_getSpelling_wrapper"
type clang_ext_usehandle_spelling =
  | GNU_use_handle 
  | CXX11_clang_use_handle 
  | C2x_clang_use_handle 
  | SpellingNotCalculated [@@deriving refl]
external ext_use_handle_get_spelling :
  cxcursor -> clang_ext_usehandle_spelling =
    "clang_ext_UseHandle_getSpelling_wrapper"
type clang_ext_used_spelling =
  | GNU_used 
  | CXX11_gnu_used 
  | C2x_gnu_used 
  | SpellingNotCalculated [@@deriving refl]
external ext_used_get_spelling :
  cxcursor -> clang_ext_used_spelling = "clang_ext_Used_getSpelling_wrapper"
type clang_ext_usingifexists_spelling =
  | GNU_using_if_exists 
  | CXX11_clang_using_if_exists 
  | SpellingNotCalculated [@@deriving refl]
external ext_using_if_exists_get_spelling :
  cxcursor -> clang_ext_usingifexists_spelling =
    "clang_ext_UsingIfExists_getSpelling_wrapper"
type clang_ext_uuid_spelling =
  | Declspec_uuid 
  | Microsoft_uuid 
  | SpellingNotCalculated [@@deriving refl]
external ext_uuid_get_spelling :
  cxcursor -> clang_ext_uuid_spelling = "clang_ext_Uuid_getSpelling_wrapper"
type clang_ext_vecreturn_spelling =
  | GNU_vecreturn 
  | CXX11_clang_vecreturn 
  | SpellingNotCalculated [@@deriving refl]
external ext_vec_return_get_spelling :
  cxcursor -> clang_ext_vecreturn_spelling =
    "clang_ext_VecReturn_getSpelling_wrapper"
type clang_ext_vectorcall_spelling =
  | GNU_vectorcall 
  | CXX11_clang_vectorcall 
  | C2x_clang_vectorcall 
  | Keyword_vectorcall 
  | SpellingNotCalculated [@@deriving refl]
external ext_vector_call_get_spelling :
  cxcursor -> clang_ext_vectorcall_spelling =
    "clang_ext_VectorCall_getSpelling_wrapper"
type clang_ext_visibility_spelling =
  | GNU_visibility 
  | CXX11_gnu_visibility 
  | C2x_gnu_visibility 
  | SpellingNotCalculated [@@deriving refl]
external ext_visibility_get_spelling :
  cxcursor -> clang_ext_visibility_spelling =
    "clang_ext_Visibility_getSpelling_wrapper"
type clang_ext_warnunused_spelling =
  | GNU_warn_unused 
  | CXX11_gnu_warn_unused 
  | C2x_gnu_warn_unused 
  | SpellingNotCalculated [@@deriving refl]
external ext_warn_unused_get_spelling :
  cxcursor -> clang_ext_warnunused_spelling =
    "clang_ext_WarnUnused_getSpelling_wrapper"
type clang_ext_warnunusedresult_spelling =
  | CXX11_nodiscard 
  | C2x_nodiscard 
  | CXX11_clang_warn_unused_result 
  | GNU_warn_unused_result 
  | CXX11_gnu_warn_unused_result 
  | C2x_gnu_warn_unused_result 
  | SpellingNotCalculated [@@deriving refl]
external ext_warn_unused_result_get_spelling :
  cxcursor -> clang_ext_warnunusedresult_spelling =
    "clang_ext_WarnUnusedResult_getSpelling_wrapper"
type clang_ext_weak_spelling =
  | GNU_weak 
  | CXX11_gnu_weak 
  | C2x_gnu_weak 
  | SpellingNotCalculated [@@deriving refl]
external ext_weak_get_spelling :
  cxcursor -> clang_ext_weak_spelling = "clang_ext_Weak_getSpelling_wrapper"
type clang_ext_weakimport_spelling =
  | GNU_weak_import 
  | CXX11_clang_weak_import 
  | C2x_clang_weak_import 
  | SpellingNotCalculated [@@deriving refl]
external ext_weak_import_get_spelling :
  cxcursor -> clang_ext_weakimport_spelling =
    "clang_ext_WeakImport_getSpelling_wrapper"
type clang_ext_weakref_spelling =
  | GNU_weakref 
  | CXX11_gnu_weakref 
  | C2x_gnu_weakref 
  | SpellingNotCalculated [@@deriving refl]
external ext_weak_ref_get_spelling :
  cxcursor -> clang_ext_weakref_spelling =
    "clang_ext_WeakRef_getSpelling_wrapper"
type clang_ext_webassemblyexportname_spelling =
  | GNU_export_name 
  | CXX11_clang_export_name 
  | C2x_clang_export_name 
  | SpellingNotCalculated [@@deriving refl]
external ext_web_assembly_export_name_get_spelling :
  cxcursor -> clang_ext_webassemblyexportname_spelling =
    "clang_ext_WebAssemblyExportName_getSpelling_wrapper"
type clang_ext_webassemblyimportmodule_spelling =
  | GNU_import_module 
  | CXX11_clang_import_module 
  | C2x_clang_import_module 
  | SpellingNotCalculated [@@deriving refl]
external ext_web_assembly_import_module_get_spelling :
  cxcursor -> clang_ext_webassemblyimportmodule_spelling =
    "clang_ext_WebAssemblyImportModule_getSpelling_wrapper"
type clang_ext_webassemblyimportname_spelling =
  | GNU_import_name 
  | CXX11_clang_import_name 
  | C2x_clang_import_name 
  | SpellingNotCalculated [@@deriving refl]
external ext_web_assembly_import_name_get_spelling :
  cxcursor -> clang_ext_webassemblyimportname_spelling =
    "clang_ext_WebAssemblyImportName_getSpelling_wrapper"
type clang_ext_x86forcealignargpointer_spelling =
  | GNU_force_align_arg_pointer 
  | CXX11_gnu_force_align_arg_pointer 
  | C2x_gnu_force_align_arg_pointer 
  | SpellingNotCalculated [@@deriving refl]
external ext_x86_force_align_arg_pointer_get_spelling :
  cxcursor -> clang_ext_x86forcealignargpointer_spelling =
    "clang_ext_X86ForceAlignArgPointer_getSpelling_wrapper"
type clang_ext_xrayinstrument_spelling =
  | GNU_xray_always_instrument 
  | CXX11_clang_xray_always_instrument 
  | C2x_clang_xray_always_instrument 
  | GNU_xray_never_instrument 
  | CXX11_clang_xray_never_instrument 
  | C2x_clang_xray_never_instrument 
  | SpellingNotCalculated [@@deriving refl]
external ext_xray_instrument_get_spelling :
  cxcursor -> clang_ext_xrayinstrument_spelling =
    "clang_ext_XRayInstrument_getSpelling_wrapper"
type clang_ext_xraylogargs_spelling =
  | GNU_xray_log_args 
  | CXX11_clang_xray_log_args 
  | C2x_clang_xray_log_args 
  | SpellingNotCalculated [@@deriving refl]
external ext_xray_log_args_get_spelling :
  cxcursor -> clang_ext_xraylogargs_spelling =
    "clang_ext_XRayLogArgs_getSpelling_wrapper"
external ext_ompdeclare_simd_decl_attr_get_uniforms_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareSimdDeclAttr_getUniforms_Size_wrapper"
type clang_ext_returntypestateattr_consumedstate =
  | Unknown 
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_return_typestate_attr_get_state :
  cxcursor -> clang_ext_returntypestateattr_consumedstate =
    "clang_ext_ReturnTypestateAttr_getState_wrapper"
external ext_attrs_get_aliasee_length :
  cxcursor -> int = "clang_ext_Attrs_getAliaseeLength_wrapper"
external ext_obj_cruntime_name_attr_get_metadata_name :
  cxcursor -> string =
    "clang_ext_ObjCRuntimeNameAttr_getMetadataName_wrapper"
type clang_ext_swifterrorattr_conventionkind =
  | None 
  | NonNullError 
  | NullResult 
  | ZeroResult 
  | NonZeroResult [@@deriving refl]
external ext_swift_error_attr_get_convention :
  cxcursor -> clang_ext_swifterrorattr_conventionkind =
    "clang_ext_SwiftErrorAttr_getConvention_wrapper"
type clang_ext_swiftasyncerrorattr_conventionkind =
  | None 
  | NonNullError 
  | ZeroArgument 
  | NonZeroArgument [@@deriving refl]
external ext_swift_async_error_attr_get_convention :
  cxcursor -> clang_ext_swiftasyncerrorattr_conventionkind =
    "clang_ext_SwiftAsyncErrorAttr_getConvention_wrapper"
external ext_ifunc_attr_get_resolver :
  cxcursor -> string = "clang_ext_IFuncAttr_getResolver_wrapper"
external ext_patchable_function_entry_attr_get_offset :
  cxcursor -> int = "clang_ext_PatchableFunctionEntryAttr_getOffset_wrapper"
external ext_assume_aligned_attr_get_offset :
  cxcursor -> cxcursor = "clang_ext_AssumeAlignedAttr_getOffset_wrapper"
external ext_btftype_tag_attr_get_btftype_tag_length :
  cxcursor -> int = "clang_ext_BTFTypeTagAttr_getBTFTypeTagLength_wrapper"
external ext_web_assembly_import_name_attr_get_import_name_length :
  cxcursor -> int =
    "clang_ext_WebAssemblyImportNameAttr_getImportNameLength_wrapper"
external ext_sentinel_attr_get_sentinel :
  cxcursor -> int = "clang_ext_SentinelAttr_getSentinel_wrapper"
external ext_attrs_get_success_value :
  cxcursor -> cxcursor = "clang_ext_Attrs_getSuccessValue_wrapper"
external ext_attrs_get_cpus_size :
  cxcursor -> int = "clang_ext_Attrs_getCpus_Size_wrapper"
external ext_tlsmodel_attr_get_model_length :
  cxcursor -> int = "clang_ext_TLSModelAttr_getModelLength_wrapper"
type clang_ext_paramtypestateattr_consumedstate =
  | Unknown 
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_param_typestate_attr_get_param_state :
  cxcursor -> clang_ext_paramtypestateattr_consumedstate =
    "clang_ext_ParamTypestateAttr_getParamState_wrapper"
external ext_external_source_symbol_attr_get_generated_declaration :
  cxcursor -> bool =
    "clang_ext_ExternalSourceSymbolAttr_getGeneratedDeclaration_wrapper"
external ext_suppress_attr_get_diagnostic_identifiers :
  cxcursor -> (string -> unit) -> unit =
    "clang_ext_SuppressAttr_getDiagnosticIdentifiers_wrapper"
external ext_attrs_get_deref_type :
  cxcursor -> clang_ext_typeloc = "clang_ext_Attrs_getDerefType_wrapper"
external ext_ompdeclare_variant_attr_get_adjust_args_need_device_ptr_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareVariantAttr_getAdjustArgsNeedDevicePtr_Size_wrapper"
external ext_type_tag_for_datatype_attr_get_matching_ctype :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_TypeTagForDatatypeAttr_getMatchingCType_wrapper"
external ext_annotate_attr_get_annotation_length :
  cxcursor -> int = "clang_ext_AnnotateAttr_getAnnotationLength_wrapper"
external ext_layout_version_attr_get_version :
  cxcursor -> int = "clang_ext_LayoutVersionAttr_getVersion_wrapper"
external ext_sentinel_attr_get_null_pos :
  cxcursor -> int = "clang_ext_SentinelAttr_getNullPos_wrapper"
external ext_ompdeclare_simd_decl_attr_get_aligneds :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getAligneds_wrapper"
external ext_swift_async_attr_get_completion_handler_index :
  cxcursor -> int =
    "clang_ext_SwiftAsyncAttr_getCompletionHandlerIndex_wrapper"
external ext_attrs_get_args_size :
  cxcursor -> int = "clang_ext_Attrs_getArgs_Size_wrapper"
external ext_cudalaunch_bounds_attr_get_min_blocks :
  cxcursor -> cxcursor =
    "clang_ext_CUDALaunchBoundsAttr_getMinBlocks_wrapper"
external ext_btfdecl_tag_attr_get_btfdecl_tag_length :
  cxcursor -> int = "clang_ext_BTFDeclTagAttr_getBTFDeclTagLength_wrapper"
external ext_swift_bridge_attr_get_swift_type_length :
  cxcursor -> int = "clang_ext_SwiftBridgeAttr_getSwiftTypeLength_wrapper"
external ext_external_source_symbol_attr_get_defined_in_length :
  cxcursor -> int =
    "clang_ext_ExternalSourceSymbolAttr_getDefinedInLength_wrapper"
external ext_format_attr_get_type :
  cxcursor -> string = "clang_ext_FormatAttr_getType_wrapper"
external ext_pass_object_size_attr_get_type :
  cxcursor -> int = "clang_ext_PassObjectSizeAttr_getType_wrapper"
type clang_ext_blocksattr_blocktype =
  | ByRef [@@deriving refl]
external ext_blocks_attr_get_type :
  cxcursor -> clang_ext_blocksattr_blocktype =
    "clang_ext_BlocksAttr_getType_wrapper"
external ext_assumption_attr_get_assumption_length :
  cxcursor -> int = "clang_ext_AssumptionAttr_getAssumptionLength_wrapper"
external ext_asm_label_attr_get_label :
  cxcursor -> string = "clang_ext_AsmLabelAttr_getLabel_wrapper"
external ext_swift_attr_attr_get_attribute :
  cxcursor -> string = "clang_ext_SwiftAttrAttr_getAttribute_wrapper"
external ext_availability_attr_get_platform :
  cxcursor -> string = "clang_ext_AvailabilityAttr_getPlatform_wrapper"
external ext_attrs_get_max :
  cxcursor -> cxcursor = "clang_ext_Attrs_getMax_wrapper"
external ext_target_attr_get_features_str :
  cxcursor -> string = "clang_ext_TargetAttr_getFeaturesStr_wrapper"
external ext_callable_when_attr_get_callable_states_size :
  cxcursor -> int =
    "clang_ext_CallableWhenAttr_getCallableStates_Size_wrapper"
type clang_ext_testtypestateattr_consumedstate =
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_test_typestate_attr_get_test_state :
  cxcursor -> clang_ext_testtypestateattr_consumedstate =
    "clang_ext_TestTypestateAttr_getTestState_wrapper"
external ext_ompcapture_kind_attr_get_capture_kind_val :
  cxcursor -> int = "clang_ext_OMPCaptureKindAttr_getCaptureKindVal_wrapper"
external ext_init_priority_attr_get_priority :
  cxcursor -> int = "clang_ext_InitPriorityAttr_getPriority_wrapper"
external ext_attrs_get_priority :
  cxcursor -> int = "clang_ext_Attrs_getPriority_wrapper"
type clang_ext_ompdeclaretargetdeclattr_maptypety =
  | To 
  | Link [@@deriving refl]
external ext_ompdeclare_target_decl_attr_get_map_type :
  cxcursor -> clang_ext_ompdeclaretargetdeclattr_maptypety =
    "clang_ext_OMPDeclareTargetDeclAttr_getMapType_wrapper"
external ext_attrs_get_ydim :
  cxcursor -> int = "clang_ext_Attrs_getYDim_wrapper"
external ext_cleanup_attr_get_function_decl :
  cxcursor -> clang_ext_declarationname =
    "clang_ext_CleanupAttr_getFunctionDecl_wrapper"
type clang_ext_versiontuple =
  {
  major: int ;
  minor: int ;
  subminor: int ;
  build: int }[@@deriving refl]
external ext_availability_attr_get_obsoleted :
  cxcursor -> clang_ext_versiontuple =
    "clang_ext_AvailabilityAttr_getObsoleted_wrapper"
external ext_init_seg_attr_get_section :
  cxcursor -> string = "clang_ext_InitSegAttr_getSection_wrapper"
external ext_btfdecl_tag_attr_get_btfdecl_tag :
  cxcursor -> string = "clang_ext_BTFDeclTagAttr_getBTFDeclTag_wrapper"
external ext_external_source_symbol_attr_get_defined_in :
  cxcursor -> string =
    "clang_ext_ExternalSourceSymbolAttr_getDefinedIn_wrapper"
external ext_alloc_size_attr_get_num_elems_param :
  cxcursor -> int = "clang_ext_AllocSizeAttr_getNumElemsParam_wrapper"
external ext_ifunc_attr_get_resolver_length :
  cxcursor -> int = "clang_ext_IFuncAttr_getResolverLength_wrapper"
external ext_asm_label_attr_get_label_length :
  cxcursor -> int = "clang_ext_AsmLabelAttr_getLabelLength_wrapper"
external ext_abi_tag_attr_get_tags_size :
  cxcursor -> int = "clang_ext_AbiTagAttr_getTags_Size_wrapper"
external ext_cudalaunch_bounds_attr_get_max_threads :
  cxcursor -> cxcursor =
    "clang_ext_CUDALaunchBoundsAttr_getMaxThreads_wrapper"
external ext_attrs_get_builtin_name :
  cxcursor -> string = "clang_ext_Attrs_getBuiltinName_wrapper"
external ext_web_assembly_import_module_attr_get_import_module :
  cxcursor -> string =
    "clang_ext_WebAssemblyImportModuleAttr_getImportModule_wrapper"
type clang_ext_swiftnewtypeattr_newtypekind =
  | Struct 
  | Enum [@@deriving refl]
external ext_swift_new_type_attr_get_newtype_kind :
  cxcursor -> clang_ext_swiftnewtypeattr_newtypekind =
    "clang_ext_SwiftNewTypeAttr_getNewtypeKind_wrapper"
external ext_no_sanitize_attr_get_sanitizers_size :
  cxcursor -> int = "clang_ext_NoSanitizeAttr_getSanitizers_Size_wrapper"
external ext_callback_attr_get_encoding_size :
  cxcursor -> int = "clang_ext_CallbackAttr_getEncoding_Size_wrapper"
external ext_attrs_get_xdim :
  cxcursor -> int = "clang_ext_Attrs_getXDim_wrapper"
external ext_uuid_attr_get_guid_decl :
  cxcursor -> cxcursor = "clang_ext_UuidAttr_getGuidDecl_wrapper"
external ext_attrs_get_aliasee :
  cxcursor -> string = "clang_ext_Attrs_getAliasee_wrapper"
external ext_attrs_get_handle_type :
  cxcursor -> string = "clang_ext_Attrs_getHandleType_wrapper"
external ext_web_assembly_import_module_attr_get_import_module_length :
  cxcursor -> int =
    "clang_ext_WebAssemblyImportModuleAttr_getImportModuleLength_wrapper"
external ext_ompdeclare_simd_decl_attr_get_linears :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getLinears_wrapper"
external ext_availability_attr_get_deprecated :
  cxcursor -> clang_ext_versiontuple =
    "clang_ext_AvailabilityAttr_getDeprecated_wrapper"
external ext_preferred_name_attr_get_typedef_type :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_PreferredNameAttr_getTypedefType_wrapper"
external ext_diagnose_as_builtin_attr_get_arg_indices :
  cxcursor -> (int -> unit) -> unit =
    "clang_ext_DiagnoseAsBuiltinAttr_getArgIndices_wrapper"
external ext_target_clones_attr_get_features_strs_size :
  cxcursor -> int = "clang_ext_TargetClonesAttr_getFeaturesStrs_Size_wrapper"
external ext_error_attr_get_user_diagnostic_length :
  cxcursor -> int = "clang_ext_ErrorAttr_getUserDiagnosticLength_wrapper"
external ext_web_assembly_export_name_attr_get_export_name :
  cxcursor -> string =
    "clang_ext_WebAssemblyExportNameAttr_getExportName_wrapper"
external ext_argument_with_type_tag_attr_get_is_pointer :
  cxcursor -> bool = "clang_ext_ArgumentWithTypeTagAttr_getIsPointer_wrapper"
external ext_uuid_attr_get_guid_length :
  cxcursor -> int = "clang_ext_UuidAttr_getGuidLength_wrapper"
external ext_ompdeclare_simd_decl_attr_get_aligneds_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareSimdDeclAttr_getAligneds_Size_wrapper"
external ext_attrs_get_message_length :
  cxcursor -> int = "clang_ext_Attrs_getMessageLength_wrapper"
type clang_ext_pcsattr_pcstype =
  | AAPCS 
  | AAPCS_VFP [@@deriving refl]
external ext_pcs_attr_get_pcs :
  cxcursor -> clang_ext_pcsattr_pcstype = "clang_ext_PcsAttr_getPCS_wrapper"
external ext_callback_attr_get_encoding :
  cxcursor -> (int -> unit) -> unit =
    "clang_ext_CallbackAttr_getEncoding_wrapper"
external ext_attrs_get_argument_kind :
  cxcursor -> string = "clang_ext_Attrs_getArgumentKind_wrapper"
external ext_availability_attr_get_unavailable :
  cxcursor -> bool = "clang_ext_AvailabilityAttr_getUnavailable_wrapper"
type clang_ext_omptraitinfo
external ext_ompdeclare_variant_attr_get_trait_infos :
  cxcursor -> clang_ext_omptraitinfo =
    "clang_ext_OMPDeclareVariantAttr_getTraitInfos_wrapper"
external ext_ompallocate_decl_attr_get_allocator :
  cxcursor -> cxcursor = "clang_ext_OMPAllocateDeclAttr_getAllocator_wrapper"
external ext_annotate_attr_get_annotation :
  cxcursor -> string = "clang_ext_AnnotateAttr_getAnnotation_wrapper"
external ext_ompdeclare_variant_attr_get_variant_func_ref :
  cxcursor -> cxcursor =
    "clang_ext_OMPDeclareVariantAttr_getVariantFuncRef_wrapper"
external ext_no_builtin_attr_get_builtin_names_size :
  cxcursor -> int = "clang_ext_NoBuiltinAttr_getBuiltinNames_Size_wrapper"
external ext_target_clones_attr_get_features_strs :
  cxcursor -> (string -> unit) -> unit =
    "clang_ext_TargetClonesAttr_getFeaturesStrs_wrapper"
external ext_attrs_get_replacement :
  cxcursor -> string = "clang_ext_Attrs_getReplacement_wrapper"
external ext_amdgpunum_sgprattr_get_num_sgpr :
  cxcursor -> int = "clang_ext_AMDGPUNumSGPRAttr_getNumSGPR_wrapper"
external ext_obj_cbridge_related_attr_get_instance_method :
  cxcursor -> string =
    "clang_ext_ObjCBridgeRelatedAttr_getInstanceMethod_wrapper"
external ext_ompdeclare_variant_attr_get_adjust_args_need_device_ptr :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareVariantAttr_getAdjustArgsNeedDevicePtr_wrapper"
external ext_ompdeclare_simd_decl_attr_get_simdlen :
  cxcursor -> cxcursor =
    "clang_ext_OMPDeclareSimdDeclAttr_getSimdlen_wrapper"
external ext_target_attr_get_features_str_length :
  cxcursor -> int = "clang_ext_TargetAttr_getFeaturesStrLength_wrapper"
external ext_aligned_attr_get_alignment_expr :
  cxcursor -> cxcursor = "clang_ext_AlignedAttr_getAlignmentExpr_wrapper"
external ext_ompdeclare_simd_decl_attr_get_steps :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getSteps_wrapper"
external ext_tlsmodel_attr_get_model :
  cxcursor -> string = "clang_ext_TLSModelAttr_getModel_wrapper"
external ext_ompdeclare_simd_decl_attr_get_modifiers :
  cxcursor -> (int -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getModifiers_wrapper"
external ext_format_attr_get_first_arg :
  cxcursor -> int = "clang_ext_FormatAttr_getFirstArg_wrapper"
external ext_amdgpunum_vgprattr_get_num_vgpr :
  cxcursor -> int = "clang_ext_AMDGPUNumVGPRAttr_getNumVGPR_wrapper"
type clang_ext_mipsinterruptattr_interrupttype =
  | Sw0 
  | Sw1 
  | Hw0 
  | Hw1 
  | Hw2 
  | Hw3 
  | Hw4 
  | Hw5 
  | Eic [@@deriving refl]
external ext_mips_interrupt_attr_get_interrupt :
  cxcursor -> clang_ext_mipsinterruptattr_interrupttype =
    "clang_ext_MipsInterruptAttr_getInterrupt_wrapper"
type clang_ext_arminterruptattr_interrupttype =
  | IRQ 
  | FIQ 
  | SWI 
  | ABORT 
  | UNDEF 
  | Generic [@@deriving refl]
external ext_arminterrupt_attr_get_interrupt :
  cxcursor -> clang_ext_arminterruptattr_interrupttype =
    "clang_ext_ARMInterruptAttr_getInterrupt_wrapper"
type clang_ext_riscvinterruptattr_interrupttype =
  | User 
  | Supervisor 
  | Machine [@@deriving refl]
external ext_riscvinterrupt_attr_get_interrupt :
  cxcursor -> clang_ext_riscvinterruptattr_interrupttype =
    "clang_ext_RISCVInterruptAttr_getInterrupt_wrapper"
external ext_attrs_get_min :
  cxcursor -> cxcursor = "clang_ext_Attrs_getMin_wrapper"
type clang_ext_enumextensibilityattr_kind =
  | Closed 
  | Open [@@deriving refl]
external ext_enum_extensibility_attr_get_extensibility :
  cxcursor -> clang_ext_enumextensibilityattr_kind =
    "clang_ext_EnumExtensibilityAttr_getExtensibility_wrapper"
external ext_alloc_align_attr_get_param_index :
  cxcursor -> int = "clang_ext_AllocAlignAttr_getParamIndex_wrapper"
external ext_diagnose_as_builtin_attr_get_arg_indices_size :
  cxcursor -> int =
    "clang_ext_DiagnoseAsBuiltinAttr_getArgIndices_Size_wrapper"
external ext_availability_attr_get_introduced :
  cxcursor -> clang_ext_versiontuple =
    "clang_ext_AvailabilityAttr_getIntroduced_wrapper"
external ext_max_field_alignment_attr_get_alignment :
  cxcursor -> int = "clang_ext_MaxFieldAlignmentAttr_getAlignment_wrapper"
external ext_attrs_get_alignment :
  cxcursor -> cxcursor = "clang_ext_Attrs_getAlignment_wrapper"
external ext_address_space_attr_get_address_space :
  cxcursor -> int = "clang_ext_AddressSpaceAttr_getAddressSpace_wrapper"
external ext_mode_attr_get_mode :
  cxcursor -> string = "clang_ext_ModeAttr_getMode_wrapper"
external ext_attrs_get_arg :
  cxcursor -> cxcursor = "clang_ext_Attrs_getArg_wrapper"
external ext_attrs_get_cpus :
  cxcursor -> (string -> unit) -> unit = "clang_ext_Attrs_getCpus_wrapper"
external ext_btftype_tag_attr_get_btftype_tag :
  cxcursor -> string = "clang_ext_BTFTypeTagAttr_getBTFTypeTag_wrapper"
external ext_open_clintel_reqd_sub_group_size_attr_get_sub_group_size :
  cxcursor -> int =
    "clang_ext_OpenCLIntelReqdSubGroupSizeAttr_getSubGroupSize_wrapper"
external ext_argument_with_type_tag_attr_get_argument_idx :
  cxcursor -> int =
    "clang_ext_ArgumentWithTypeTagAttr_getArgumentIdx_wrapper"
external ext_availability_attr_get_strict :
  cxcursor -> bool = "clang_ext_AvailabilityAttr_getStrict_wrapper"
type clang_ext_cfguardattr_guardarg =
  | Nocf [@@deriving refl]
external ext_cfguard_attr_get_guard :
  cxcursor -> clang_ext_cfguardattr_guardarg =
    "clang_ext_CFGuardAttr_getGuard_wrapper"
external ext_ownership_attr_get_module :
  cxcursor -> string = "clang_ext_OwnershipAttr_getModule_wrapper"
external ext_min_vector_width_attr_get_vector_width :
  cxcursor -> int = "clang_ext_MinVectorWidthAttr_getVectorWidth_wrapper"
external ext_type_tag_for_datatype_attr_get_layout_compatible :
  cxcursor -> bool =
    "clang_ext_TypeTagForDatatypeAttr_getLayoutCompatible_wrapper"
external ext_ompdeclare_variant_attr_get_adjust_args_nothing :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareVariantAttr_getAdjustArgsNothing_wrapper"
external ext_init_seg_attr_get_section_length :
  cxcursor -> int = "clang_ext_InitSegAttr_getSectionLength_wrapper"
external ext_vec_type_hint_attr_get_type_hint :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_VecTypeHintAttr_getTypeHint_wrapper"
external ext_attrs_get_tcbname_length :
  cxcursor -> int = "clang_ext_Attrs_getTCBNameLength_wrapper"
external ext_ompdeclare_variant_attr_get_adjust_args_nothing_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareVariantAttr_getAdjustArgsNothing_Size_wrapper"
external ext_external_source_symbol_attr_get_language_length :
  cxcursor -> int =
    "clang_ext_ExternalSourceSymbolAttr_getLanguageLength_wrapper"
external ext_obj_cruntime_name_attr_get_metadata_name_length :
  cxcursor -> int =
    "clang_ext_ObjCRuntimeNameAttr_getMetadataNameLength_wrapper"
type clang_ext_consumableattr_consumedstate =
  | Unknown 
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_consumable_attr_get_default_state :
  cxcursor -> clang_ext_consumableattr_consumedstate =
    "clang_ext_ConsumableAttr_getDefaultState_wrapper"
external ext_builtin_attr_get_id :
  cxcursor -> int = "clang_ext_BuiltinAttr_getID_wrapper"
external ext_assumption_attr_get_assumption :
  cxcursor -> string = "clang_ext_AssumptionAttr_getAssumption_wrapper"
external ext_attrs_get_bridged_type :
  cxcursor -> string = "clang_ext_Attrs_getBridgedType_wrapper"
external ext_ompdeclare_simd_decl_attr_get_modifiers_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareSimdDeclAttr_getModifiers_Size_wrapper"
external ext_swift_attr_attr_get_attribute_length :
  cxcursor -> int = "clang_ext_SwiftAttrAttr_getAttributeLength_wrapper"
type clang_ext_settypestateattr_consumedstate =
  | Unknown 
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_set_typestate_attr_get_new_state :
  cxcursor -> clang_ext_settypestateattr_consumedstate =
    "clang_ext_SetTypestateAttr_getNewState_wrapper"
external ext_obj_cbridge_related_attr_get_class_method :
  cxcursor -> string =
    "clang_ext_ObjCBridgeRelatedAttr_getClassMethod_wrapper"
external ext_ompreferenced_var_attr_get_ref :
  cxcursor -> cxcursor = "clang_ext_OMPReferencedVarAttr_getRef_wrapper"
external ext_alloc_size_attr_get_elem_size_param :
  cxcursor -> int = "clang_ext_AllocSizeAttr_getElemSizeParam_wrapper"
type clang_ext_visibilityattr_visibilitytype =
  | Default 
  | Hidden 
  | Protected [@@deriving refl]
external ext_visibility_attr_get_visibility :
  cxcursor -> clang_ext_visibilityattr_visibilitytype =
    "clang_ext_VisibilityAttr_getVisibility_wrapper"
type clang_ext_typevisibilityattr_visibilitytype =
  | Default 
  | Hidden 
  | Protected [@@deriving refl]
external ext_type_visibility_attr_get_visibility :
  cxcursor -> clang_ext_typevisibilityattr_visibilitytype =
    "clang_ext_TypeVisibilityAttr_getVisibility_wrapper"
external ext_external_source_symbol_attr_get_language :
  cxcursor -> string =
    "clang_ext_ExternalSourceSymbolAttr_getLanguage_wrapper"
external ext_attrs_get_replacement_length :
  cxcursor -> int = "clang_ext_Attrs_getReplacementLength_wrapper"
external ext_ompdeclare_simd_decl_attr_get_alignments_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareSimdDeclAttr_getAlignments_Size_wrapper"
external ext_ompdeclare_simd_decl_attr_get_linears_size :
  cxcursor -> int =
    "clang_ext_OMPDeclareSimdDeclAttr_getLinears_Size_wrapper"
external ext_nserror_domain_attr_get_error_domain :
  cxcursor -> cxcursor = "clang_ext_NSErrorDomainAttr_getErrorDomain_wrapper"
external ext_error_attr_get_user_diagnostic :
  cxcursor -> string = "clang_ext_ErrorAttr_getUserDiagnostic_wrapper"
external ext_xray_log_args_attr_get_argument_count :
  cxcursor -> int = "clang_ext_XRayLogArgsAttr_getArgumentCount_wrapper"
external ext_attrs_get_message :
  cxcursor -> string = "clang_ext_Attrs_getMessage_wrapper"
external ext_argument_with_type_tag_attr_get_type_tag_idx :
  cxcursor -> int = "clang_ext_ArgumentWithTypeTagAttr_getTypeTagIdx_wrapper"
external ext_uuid_attr_get_guid :
  cxcursor -> string = "clang_ext_UuidAttr_getGuid_wrapper"
external ext_attrs_get_zdim :
  cxcursor -> int = "clang_ext_Attrs_getZDim_wrapper"
external ext_attrs_get_handle_type_length :
  cxcursor -> int = "clang_ext_Attrs_getHandleTypeLength_wrapper"
external ext_ompdeclare_simd_decl_attr_get_uniforms :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getUniforms_wrapper"
type clang_ext_loophintattr_optiontype =
  | Vectorize 
  | VectorizeWidth 
  | Interleave 
  | InterleaveCount 
  | Unroll 
  | UnrollCount 
  | UnrollAndJam 
  | UnrollAndJamCount 
  | PipelineDisabled 
  | PipelineInitiationInterval 
  | Distribute 
  | VectorizePredicate [@@deriving refl]
external ext_loop_hint_attr_get_option :
  cxcursor -> clang_ext_loophintattr_optiontype =
    "clang_ext_LoopHintAttr_getOption_wrapper"
external ext_obj_cbridge_related_attr_get_related_class :
  cxcursor -> string =
    "clang_ext_ObjCBridgeRelatedAttr_getRelatedClass_wrapper"
external ext_web_assembly_import_name_attr_get_import_name :
  cxcursor -> string =
    "clang_ext_WebAssemblyImportNameAttr_getImportName_wrapper"
external ext_no_sanitize_attr_get_sanitizers :
  cxcursor -> (string -> unit) -> unit =
    "clang_ext_NoSanitizeAttr_getSanitizers_wrapper"
type clang_ext_callablewhenattr_consumedstate =
  | Unknown 
  | Consumed 
  | Unconsumed [@@deriving refl]
external ext_callable_when_attr_get_callable_states :
  cxcursor -> (clang_ext_callablewhenattr_consumedstate -> unit) -> unit =
    "clang_ext_CallableWhenAttr_getCallableStates_wrapper"
type clang_ext_ompdeclaresimddeclattr_branchstatety =
  | Undefined 
  | Inbranch 
  | Notinbranch [@@deriving refl]
external ext_ompdeclare_simd_decl_attr_get_branch_state :
  cxcursor -> clang_ext_ompdeclaresimddeclattr_branchstatety =
    "clang_ext_OMPDeclareSimdDeclAttr_getBranchState_wrapper"
external ext_asm_label_attr_get_is_literal_label :
  cxcursor -> bool = "clang_ext_AsmLabelAttr_getIsLiteralLabel_wrapper"
external ext_swift_bridge_attr_get_swift_type :
  cxcursor -> string = "clang_ext_SwiftBridgeAttr_getSwiftType_wrapper"
external ext_format_arg_attr_get_format_idx :
  cxcursor -> int = "clang_ext_FormatArgAttr_getFormatIdx_wrapper"
external ext_format_attr_get_format_idx :
  cxcursor -> int = "clang_ext_FormatAttr_getFormatIdx_wrapper"
external ext_type_tag_for_datatype_attr_get_must_be_null :
  cxcursor -> bool = "clang_ext_TypeTagForDatatypeAttr_getMustBeNull_wrapper"
type clang_ext_ompallocatedeclattr_allocatortypety =
  | OMPNullMemAlloc 
  | OMPDefaultMemAlloc 
  | OMPLargeCapMemAlloc 
  | OMPConstMemAlloc 
  | OMPHighBWMemAlloc 
  | OMPLowLatMemAlloc 
  | OMPCGroupMemAlloc 
  | OMPPTeamMemAlloc 
  | OMPThreadMemAlloc 
  | OMPUserDefinedMemAlloc [@@deriving refl]
external ext_ompallocate_decl_attr_get_allocator_type :
  cxcursor -> clang_ext_ompallocatedeclattr_allocatortypety =
    "clang_ext_OMPAllocateDeclAttr_getAllocatorType_wrapper"
external ext_attrs_get_name_length :
  cxcursor -> int = "clang_ext_Attrs_getNameLength_wrapper"
external ext_attrs_get_name :
  cxcursor -> string = "clang_ext_Attrs_getName_wrapper"
external ext_suppress_attr_get_diagnostic_identifiers_size :
  cxcursor -> int =
    "clang_ext_SuppressAttr_getDiagnosticIdentifiers_Size_wrapper"
external ext_ompdeclare_simd_decl_attr_get_steps_size :
  cxcursor -> int = "clang_ext_OMPDeclareSimdDeclAttr_getSteps_Size_wrapper"
external ext_web_assembly_export_name_attr_get_export_name_length :
  cxcursor -> int =
    "clang_ext_WebAssemblyExportNameAttr_getExportNameLength_wrapper"
external ext_ompdeclare_simd_decl_attr_get_alignments :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_OMPDeclareSimdDeclAttr_getAlignments_wrapper"
external ext_msvtor_disp_attr_get_vdm :
  cxcursor -> int = "clang_ext_MSVtorDispAttr_getVdm_wrapper"
external ext_attrs_get_cond :
  cxcursor -> cxcursor = "clang_ext_Attrs_getCond_wrapper"
external ext_iboutlet_collection_attr_get_interface :
  cxcursor -> clang_ext_typeloc =
    "clang_ext_IBOutletCollectionAttr_getInterface_wrapper"
type clang_ext_objcmethodfamilyattr_familykind =
  | None 
  | Alloc 
  | Copy 
  | Init 
  | MutableCopy 
  | New [@@deriving refl]
external ext_obj_cmethod_family_attr_get_family :
  cxcursor -> clang_ext_objcmethodfamilyattr_familykind =
    "clang_ext_ObjCMethodFamilyAttr_getFamily_wrapper"
external ext_swift_async_error_attr_get_handler_param_idx :
  cxcursor -> int =
    "clang_ext_SwiftAsyncErrorAttr_getHandlerParamIdx_wrapper"
type clang_ext_swiftasyncattr_kind =
  | None 
  | SwiftPrivate 
  | NotSwiftPrivate [@@deriving refl]
external ext_swift_async_attr_get_kind :
  cxcursor -> clang_ext_swiftasyncattr_kind =
    "clang_ext_SwiftAsyncAttr_getKind_wrapper"
external ext_attrs_get_kind :
  cxcursor -> string = "clang_ext_Attrs_getKind_wrapper"
external ext_patchable_function_entry_attr_get_count :
  cxcursor -> int = "clang_ext_PatchableFunctionEntryAttr_getCount_wrapper"
external ext_diagnose_as_builtin_attr_get_function :
  cxcursor -> clang_ext_declarationname =
    "clang_ext_DiagnoseAsBuiltinAttr_getFunction_wrapper"
external ext_abi_tag_attr_get_tags :
  cxcursor -> (string -> unit) -> unit =
    "clang_ext_AbiTagAttr_getTags_wrapper"
external ext_attrs_get_number :
  cxcursor -> int = "clang_ext_Attrs_getNumber_wrapper"
external ext_attrs_get_tcbname :
  cxcursor -> string = "clang_ext_Attrs_getTCBName_wrapper"
external ext_open_clunroll_hint_attr_get_unroll_hint :
  cxcursor -> int = "clang_ext_OpenCLUnrollHintAttr_getUnrollHint_wrapper"
external ext_no_builtin_attr_get_builtin_names :
  cxcursor -> (string -> unit) -> unit =
    "clang_ext_NoBuiltinAttr_getBuiltinNames_wrapper"
external ext_msinheritance_attr_get_best_case :
  cxcursor -> bool = "clang_ext_MSInheritanceAttr_getBestCase_wrapper"
external ext_non_null_attr_get_args :
  cxcursor -> (int -> unit) -> unit = "clang_ext_NonNullAttr_getArgs_wrapper"
external ext_acquire_capability_attr_get_args :
  cxcursor -> (cxcursor -> unit) -> unit =
    "clang_ext_AcquireCapabilityAttr_getArgs_wrapper"
