/* This file is auto-generated by generate_attrs tool.
 * It should not be modified by hand and it should not be versioned
 * (except by continuous integration on the dedicated bootstrap branch). */
enum
clang_ext_AcquireCapability_spelling clang_ext_AcquireCapability_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::AcquireCapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::AcquireCapabilityAttr ::Spelling ::GNU_acquire_capability:
  return clang_ext_AcquireCapability_GNU_acquire_capability;
  case
  clang::AcquireCapabilityAttr ::Spelling ::CXX11_clang_acquire_capability:
  return clang_ext_AcquireCapability_CXX11_clang_acquire_capability;
  case
  clang::AcquireCapabilityAttr ::Spelling ::GNU_acquire_shared_capability:
  return clang_ext_AcquireCapability_GNU_acquire_shared_capability;
  case
  clang::AcquireCapabilityAttr ::Spelling ::CXX11_clang_acquire_shared_capability:
  return clang_ext_AcquireCapability_CXX11_clang_acquire_shared_capability;
  case clang::AcquireCapabilityAttr ::Spelling ::GNU_exclusive_lock_function:
  return clang_ext_AcquireCapability_GNU_exclusive_lock_function;
  case clang::AcquireCapabilityAttr ::Spelling ::GNU_shared_lock_function:
  return clang_ext_AcquireCapability_GNU_shared_lock_function;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::AcquireCapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_AcquireCapability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_AcquireCapability_SpellingNotCalculated;}
enum
clang_ext_Aligned_spelling clang_ext_Aligned_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AlignedAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::AlignedAttr ::Spelling ::GNU_aligned:
  return clang_ext_Aligned_GNU_aligned;
  case clang::AlignedAttr ::Spelling ::CXX11_gnu_aligned:
  return clang_ext_Aligned_CXX11_gnu_aligned;
  case clang::AlignedAttr ::Spelling ::Declspec_align:
  return clang_ext_Aligned_Declspec_align;
  case clang::AlignedAttr ::Spelling ::Keyword_alignas:
  return clang_ext_Aligned_Keyword_alignas;
  case clang::AlignedAttr ::Spelling ::Keyword_Alignas:
  return clang_ext_Aligned_Keyword_Alignas;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::AlignedAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Aligned_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Aligned_SpellingNotCalculated;}
enum
clang_ext_AlwaysInline_spelling clang_ext_AlwaysInline_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AlwaysInlineAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::AlwaysInlineAttr ::Spelling ::GNU_always_inline:
  return clang_ext_AlwaysInline_GNU_always_inline;
  case clang::AlwaysInlineAttr ::Spelling ::CXX11_gnu_always_inline:
  return clang_ext_AlwaysInline_CXX11_gnu_always_inline;
  case clang::AlwaysInlineAttr ::Spelling ::Keyword_forceinline:
  return clang_ext_AlwaysInline_Keyword_forceinline;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::AlwaysInlineAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_AlwaysInline_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_AlwaysInline_SpellingNotCalculated;}
enum
clang_ext_ArgumentWithTypeTag_spelling
clang_ext_ArgumentWithTypeTag_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ArgumentWithTypeTagAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case
  clang::ArgumentWithTypeTagAttr ::Spelling ::GNU_argument_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_GNU_argument_with_type_tag;
  case
  clang::ArgumentWithTypeTagAttr ::Spelling ::CXX11_clang_argument_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_CXX11_clang_argument_with_type_tag;
  case
  clang::ArgumentWithTypeTagAttr ::Spelling ::C2x_clang_argument_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_C2x_clang_argument_with_type_tag;
  case clang::ArgumentWithTypeTagAttr ::Spelling ::GNU_pointer_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_GNU_pointer_with_type_tag;
  case
  clang::ArgumentWithTypeTagAttr ::Spelling ::CXX11_clang_pointer_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_CXX11_clang_pointer_with_type_tag;
  case
  clang::ArgumentWithTypeTagAttr ::Spelling ::C2x_clang_pointer_with_type_tag:
  return clang_ext_ArgumentWithTypeTag_C2x_clang_pointer_with_type_tag;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::ArgumentWithTypeTagAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_ArgumentWithTypeTag_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_ArgumentWithTypeTag_SpellingNotCalculated;}
enum
clang_ext_AssertCapability_spelling clang_ext_AssertCapability_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::AssertCapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::AssertCapabilityAttr ::Spelling ::GNU_assert_capability:
  return clang_ext_AssertCapability_GNU_assert_capability;
  case
  clang::AssertCapabilityAttr ::Spelling ::CXX11_clang_assert_capability:
  return clang_ext_AssertCapability_CXX11_clang_assert_capability;
  case clang::AssertCapabilityAttr ::Spelling ::GNU_assert_shared_capability:
  return clang_ext_AssertCapability_GNU_assert_shared_capability;
  case
  clang::AssertCapabilityAttr ::Spelling ::CXX11_clang_assert_shared_capability:
  return clang_ext_AssertCapability_CXX11_clang_assert_shared_capability;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::AssertCapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_AssertCapability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_AssertCapability_SpellingNotCalculated;}
enum
clang_ext_Capability_spelling clang_ext_Capability_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::CapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::CapabilityAttr ::Spelling ::GNU_capability:
  return clang_ext_Capability_GNU_capability;
  case clang::CapabilityAttr ::Spelling ::CXX11_clang_capability:
  return clang_ext_Capability_CXX11_clang_capability;
  case clang::CapabilityAttr ::Spelling ::GNU_shared_capability:
  return clang_ext_Capability_GNU_shared_capability;
  case clang::CapabilityAttr ::Spelling ::CXX11_clang_shared_capability:
  return clang_ext_Capability_CXX11_clang_shared_capability;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::CapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Capability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Capability_SpellingNotCalculated;}
enum
clang_ext_ConstInit_spelling clang_ext_ConstInit_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::ConstInitAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::ConstInitAttr ::Spelling ::Keyword_constinit:
  return clang_ext_ConstInit_Keyword_constinit;
  case clang::ConstInitAttr ::Spelling ::GNU_require_constant_initialization:
  return clang_ext_ConstInit_GNU_require_constant_initialization;
  case
  clang::ConstInitAttr ::Spelling ::CXX11_clang_require_constant_initialization:
  return clang_ext_ConstInit_CXX11_clang_require_constant_initialization;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::ConstInitAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_ConstInit_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_ConstInit_SpellingNotCalculated;}
enum clang_ext_Final_spelling clang_ext_Final_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::FinalAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::FinalAttr ::Spelling ::Keyword_final:
  return clang_ext_Final_Keyword_final;
  case clang::FinalAttr ::Spelling ::Keyword_sealed:
  return clang_ext_Final_Keyword_sealed;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::FinalAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Final_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Final_SpellingNotCalculated;}
enum
clang_ext_LoopHint_spelling clang_ext_LoopHint_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::LoopHintAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::LoopHintAttr ::Spelling ::Pragma_clang_loop:
  return clang_ext_LoopHint_Pragma_clang_loop;
  case clang::LoopHintAttr ::Spelling ::Pragma_unroll:
  return clang_ext_LoopHint_Pragma_unroll;
  case clang::LoopHintAttr ::Spelling ::Pragma_nounroll:
  return clang_ext_LoopHint_Pragma_nounroll;
  case clang::LoopHintAttr ::Spelling ::Pragma_unroll_and_jam:
  return clang_ext_LoopHint_Pragma_unroll_and_jam;
  case clang::LoopHintAttr ::Spelling ::Pragma_nounroll_and_jam:
  return clang_ext_LoopHint_Pragma_nounroll_and_jam;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::LoopHintAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_LoopHint_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_LoopHint_SpellingNotCalculated;}
enum
clang_ext_MSInheritance_spelling clang_ext_MSInheritance_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::MSInheritanceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::MSInheritanceAttr ::Spelling ::Keyword_single_inheritance:
  return clang_ext_MSInheritance_Keyword_single_inheritance;
  case clang::MSInheritanceAttr ::Spelling ::Keyword_multiple_inheritance:
  return clang_ext_MSInheritance_Keyword_multiple_inheritance;
  case clang::MSInheritanceAttr ::Spelling ::Keyword_virtual_inheritance:
  return clang_ext_MSInheritance_Keyword_virtual_inheritance;
  case clang::MSInheritanceAttr ::Spelling ::Keyword_unspecified_inheritance:
  return clang_ext_MSInheritance_Keyword_unspecified_inheritance;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::MSInheritanceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_MSInheritance_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_MSInheritance_SpellingNotCalculated;}
enum
clang_ext_MipsLongCall_spelling clang_ext_MipsLongCall_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::MipsLongCallAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::MipsLongCallAttr ::Spelling ::GNU_long_call:
  return clang_ext_MipsLongCall_GNU_long_call;
  case clang::MipsLongCallAttr ::Spelling ::CXX11_gnu_long_call:
  return clang_ext_MipsLongCall_CXX11_gnu_long_call;
  case clang::MipsLongCallAttr ::Spelling ::GNU_far:
  return clang_ext_MipsLongCall_GNU_far;
  case clang::MipsLongCallAttr ::Spelling ::CXX11_gnu_far:
  return clang_ext_MipsLongCall_CXX11_gnu_far;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::MipsLongCallAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_MipsLongCall_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_MipsLongCall_SpellingNotCalculated;}
enum
clang_ext_MipsShortCall_spelling clang_ext_MipsShortCall_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::MipsShortCallAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::MipsShortCallAttr ::Spelling ::GNU_short_call:
  return clang_ext_MipsShortCall_GNU_short_call;
  case clang::MipsShortCallAttr ::Spelling ::CXX11_gnu_short_call:
  return clang_ext_MipsShortCall_CXX11_gnu_short_call;
  case clang::MipsShortCallAttr ::Spelling ::GNU_near:
  return clang_ext_MipsShortCall_GNU_near;
  case clang::MipsShortCallAttr ::Spelling ::CXX11_gnu_near:
  return clang_ext_MipsShortCall_CXX11_gnu_near;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::MipsShortCallAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_MipsShortCall_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_MipsShortCall_SpellingNotCalculated;}
enum
clang_ext_OpenCLAccess_spelling clang_ext_OpenCLAccess_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::OpenCLAccessAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLAccessAttr ::Spelling ::Keyword_read_only:
  return clang_ext_OpenCLAccess_Keyword_read_only;
  case clang::OpenCLAccessAttr ::Spelling ::Keyword_write_only:
  return clang_ext_OpenCLAccess_Keyword_write_only;
  case clang::OpenCLAccessAttr ::Spelling ::Keyword_read_write:
  return clang_ext_OpenCLAccess_Keyword_read_write;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::OpenCLAccessAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLAccess_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLAccess_SpellingNotCalculated;}
enum
clang_ext_OpenCLConstantAddressSpace_spelling
clang_ext_OpenCLConstantAddressSpace_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLConstantAddressSpaceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLConstantAddressSpaceAttr ::Spelling ::Keyword_constant:
  return clang_ext_OpenCLConstantAddressSpace_Keyword_constant;
  case
  clang::OpenCLConstantAddressSpaceAttr ::Spelling ::GNU_opencl_constant:
  return clang_ext_OpenCLConstantAddressSpace_GNU_opencl_constant;
  case
  clang::OpenCLConstantAddressSpaceAttr ::Spelling ::CXX11_clang_opencl_constant:
  return clang_ext_OpenCLConstantAddressSpace_CXX11_clang_opencl_constant;
  case
  clang::OpenCLConstantAddressSpaceAttr ::Spelling ::C2x_clang_opencl_constant:
  return clang_ext_OpenCLConstantAddressSpace_C2x_clang_opencl_constant;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case
  clang::OpenCLConstantAddressSpaceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLConstantAddressSpace_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLConstantAddressSpace_SpellingNotCalculated;}
enum
clang_ext_OpenCLGenericAddressSpace_spelling
clang_ext_OpenCLGenericAddressSpace_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLGenericAddressSpaceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLGenericAddressSpaceAttr ::Spelling ::Keyword_generic:
  return clang_ext_OpenCLGenericAddressSpace_Keyword_generic;
  case clang::OpenCLGenericAddressSpaceAttr ::Spelling ::GNU_opencl_generic:
  return clang_ext_OpenCLGenericAddressSpace_GNU_opencl_generic;
  case
  clang::OpenCLGenericAddressSpaceAttr ::Spelling ::CXX11_clang_opencl_generic:
  return clang_ext_OpenCLGenericAddressSpace_CXX11_clang_opencl_generic;
  case
  clang::OpenCLGenericAddressSpaceAttr ::Spelling ::C2x_clang_opencl_generic:
  return clang_ext_OpenCLGenericAddressSpace_C2x_clang_opencl_generic;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case
  clang::OpenCLGenericAddressSpaceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLGenericAddressSpace_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLGenericAddressSpace_SpellingNotCalculated;}
enum
clang_ext_OpenCLGlobalAddressSpace_spelling
clang_ext_OpenCLGlobalAddressSpace_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLGlobalAddressSpaceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLGlobalAddressSpaceAttr ::Spelling ::Keyword_global:
  return clang_ext_OpenCLGlobalAddressSpace_Keyword_global;
  case clang::OpenCLGlobalAddressSpaceAttr ::Spelling ::GNU_opencl_global:
  return clang_ext_OpenCLGlobalAddressSpace_GNU_opencl_global;
  case
  clang::OpenCLGlobalAddressSpaceAttr ::Spelling ::CXX11_clang_opencl_global:
  return clang_ext_OpenCLGlobalAddressSpace_CXX11_clang_opencl_global;
  case
  clang::OpenCLGlobalAddressSpaceAttr ::Spelling ::C2x_clang_opencl_global:
  return clang_ext_OpenCLGlobalAddressSpace_C2x_clang_opencl_global;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case
  clang::OpenCLGlobalAddressSpaceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLGlobalAddressSpace_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLGlobalAddressSpace_SpellingNotCalculated;}
enum
clang_ext_OpenCLLocalAddressSpace_spelling
clang_ext_OpenCLLocalAddressSpace_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLLocalAddressSpaceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLLocalAddressSpaceAttr ::Spelling ::Keyword_local:
  return clang_ext_OpenCLLocalAddressSpace_Keyword_local;
  case clang::OpenCLLocalAddressSpaceAttr ::Spelling ::GNU_opencl_local:
  return clang_ext_OpenCLLocalAddressSpace_GNU_opencl_local;
  case
  clang::OpenCLLocalAddressSpaceAttr ::Spelling ::CXX11_clang_opencl_local:
  return clang_ext_OpenCLLocalAddressSpace_CXX11_clang_opencl_local;
  case
  clang::OpenCLLocalAddressSpaceAttr ::Spelling ::C2x_clang_opencl_local:
  return clang_ext_OpenCLLocalAddressSpace_C2x_clang_opencl_local;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::OpenCLLocalAddressSpaceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLLocalAddressSpace_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLLocalAddressSpace_SpellingNotCalculated;}
enum
clang_ext_OpenCLPrivateAddressSpace_spelling
clang_ext_OpenCLPrivateAddressSpace_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLPrivateAddressSpaceAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OpenCLPrivateAddressSpaceAttr ::Spelling ::Keyword_private:
  return clang_ext_OpenCLPrivateAddressSpace_Keyword_private;
  case clang::OpenCLPrivateAddressSpaceAttr ::Spelling ::GNU_opencl_private:
  return clang_ext_OpenCLPrivateAddressSpace_GNU_opencl_private;
  case
  clang::OpenCLPrivateAddressSpaceAttr ::Spelling ::CXX11_clang_opencl_private:
  return clang_ext_OpenCLPrivateAddressSpace_CXX11_clang_opencl_private;
  case
  clang::OpenCLPrivateAddressSpaceAttr ::Spelling ::C2x_clang_opencl_private:
  return clang_ext_OpenCLPrivateAddressSpace_C2x_clang_opencl_private;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case
  clang::OpenCLPrivateAddressSpaceAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_OpenCLPrivateAddressSpace_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_OpenCLPrivateAddressSpace_SpellingNotCalculated;}
enum
clang_ext_Ownership_spelling clang_ext_Ownership_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::OwnershipAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::OwnershipAttr ::Spelling ::GNU_ownership_holds:
  return clang_ext_Ownership_GNU_ownership_holds;
  case clang::OwnershipAttr ::Spelling ::CXX11_clang_ownership_holds:
  return clang_ext_Ownership_CXX11_clang_ownership_holds;
  case clang::OwnershipAttr ::Spelling ::C2x_clang_ownership_holds:
  return clang_ext_Ownership_C2x_clang_ownership_holds;
  case clang::OwnershipAttr ::Spelling ::GNU_ownership_returns:
  return clang_ext_Ownership_GNU_ownership_returns;
  case clang::OwnershipAttr ::Spelling ::CXX11_clang_ownership_returns:
  return clang_ext_Ownership_CXX11_clang_ownership_returns;
  case clang::OwnershipAttr ::Spelling ::C2x_clang_ownership_returns:
  return clang_ext_Ownership_C2x_clang_ownership_returns;
  case clang::OwnershipAttr ::Spelling ::GNU_ownership_takes:
  return clang_ext_Ownership_GNU_ownership_takes;
  case clang::OwnershipAttr ::Spelling ::CXX11_clang_ownership_takes:
  return clang_ext_Ownership_CXX11_clang_ownership_takes;
  case clang::OwnershipAttr ::Spelling ::C2x_clang_ownership_takes:
  return clang_ext_Ownership_C2x_clang_ownership_takes;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::OwnershipAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Ownership_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Ownership_SpellingNotCalculated;}
enum
clang_ext_PassObjectSize_spelling clang_ext_PassObjectSize_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::PassObjectSizeAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::PassObjectSizeAttr ::Spelling ::GNU_pass_object_size:
  return clang_ext_PassObjectSize_GNU_pass_object_size;
  case clang::PassObjectSizeAttr ::Spelling ::CXX11_clang_pass_object_size:
  return clang_ext_PassObjectSize_CXX11_clang_pass_object_size;
  case clang::PassObjectSizeAttr ::Spelling ::C2x_clang_pass_object_size:
  return clang_ext_PassObjectSize_C2x_clang_pass_object_size;
  case clang::PassObjectSizeAttr ::Spelling ::GNU_pass_dynamic_object_size:
  return clang_ext_PassObjectSize_GNU_pass_dynamic_object_size;
  case
  clang::PassObjectSizeAttr ::Spelling ::CXX11_clang_pass_dynamic_object_size:
  return clang_ext_PassObjectSize_CXX11_clang_pass_dynamic_object_size;
  case
  clang::PassObjectSizeAttr ::Spelling ::C2x_clang_pass_dynamic_object_size:
  return clang_ext_PassObjectSize_C2x_clang_pass_dynamic_object_size;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::PassObjectSizeAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_PassObjectSize_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_PassObjectSize_SpellingNotCalculated;}
enum
clang_ext_ReleaseCapability_spelling clang_ext_ReleaseCapability_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ReleaseCapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::ReleaseCapabilityAttr ::Spelling ::GNU_release_capability:
  return clang_ext_ReleaseCapability_GNU_release_capability;
  case
  clang::ReleaseCapabilityAttr ::Spelling ::CXX11_clang_release_capability:
  return clang_ext_ReleaseCapability_CXX11_clang_release_capability;
  case
  clang::ReleaseCapabilityAttr ::Spelling ::GNU_release_shared_capability:
  return clang_ext_ReleaseCapability_GNU_release_shared_capability;
  case
  clang::ReleaseCapabilityAttr ::Spelling ::CXX11_clang_release_shared_capability:
  return clang_ext_ReleaseCapability_CXX11_clang_release_shared_capability;
  case
  clang::ReleaseCapabilityAttr ::Spelling ::GNU_release_generic_capability:
  return clang_ext_ReleaseCapability_GNU_release_generic_capability;
  case
  clang::ReleaseCapabilityAttr ::Spelling ::CXX11_clang_release_generic_capability:
  return clang_ext_ReleaseCapability_CXX11_clang_release_generic_capability;
  case clang::ReleaseCapabilityAttr ::Spelling ::GNU_unlock_function:
  return clang_ext_ReleaseCapability_GNU_unlock_function;
  case clang::ReleaseCapabilityAttr ::Spelling ::CXX11_clang_unlock_function:
  return clang_ext_ReleaseCapability_CXX11_clang_unlock_function;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::ReleaseCapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_ReleaseCapability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_ReleaseCapability_SpellingNotCalculated;}
enum
clang_ext_RequiresCapability_spelling
clang_ext_RequiresCapability_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::RequiresCapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::RequiresCapabilityAttr ::Spelling ::GNU_requires_capability:
  return clang_ext_RequiresCapability_GNU_requires_capability;
  case
  clang::RequiresCapabilityAttr ::Spelling ::CXX11_clang_requires_capability:
  return clang_ext_RequiresCapability_CXX11_clang_requires_capability;
  case
  clang::RequiresCapabilityAttr ::Spelling ::GNU_exclusive_locks_required:
  return clang_ext_RequiresCapability_GNU_exclusive_locks_required;
  case
  clang::RequiresCapabilityAttr ::Spelling ::CXX11_clang_exclusive_locks_required:
  return clang_ext_RequiresCapability_CXX11_clang_exclusive_locks_required;
  case
  clang::RequiresCapabilityAttr ::Spelling ::GNU_requires_shared_capability:
  return clang_ext_RequiresCapability_GNU_requires_shared_capability;
  case
  clang::RequiresCapabilityAttr ::Spelling ::CXX11_clang_requires_shared_capability:
  return clang_ext_RequiresCapability_CXX11_clang_requires_shared_capability;
  case clang::RequiresCapabilityAttr ::Spelling ::GNU_shared_locks_required:
  return clang_ext_RequiresCapability_GNU_shared_locks_required;
  case
  clang::RequiresCapabilityAttr ::Spelling ::CXX11_clang_shared_locks_required:
  return clang_ext_RequiresCapability_CXX11_clang_shared_locks_required;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::RequiresCapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_RequiresCapability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_RequiresCapability_SpellingNotCalculated;}
enum
clang_ext_Restrict_spelling clang_ext_Restrict_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::RestrictAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::RestrictAttr ::Spelling ::Declspec_restrict:
  return clang_ext_Restrict_Declspec_restrict;
  case clang::RestrictAttr ::Spelling ::GNU_malloc:
  return clang_ext_Restrict_GNU_malloc;
  case clang::RestrictAttr ::Spelling ::CXX11_gnu_malloc:
  return clang_ext_Restrict_CXX11_gnu_malloc;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::RestrictAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Restrict_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Restrict_SpellingNotCalculated;}
enum
clang_ext_Section_spelling clang_ext_Section_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::SectionAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::SectionAttr ::Spelling ::GNU_section:
  return clang_ext_Section_GNU_section;
  case clang::SectionAttr ::Spelling ::CXX11_gnu_section:
  return clang_ext_Section_CXX11_gnu_section;
  case clang::SectionAttr ::Spelling ::Declspec_allocate:
  return clang_ext_Section_Declspec_allocate;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::SectionAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Section_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Section_SpellingNotCalculated;}
enum
clang_ext_TryAcquireCapability_spelling
clang_ext_TryAcquireCapability_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::TryAcquireCapabilityAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case
  clang::TryAcquireCapabilityAttr ::Spelling ::GNU_try_acquire_capability:
  return clang_ext_TryAcquireCapability_GNU_try_acquire_capability;
  case
  clang::TryAcquireCapabilityAttr ::Spelling ::CXX11_clang_try_acquire_capability:
  return clang_ext_TryAcquireCapability_CXX11_clang_try_acquire_capability;
  case
  clang::TryAcquireCapabilityAttr ::Spelling ::GNU_try_acquire_shared_capability:
  return clang_ext_TryAcquireCapability_GNU_try_acquire_shared_capability;
  case
  clang::TryAcquireCapabilityAttr ::Spelling ::CXX11_clang_try_acquire_shared_capability:
  return
  clang_ext_TryAcquireCapability_CXX11_clang_try_acquire_shared_capability;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::TryAcquireCapabilityAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_TryAcquireCapability_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_TryAcquireCapability_SpellingNotCalculated;}
enum clang_ext_Unused_spelling clang_ext_Unused_getSpelling(CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::UnusedAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::UnusedAttr ::Spelling ::CXX11_maybe_unused:
  return clang_ext_Unused_CXX11_maybe_unused;
  case clang::UnusedAttr ::Spelling ::GNU_unused:
  return clang_ext_Unused_GNU_unused;
  case clang::UnusedAttr ::Spelling ::CXX11_gnu_unused:
  return clang_ext_Unused_CXX11_gnu_unused;
  case clang::UnusedAttr ::Spelling ::C2x_maybe_unused:
  return clang_ext_Unused_C2x_maybe_unused;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::UnusedAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_Unused_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_Unused_SpellingNotCalculated;}
enum
clang_ext_WarnUnusedResult_spelling clang_ext_WarnUnusedResult_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::WarnUnusedResultAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::WarnUnusedResultAttr ::Spelling ::CXX11_nodiscard:
  return clang_ext_WarnUnusedResult_CXX11_nodiscard;
  case clang::WarnUnusedResultAttr ::Spelling ::C2x_nodiscard:
  return clang_ext_WarnUnusedResult_C2x_nodiscard;
  case
  clang::WarnUnusedResultAttr ::Spelling ::CXX11_clang_warn_unused_result:
  return clang_ext_WarnUnusedResult_CXX11_clang_warn_unused_result;
  case clang::WarnUnusedResultAttr ::Spelling ::GNU_warn_unused_result:
  return clang_ext_WarnUnusedResult_GNU_warn_unused_result;
  case clang::WarnUnusedResultAttr ::Spelling ::CXX11_gnu_warn_unused_result:
  return clang_ext_WarnUnusedResult_CXX11_gnu_warn_unused_result;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::WarnUnusedResultAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_WarnUnusedResult_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_WarnUnusedResult_SpellingNotCalculated;}
enum
clang_ext_XRayInstrument_spelling clang_ext_XRayInstrument_getSpelling(
CXCursor cursor)
{
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::XRayInstrumentAttr >(attr))
 switch (qual_attr->getSemanticSpelling())
 {case clang::XRayInstrumentAttr ::Spelling ::GNU_xray_always_instrument:
  return clang_ext_XRayInstrument_GNU_xray_always_instrument;
  case
  clang::XRayInstrumentAttr ::Spelling ::CXX11_clang_xray_always_instrument:
  return clang_ext_XRayInstrument_CXX11_clang_xray_always_instrument;
  case
  clang::XRayInstrumentAttr ::Spelling ::C2x_clang_xray_always_instrument:
  return clang_ext_XRayInstrument_C2x_clang_xray_always_instrument;
  case clang::XRayInstrumentAttr ::Spelling ::GNU_xray_never_instrument:
  return clang_ext_XRayInstrument_GNU_xray_never_instrument;
  case
  clang::XRayInstrumentAttr ::Spelling ::CXX11_clang_xray_never_instrument:
  return clang_ext_XRayInstrument_CXX11_clang_xray_never_instrument;
  case
  clang::XRayInstrumentAttr ::Spelling ::C2x_clang_xray_never_instrument:
  return clang_ext_XRayInstrument_C2x_clang_xray_never_instrument;
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::XRayInstrumentAttr ::Spelling ::SpellingNotCalculated:
  return clang_ext_XRayInstrument_SpellingNotCalculated;
  
  #endif
  }
 
 #endif
 
 return clang_ext_XRayInstrument_SpellingNotCalculated;}
CXString clang_ext_TLSModelAttr_getModel(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::TLSModelAttr >(attr))
 return cxstring_createDup(qual_attr->getModel());
 return cxstring_createRef("");}
int clang_ext_FormatAttr_getFirstArg(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::FormatAttr >(attr))
 return qual_attr->getFirstArg();
 return 0;}
unsigned int clang_ext_Attrs_getAliaseeLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::WeakRef:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::WeakRefAttr >(attr))
  return qual_attr->getAliaseeLength();
  break;
  case clang::attr::Alias:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::AliasAttr >(attr))
  return qual_attr->getAliaseeLength();
  break;
  default:
  ;}
 return 0;}
unsigned int clang_ext_AMDGPUNumVGPRAttr_getNumVGPR(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_6_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::AMDGPUNumVGPRAttr >(attr))
 return qual_attr->getNumVGPR();
 
 #endif
 
 return 0;}
CXString clang_ext_ObjCRuntimeNameAttr_getMetadataName(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::ObjCRuntimeNameAttr >(attr))
 return cxstring_createDup(qual_attr->getMetadataName());
 
 #endif
 
 return cxstring_createRef("");}
CXCursor clang_ext_Attrs_getMin(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::AMDGPUWavesPerEU:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AMDGPUWavesPerEUAttr >(attr))
  return MakeCXCursor(qual_attr->getMin(), getCursorTU(cursor));
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::AMDGPUFlatWorkGroupSize:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AMDGPUFlatWorkGroupSizeAttr >(attr))
  return MakeCXCursor(qual_attr->getMin(), getCursorTU(cursor));
  break;
  
  #endif
  
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
void clang_ext_OMPDeclareVariantAttr_getImplVendors(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 for (auto iter = qual_attr->implVendors_begin();
 iter != qual_attr->implVendors_end(); ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
CXString clang_ext_IFuncAttr_getResolver(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::IFuncAttr >(attr))
 return cxstring_createDup(qual_attr->getResolver());
 
 #endif
 
 return cxstring_createRef("");}
CXCursor clang_ext_AssumeAlignedAttr_getOffset(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_6_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::AssumeAlignedAttr >(attr))
 return MakeCXCursor(qual_attr->getOffset(), getCursorTU(cursor));
 
 #endif
 
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
int clang_ext_PatchableFunctionEntryAttr_getOffset(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::PatchableFunctionEntryAttr >(attr))
 return qual_attr->getOffset();
 
 #endif
 
 return 0;}
unsigned int clang_ext_AllocAlignAttr_getParamIndex(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AllocAlignAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getParamIndex());
 
 #endif
 
 return 0;}
unsigned int clang_ext_WebAssemblyImportNameAttr_getImportNameLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_8_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyImportNameAttr >(attr))
 return qual_attr->getImportNameLength();
 
 #endif
 
 return 0;}
int clang_ext_SentinelAttr_getSentinel(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::SentinelAttr >(attr))
 return qual_attr->getSentinel();
 return 0;}
CXCursor clang_ext_Attrs_getSuccessValue(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::TryAcquireCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::TryAcquireCapabilityAttr >(attr))
  return MakeCXCursor(qual_attr->getSuccessValue(), getCursorTU(cursor));
  break;
  
  #endif
  
  case clang::attr::SharedTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::SharedTrylockFunctionAttr >(attr))
  return MakeCXCursor(qual_attr->getSuccessValue(), getCursorTU(cursor));
  break;
  case clang::attr::ExclusiveTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ExclusiveTrylockFunctionAttr >(attr))
  return MakeCXCursor(qual_attr->getSuccessValue(), getCursorTU(cursor));
  break;
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
unsigned int clang_ext_Attrs_getCpus_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CPUSpecific:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CPUSpecificAttr >(attr))
  return qual_attr->cpus_size();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CPUDispatch:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CPUDispatchAttr >(attr))
  return qual_attr->cpus_size();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
unsigned int clang_ext_TLSModelAttr_getModelLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::TLSModelAttr >(attr))
 return qual_attr->getModelLength();
 return 0;}
bool clang_ext_ExternalSourceSymbolAttr_getGeneratedDeclaration(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ExternalSourceSymbolAttr >(attr))
 return qual_attr->getGeneratedDeclaration();
 
 #endif
 
 return false;}
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getIntroduced(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return makeVersionTuple(qual_attr->getIntroduced());
 
 #endif
 
 return zeroVersionTuple;}
unsigned int clang_ext_MaxFieldAlignmentAttr_getAlignment(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::MaxFieldAlignmentAttr >(attr))
 return qual_attr->getAlignment();
 return 0;}
CXCursor clang_ext_Attrs_getAlignment(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_6_0
  
  case clang::attr::AssumeAligned:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AssumeAlignedAttr >(attr))
  return MakeCXCursor(qual_attr->getAlignment(), getCursorTU(cursor));
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_6_0
  
  case clang::attr::AlignValue:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::AlignValueAttr >(attr))
  return MakeCXCursor(qual_attr->getAlignment(), getCursorTU(cursor));
  break;
  
  #endif
  
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
void clang_ext_SuppressAttr_getDiagnosticIdentifiers(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::SuppressAttr >(attr))
 for (auto iter = qual_attr->diagnosticIdentifiers_begin();
 iter != qual_attr->diagnosticIdentifiers_end(); ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
struct clang_ext_TypeLoc clang_ext_Attrs_getDerefType(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::Pointer:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::PointerAttr >(attr))
  return
  MakeTypeLoc(qual_attr->getDerefTypeLoc()->getTypeLoc(), getCursorTU(cursor));
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::Owner:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::OwnerAttr >(attr))
  return
  MakeTypeLoc(qual_attr->getDerefTypeLoc()->getTypeLoc(), getCursorTU(cursor));
  break;
  
  #endif
  
  default:
  ;}
 return MakeTypeLocInvalid(getCursorTU(cursor));}
int clang_ext_AddressSpaceAttr_getAddressSpace(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_8_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AddressSpaceAttr >(attr))
 return qual_attr->getAddressSpace();
 
 #endif
 
 return 0;}
CXString clang_ext_ModeAttr_getMode(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::ModeAttr >(attr))
 return cxstring_createDup(qual_attr->getMode()->getName());
 return cxstring_createRef("");}
struct
clang_ext_TypeLoc clang_ext_TypeTagForDatatypeAttr_getMatchingCType(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::TypeTagForDatatypeAttr >(attr))
 return
 MakeTypeLoc(qual_attr->getMatchingCTypeLoc()->getTypeLoc(),
             getCursorTU(cursor));
 return MakeTypeLocInvalid(getCursorTU(cursor));}
CXCursor clang_ext_Attrs_getArg(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::PtGuardedBy:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::PtGuardedByAttr >(attr))
  return MakeCXCursor(qual_attr->getArg(), getCursorTU(cursor));
  break;
  case clang::attr::LockReturned:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::LockReturnedAttr >(attr))
  return MakeCXCursor(qual_attr->getArg(), getCursorTU(cursor));
  break;
  case clang::attr::GuardedBy:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::GuardedByAttr >(attr))
  return MakeCXCursor(qual_attr->getArg(), getCursorTU(cursor));
  break;
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
unsigned int clang_ext_AnnotateAttr_getAnnotationLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AnnotateAttr >(attr))
 return qual_attr->getAnnotationLength();
 return 0;}
void clang_ext_Attrs_getCpus(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CPUSpecific:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CPUSpecificAttr >(attr))
  for (auto iter = qual_attr->cpus_begin(); iter != qual_attr->cpus_end();
  ++ iter)
  {auto const &item = * iter;
   callback(cxstring_createDup(item->getName()), data);}
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CPUDispatch:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CPUDispatchAttr >(attr))
  for (auto iter = qual_attr->cpus_begin(); iter != qual_attr->cpus_end();
  ++ iter)
  {auto const &item = * iter;
   callback(cxstring_createDup(item->getName()), data);}
  break;
  
  #endif
  
  default:
  ;}}
void clang_ext_OMPDeclareVariantAttr_getDeviceKinds(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 for (auto iter = qual_attr->deviceKinds_begin();
 iter != qual_attr->deviceKinds_end(); ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
unsigned int clang_ext_OpenCLIntelReqdSubGroupSizeAttr_getSubGroupSize(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OpenCLIntelReqdSubGroupSizeAttr >(attr))
 return qual_attr->getSubGroupSize();
 
 #endif
 
 return 0;}
unsigned int clang_ext_LayoutVersionAttr_getVersion(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::LayoutVersionAttr >(attr))
 return qual_attr->getVersion();
 
 #endif
 
 return 0;}
unsigned int clang_ext_ArgumentWithTypeTagAttr_getArgumentIdx(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ArgumentWithTypeTagAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getArgumentIdx());
 return 0;}
int clang_ext_SentinelAttr_getNullPos(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::SentinelAttr >(attr))
 return qual_attr->getNullPos();
 return 0;}
void clang_ext_OMPDeclareVariantAttr_getScores(
CXCursor cursor, void (*callback)(CXCursor , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 for (auto iter = qual_attr->scores_begin(); iter != qual_attr->scores_end();
 ++ iter)
 {auto const &item = * iter;
  callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
 
 #endif
 }
bool clang_ext_AvailabilityAttr_getStrict(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return qual_attr->getStrict();
 
 #endif
 
 return false;}
unsigned int clang_ext_Attrs_getArgs_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::TryAcquireCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::TryAcquireCapabilityAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  case clang::attr::SharedTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::SharedTrylockFunctionAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::RequiresCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::RequiresCapabilityAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::ReleaseCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ReleaseCapabilityAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_7_0
  
  case clang::attr::Ownership:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::OwnershipAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  case clang::attr::NonNull:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::NonNullAttr >(attr))
  return qual_attr->args_size();
  break;
  case clang::attr::LocksExcluded:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::LocksExcludedAttr >(attr))
  return qual_attr->args_size();
  break;
  case clang::attr::ExclusiveTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ExclusiveTrylockFunctionAttr >(attr))
  return qual_attr->args_size();
  break;
  case clang::attr::AssertSharedLock:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertSharedLockAttr >(attr))
  return qual_attr->args_size();
  break;
  case clang::attr::AssertExclusiveLock:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertExclusiveLockAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_6_0_0
  
  case clang::attr::AssertCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertCapabilityAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  case clang::attr::AcquiredBefore:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquiredBeforeAttr >(attr))
  return qual_attr->args_size();
  break;
  case clang::attr::AcquiredAfter:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquiredAfterAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::AcquireCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AcquireCapabilityAttr >(attr))
  return qual_attr->args_size();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
CXString clang_ext_OwnershipAttr_getModule(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_7_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::OwnershipAttr >(attr))
 return cxstring_createDup(qual_attr->getModule()->getName());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_OMPDeclareVariantAttr_getCtxSelectors_Size(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return qual_attr->ctxSelectors_size();
 
 #endif
 
 return 0;}
unsigned int clang_ext_MinVectorWidthAttr_getVectorWidth(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_7_0_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::MinVectorWidthAttr >(attr))
 return qual_attr->getVectorWidth();
 
 #endif
 
 return 0;}
CXCursor clang_ext_CUDALaunchBoundsAttr_getMinBlocks(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_7_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::CUDALaunchBoundsAttr >(attr))
 return MakeCXCursor(qual_attr->getMinBlocks(), getCursorTU(cursor));
 
 #endif
 
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
bool clang_ext_TypeTagForDatatypeAttr_getLayoutCompatible(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::TypeTagForDatatypeAttr >(attr))
 return qual_attr->getLayoutCompatible();
 return false;}
unsigned int clang_ext_OMPDeclareVariantAttr_getImplVendors_Size(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return qual_attr->implVendors_size();
 
 #endif
 
 return 0;}
unsigned int clang_ext_InitSegAttr_getSectionLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::InitSegAttr >(attr))
 return qual_attr->getSectionLength();
 
 #endif
 
 return 0;}
unsigned int clang_ext_ExternalSourceSymbolAttr_getDefinedInLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ExternalSourceSymbolAttr >(attr))
 return qual_attr->getDefinedInLength();
 
 #endif
 
 return 0;}
struct
clang_ext_TypeLoc clang_ext_VecTypeHintAttr_getTypeHint(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::VecTypeHintAttr >(attr))
 return
 MakeTypeLoc(qual_attr->getTypeHintLoc()->getTypeLoc(), getCursorTU(cursor));
 return MakeTypeLocInvalid(getCursorTU(cursor));}
unsigned int clang_ext_OMPCaptureKindAttr_getCaptureKind(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_6_0_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::OMPCaptureKindAttr >(attr))
 return qual_attr->getCaptureKind();
 
 #endif
 
 return 0;}
CXString clang_ext_FormatAttr_getType(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::FormatAttr >(attr))
 return cxstring_createDup(qual_attr->getType()->getName());
 return cxstring_createRef("");}
int clang_ext_PassObjectSizeAttr_getType(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_8_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::PassObjectSizeAttr >(attr))
 return qual_attr->getType();
 
 #endif
 
 return 0;}
CXString clang_ext_AsmLabelAttr_getLabel(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AsmLabelAttr >(attr))
 return cxstring_createDup(qual_attr->getLabel());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_OMPDeclareVariantAttr_getCtxSelectorSets_Size(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return qual_attr->ctxSelectorSets_size();
 
 #endif
 
 return 0;}
CXString clang_ext_AvailabilityAttr_getPlatform(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return cxstring_createDup(qual_attr->getPlatform()->getName());
 
 #endif
 
 return cxstring_createRef("");}
CXCursor clang_ext_Attrs_getMax(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::AMDGPUWavesPerEU:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AMDGPUWavesPerEUAttr >(attr))
  return MakeCXCursor(qual_attr->getMax(), getCursorTU(cursor));
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::AMDGPUFlatWorkGroupSize:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AMDGPUFlatWorkGroupSizeAttr >(attr))
  return MakeCXCursor(qual_attr->getMax(), getCursorTU(cursor));
  break;
  
  #endif
  
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
void clang_ext_OMPDeclareVariantAttr_getCtxSelectorSets(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 for (auto iter = qual_attr->ctxSelectorSets_begin();
 iter != qual_attr->ctxSelectorSets_end(); ++ iter)
 {auto const &item = * iter;
  callback(item, data);}
 
 #endif
 }
unsigned int clang_ext_ExternalSourceSymbolAttr_getLanguageLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ExternalSourceSymbolAttr >(attr))
 return qual_attr->getLanguageLength();
 
 #endif
 
 return 0;}
unsigned int clang_ext_ObjCRuntimeNameAttr_getMetadataNameLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::ObjCRuntimeNameAttr >(attr))
 return qual_attr->getMetadataNameLength();
 
 #endif
 
 return 0;}
CXString clang_ext_TargetAttr_getFeaturesStr(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_8_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::TargetAttr >(attr))
 return cxstring_createDup(qual_attr->getFeaturesStr());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_InitPriorityAttr_getPriority(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::InitPriorityAttr >(attr))
 return qual_attr->getPriority();
 return 0;}
int clang_ext_Attrs_getPriority(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::Destructor:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DestructorAttr >(attr))
  return qual_attr->getPriority();
  break;
  case clang::attr::Constructor:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::ConstructorAttr >(attr))
  return qual_attr->getPriority();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::Availability:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
  return qual_attr->getPriority();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
CXString clang_ext_Attrs_getBridgedType(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::ObjCBridgeMutable:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ObjCBridgeMutableAttr >(attr))
  return cxstring_createDup(qual_attr->getBridgedType()->getName());
  break;
  
  #endif
  
  case clang::attr::ObjCBridge:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::ObjCBridgeAttr >(attr))
  return cxstring_createDup(qual_attr->getBridgedType()->getName());
  break;
  default:
  ;}
 return cxstring_createRef("");}
unsigned int clang_ext_Attrs_getYDim(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::WorkGroupSizeHint:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::WorkGroupSizeHintAttr >(attr))
  return qual_attr->getYDim();
  break;
  case clang::attr::ReqdWorkGroupSize:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ReqdWorkGroupSizeAttr >(attr))
  return qual_attr->getYDim();
  break;
  default:
  ;}
 return 0;}
CXString clang_ext_ObjCBridgeRelatedAttr_getClassMethod(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ObjCBridgeRelatedAttr >(attr))
 return cxstring_createDup(qual_attr->getClassMethod()->getName());
 
 #endif
 
 return cxstring_createRef("");}
CXCursor clang_ext_OMPReferencedVarAttr_getRef(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_7_0_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::OMPReferencedVarAttr >(attr))
 return MakeCXCursor(qual_attr->getRef(), getCursorTU(cursor));
 
 #endif
 
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
struct
clang_ext_DeclarationName clang_ext_CleanupAttr_getFunctionDecl(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::CleanupAttr >(attr))
 return
 MakeDeclarationName(qual_attr->getFunctionDecl()->getDeclName(),
                     getCursorTU(cursor));
 return MakeDeclarationNameInvalid(getCursorTU(cursor));}
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getObsoleted(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return makeVersionTuple(qual_attr->getObsoleted());
 
 #endif
 
 return zeroVersionTuple;}
unsigned int clang_ext_AllocSizeAttr_getElemSizeParam(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_4_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AllocSizeAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getElemSizeParam());
 
 #endif
 
 return 0;}
CXString clang_ext_ExternalSourceSymbolAttr_getLanguage(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ExternalSourceSymbolAttr >(attr))
 return cxstring_createDup(qual_attr->getLanguage());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_Attrs_getReplacementLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_9_0
  
  case clang::attr::Deprecated:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DeprecatedAttr >(attr))
  return qual_attr->getReplacementLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::Availability:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
  return qual_attr->getReplacementLength();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
CXString clang_ext_InitSegAttr_getSection(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::InitSegAttr >(attr))
 return cxstring_createDup(qual_attr->getSection());
 
 #endif
 
 return cxstring_createRef("");}
CXString clang_ext_ExternalSourceSymbolAttr_getDefinedIn(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ExternalSourceSymbolAttr >(attr))
 return cxstring_createDup(qual_attr->getDefinedIn());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_AllocSizeAttr_getNumElemsParam(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_4_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AllocSizeAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getNumElemsParam());
 
 #endif
 
 return 0;}
unsigned int clang_ext_XRayLogArgsAttr_getArgumentCount(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::XRayLogArgsAttr >(attr))
 return qual_attr->getArgumentCount();
 
 #endif
 
 return 0;}
void clang_ext_OMPDeclareVariantAttr_getCtxSelectors(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 for (auto iter = qual_attr->ctxSelectors_begin();
 iter != qual_attr->ctxSelectors_end(); ++ iter)
 {auto const &item = * iter;
  callback(item, data);}
 
 #endif
 }
unsigned int clang_ext_IFuncAttr_getResolverLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::IFuncAttr >(attr))
 return qual_attr->getResolverLength();
 
 #endif
 
 return 0;}
CXString clang_ext_Attrs_getMessage(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::WarnUnusedResult:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::WarnUnusedResultAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #endif
  
  case clang::attr::Unavailable:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::UnavailableAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::EnableIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::EnableIfAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_4_0_0
  
  case clang::attr::DiagnoseIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DiagnoseIfAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_9_0
  
  case clang::attr::Deprecated:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DeprecatedAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::Availability:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
  return cxstring_createDup(qual_attr->getMessage());
  break;
  
  #endif
  
  default:
  ;}
 return cxstring_createRef("");}
unsigned int clang_ext_AsmLabelAttr_getLabelLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AsmLabelAttr >(attr))
 return qual_attr->getLabelLength();
 
 #endif
 
 return 0;}
unsigned int clang_ext_ArgumentWithTypeTagAttr_getTypeTagIdx(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ArgumentWithTypeTagAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getTypeTagIdx());
 return 0;}
unsigned int clang_ext_AbiTagAttr_getTags_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AbiTagAttr >(attr))
 return qual_attr->tags_size();
 
 #endif
 
 return 0;}
CXString clang_ext_UuidAttr_getGuid(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::UuidAttr >(attr))
 return cxstring_createDup(qual_attr->getGuid());
 return cxstring_createRef("");}
CXCursor clang_ext_CUDALaunchBoundsAttr_getMaxThreads(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_7_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::CUDALaunchBoundsAttr >(attr))
 return MakeCXCursor(qual_attr->getMaxThreads(), getCursorTU(cursor));
 
 #endif
 
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
CXString clang_ext_ArmMveAliasAttr_getBuiltinName(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::ArmMveAliasAttr >(attr))
 return cxstring_createDup(qual_attr->getBuiltinName()->getName());
 
 #endif
 
 return cxstring_createRef("");}
CXString clang_ext_WebAssemblyImportModuleAttr_getImportModule(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_8_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyImportModuleAttr >(attr))
 return cxstring_createDup(qual_attr->getImportModule());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_Attrs_getZDim(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::WorkGroupSizeHint:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::WorkGroupSizeHintAttr >(attr))
  return qual_attr->getZDim();
  break;
  case clang::attr::ReqdWorkGroupSize:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ReqdWorkGroupSizeAttr >(attr))
  return qual_attr->getZDim();
  break;
  default:
  ;}
 return 0;}
unsigned int clang_ext_NoSanitizeAttr_getSanitizers_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_7_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::NoSanitizeAttr >(attr))
 return qual_attr->sanitizers_size();
 
 #endif
 
 return 0;}
unsigned int clang_ext_CallbackAttr_getEncoding_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::CallbackAttr >(attr))
 return qual_attr->encoding_size();
 
 #endif
 
 return 0;}
unsigned int clang_ext_Attrs_getHandleTypeLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::UseHandle:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::UseHandleAttr >(attr))
  return qual_attr->getHandleTypeLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::ReleaseHandle:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::ReleaseHandleAttr >(attr))
  return qual_attr->getHandleTypeLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::AcquireHandle:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquireHandleAttr >(attr))
  return qual_attr->getHandleTypeLength();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
unsigned int clang_ext_Attrs_getXDim(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::WorkGroupSizeHint:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::WorkGroupSizeHintAttr >(attr))
  return qual_attr->getXDim();
  break;
  case clang::attr::ReqdWorkGroupSize:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ReqdWorkGroupSizeAttr >(attr))
  return qual_attr->getXDim();
  break;
  default:
  ;}
 return 0;}
CXString clang_ext_ObjCBridgeRelatedAttr_getRelatedClass(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ObjCBridgeRelatedAttr >(attr))
 return cxstring_createDup(qual_attr->getRelatedClass()->getName());
 
 #endif
 
 return cxstring_createRef("");}
CXString clang_ext_Attrs_getAliasee(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::WeakRef:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::WeakRefAttr >(attr))
  return cxstring_createDup(qual_attr->getAliasee());
  break;
  case clang::attr::Alias:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::AliasAttr >(attr))
  return cxstring_createDup(qual_attr->getAliasee());
  break;
  default:
  ;}
 return cxstring_createRef("");}
CXString clang_ext_Attrs_getHandleType(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::UseHandle:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::UseHandleAttr >(attr))
  return cxstring_createDup(qual_attr->getHandleType());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::ReleaseHandle:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::ReleaseHandleAttr >(attr))
  return cxstring_createDup(qual_attr->getHandleType());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::AcquireHandle:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquireHandleAttr >(attr))
  return cxstring_createDup(qual_attr->getHandleType());
  break;
  
  #endif
  
  default:
  ;}
 return cxstring_createRef("");}
CXString clang_ext_WebAssemblyImportNameAttr_getImportName(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_8_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyImportNameAttr >(attr))
 return cxstring_createDup(qual_attr->getImportName());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_WebAssemblyImportModuleAttr_getImportModuleLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_8_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyImportModuleAttr >(attr))
 return qual_attr->getImportModuleLength();
 
 #endif
 
 return 0;}
unsigned int clang_ext_OMPDeclareVariantAttr_getDeviceKinds_Size(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return qual_attr->deviceKinds_size();
 
 #endif
 
 return 0;}
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getDeprecated(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return makeVersionTuple(qual_attr->getDeprecated());
 
 #endif
 
 return zeroVersionTuple;}
void clang_ext_NoSanitizeAttr_getSanitizers(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_7_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::NoSanitizeAttr >(attr))
 for (auto iter = qual_attr->sanitizers_begin();
 iter != qual_attr->sanitizers_end(); ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
unsigned int clang_ext_OMPDeclareVariantAttr_getScores_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return qual_attr->scores_size();
 
 #endif
 
 return 0;}
bool clang_ext_AsmLabelAttr_getIsLiteralLabel(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AsmLabelAttr >(attr))
 return qual_attr->getIsLiteralLabel();
 
 #endif
 
 return false;}
CXString clang_ext_WebAssemblyExportNameAttr_getExportName(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyExportNameAttr >(attr))
 return cxstring_createDup(qual_attr->getExportName());
 
 #endif
 
 return cxstring_createRef("");}
unsigned int clang_ext_FormatArgAttr_getFormatIdx(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::FormatArgAttr >(attr))
 return unsigned_int_of_ParamIdx(qual_attr->getFormatIdx());
 return 0;}
int clang_ext_FormatAttr_getFormatIdx(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::FormatAttr >(attr))
 return qual_attr->getFormatIdx();
 return 0;}
bool clang_ext_ArgumentWithTypeTagAttr_getIsPointer(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ArgumentWithTypeTagAttr >(attr))
 return qual_attr->getIsPointer();
 return false;}
bool clang_ext_TypeTagForDatatypeAttr_getMustBeNull(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::TypeTagForDatatypeAttr >(attr))
 return qual_attr->getMustBeNull();
 return false;}
unsigned int clang_ext_Attrs_getNameLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::Section:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::SectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangTextSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangTextSectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangRodataSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangRodataSectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::PragmaClangRelroSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangRelroSectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangDataSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangDataSectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangBSSSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangBSSSectionAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CodeSeg:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CodeSegAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::Capability:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CapabilityAttr >(attr))
  return qual_attr->getNameLength();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
unsigned int clang_ext_UuidAttr_getGuidLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::UuidAttr >(attr))
 return qual_attr->getGuidLength();
 return 0;}
CXString clang_ext_Attrs_getName(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::Section:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::SectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangTextSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangTextSectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangRodataSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangRodataSectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::PragmaClangRelroSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangRelroSectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangDataSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangDataSectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_5_0_0
  
  case clang::attr::PragmaClangBSSSection:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::PragmaClangBSSSectionAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_7_0_0
  
  case clang::attr::CodeSeg:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CodeSegAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::Capability:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::CapabilityAttr >(attr))
  return cxstring_createDup(qual_attr->getName());
  break;
  
  #endif
  
  default:
  ;}
 return cxstring_createRef("");}
unsigned int clang_ext_SuppressAttr_getDiagnosticIdentifiers_Size(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_5_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::SuppressAttr >(attr))
 return qual_attr->diagnosticIdentifiers_size();
 
 #endif
 
 return 0;}
unsigned int clang_ext_Attrs_getMessageLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_10_0_0
  
  case clang::attr::WarnUnusedResult:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::WarnUnusedResultAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #endif
  
  case clang::attr::Unavailable:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::UnavailableAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::EnableIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::EnableIfAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_4_0_0
  
  case clang::attr::DiagnoseIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DiagnoseIfAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_9_0
  
  case clang::attr::Deprecated:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DeprecatedAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::Availability:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
  return qual_attr->getMessageLength();
  break;
  
  #endif
  
  default:
  ;}
 return 0;}
unsigned int clang_ext_WebAssemblyExportNameAttr_getExportNameLength(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::WebAssemblyExportNameAttr >(attr))
 return qual_attr->getExportNameLength();
 
 #endif
 
 return 0;}
void clang_ext_CallbackAttr_getEncoding(
CXCursor cursor, void (*callback)(int , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::CallbackAttr >(attr))
 for (auto iter = qual_attr->encoding_begin();
 iter != qual_attr->encoding_end(); ++ iter)
 {auto const &item = * iter;
  callback(item, data);}
 
 #endif
 }
CXString clang_ext_Attrs_getArgumentKind(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {case clang::attr::TypeTagForDatatype:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::TypeTagForDatatypeAttr >(attr))
  return cxstring_createDup(qual_attr->getArgumentKind()->getName());
  break;
  case clang::attr::ArgumentWithTypeTag:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ArgumentWithTypeTagAttr >(attr))
  return cxstring_createDup(qual_attr->getArgumentKind()->getName());
  break;
  default:
  ;}
 return cxstring_createRef("");}
unsigned int clang_ext_MSVtorDispAttr_getVdm(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::MSVtorDispAttr >(attr))
 return qual_attr->getVdm();
 
 #endif
 
 return 0;}
bool clang_ext_AvailabilityAttr_getUnavailable(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_9_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
 return qual_attr->getUnavailable();
 
 #endif
 
 return false;}
CXCursor clang_ext_Attrs_getCond(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::EnableIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::EnableIfAttr >(attr))
  return MakeCXCursor(qual_attr->getCond(), getCursorTU(cursor));
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_4_0_0
  
  case clang::attr::DiagnoseIf:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DiagnoseIfAttr >(attr))
  return MakeCXCursor(qual_attr->getCond(), getCursorTU(cursor));
  break;
  
  #endif
  
  default:
  ;}
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
struct
clang_ext_TypeLoc clang_ext_IBOutletCollectionAttr_getInterface(
CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::IBOutletCollectionAttr >(attr))
 return
 MakeTypeLoc(qual_attr->getInterfaceLoc()->getTypeLoc(), getCursorTU(cursor));
 return MakeTypeLocInvalid(getCursorTU(cursor));}
CXString clang_ext_AnnotateAttr_getAnnotation(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AnnotateAttr >(attr))
 return cxstring_createDup(qual_attr->getAnnotation());
 return cxstring_createRef("");}
CXCursor clang_ext_OMPDeclareVariantAttr_getVariantFuncRef(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::OMPDeclareVariantAttr >(attr))
 return MakeCXCursor(qual_attr->getVariantFuncRef(), getCursorTU(cursor));
 
 #endif
 
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
unsigned int clang_ext_NoBuiltinAttr_getBuiltinNames_Size(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::NoBuiltinAttr >(attr))
 return qual_attr->builtinNames_size();
 
 #endif
 
 return 0;}
CXString clang_ext_Attrs_getKind(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_8_0_0
  
  case clang::attr::ObjCOwnership:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::ObjCOwnershipAttr >(attr))
  return cxstring_createDup(qual_attr->getKind()->getName());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_8_0_0
  
  case clang::attr::ObjCGC:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::ObjCGCAttr >(attr))
  return cxstring_createDup(qual_attr->getKind()->getName());
  break;
  
  #endif
  
  default:
  ;}
 return cxstring_createRef("");}
CXString clang_ext_Attrs_getReplacement(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_9_0
  
  case clang::attr::Deprecated:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::DeprecatedAttr >(attr))
  return cxstring_createDup(qual_attr->getReplacement());
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_9_0_0
  
  case clang::attr::Availability:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AvailabilityAttr >(attr))
  return cxstring_createDup(qual_attr->getReplacement());
  break;
  
  #endif
  
  default:
  ;}
 return cxstring_createRef("");}
unsigned int clang_ext_PatchableFunctionEntryAttr_getCount(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::PatchableFunctionEntryAttr >(attr))
 return qual_attr->getCount();
 
 #endif
 
 return 0;}
unsigned int clang_ext_AMDGPUNumSGPRAttr_getNumSGPR(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_6_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::AMDGPUNumSGPRAttr >(attr))
 return qual_attr->getNumSGPR();
 
 #endif
 
 return 0;}
CXString clang_ext_ObjCBridgeRelatedAttr_getInstanceMethod(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr =
  llvm::dyn_cast_or_null<clang::ObjCBridgeRelatedAttr >(attr))
 return cxstring_createDup(qual_attr->getInstanceMethod()->getName());
 
 #endif
 
 return cxstring_createRef("");}
void clang_ext_AbiTagAttr_getTags(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AbiTagAttr >(attr))
 for (auto iter = qual_attr->tags_begin(); iter != qual_attr->tags_end();
 ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
unsigned int clang_ext_MSP430InterruptAttr_getNumber(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::MSP430InterruptAttr >(attr))
 return qual_attr->getNumber();
 return 0;}
unsigned int clang_ext_OpenCLUnrollHintAttr_getUnrollHint(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_9_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::OpenCLUnrollHintAttr >(attr))
 return qual_attr->getUnrollHint();
 
 #endif
 
 return 0;}
void clang_ext_NoBuiltinAttr_getBuiltinNames(
CXCursor cursor, void (*callback)(CXString , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_10_0_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::NoBuiltinAttr >(attr))
 for (auto iter = qual_attr->builtinNames_begin();
 iter != qual_attr->builtinNames_end(); ++ iter)
 {auto const &item = * iter;
  callback(cxstring_createDup(item), data);}
 
 #endif
 }
unsigned int clang_ext_TargetAttr_getFeaturesStrLength(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_8_0
 
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::TargetAttr >(attr))
 return qual_attr->getFeaturesStrLength();
 
 #endif
 
 return 0;}
CXCursor clang_ext_AlignedAttr_getAlignmentExpr(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 if (auto qual_attr = llvm::dyn_cast_or_null<clang::AlignedAttr >(attr))
 return MakeCXCursor(qual_attr->getAlignmentExpr(), getCursorTU(cursor));
 return MakeCXCursorInvalid(CXCursor_InvalidCode, getCursorTU(cursor));}
bool clang_ext_MSInheritanceAttr_getBestCase(CXCursor cursor)
{auto attr = GetCursorAttr(cursor);
 
 #ifndef LLVM_VERSION_BEFORE_3_5_0
 
 if
 (auto qual_attr = llvm::dyn_cast_or_null<clang::MSInheritanceAttr >(attr))
 return qual_attr->getBestCase();
 
 #endif
 
 return false;}
void clang_ext_NonNullAttr_getArgs(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_7_0
  
  case clang::attr::Ownership:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::OwnershipAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(unsigned_int_of_ParamIdx(item), data);}
  break;
  
  #endif
  
  case clang::attr::NonNull:
  if (auto qual_attr = llvm::dyn_cast_or_null<clang::NonNullAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(unsigned_int_of_ParamIdx(item), data);}
  break;
  default:
  ;}}
void clang_ext_AcquireCapabilityAttr_getArgs(
CXCursor cursor, void (*callback)(CXCursor , void *), void *data)
{auto attr = GetCursorAttr(cursor);
 switch (attr->getKind())
 {
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::TryAcquireCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::TryAcquireCapabilityAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #endif
  
  case clang::attr::SharedTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::SharedTrylockFunctionAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::RequiresCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::RequiresCapabilityAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #endif
  
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::ReleaseCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ReleaseCapabilityAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #endif
  
  case clang::attr::LocksExcluded:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::LocksExcludedAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  case clang::attr::ExclusiveTrylockFunction:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::ExclusiveTrylockFunctionAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  case clang::attr::AssertSharedLock:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertSharedLockAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  case clang::attr::AssertExclusiveLock:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertExclusiveLockAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #ifndef LLVM_VERSION_BEFORE_6_0_0
  
  case clang::attr::AssertCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AssertCapabilityAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #endif
  
  case clang::attr::AcquiredBefore:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquiredBeforeAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  case clang::attr::AcquiredAfter:
  if
  (auto qual_attr = llvm::dyn_cast_or_null<clang::AcquiredAfterAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #ifndef LLVM_VERSION_BEFORE_3_5_0
  
  case clang::attr::AcquireCapability:
  if
  (auto qual_attr =
   llvm::dyn_cast_or_null<clang::AcquireCapabilityAttr >(attr))
  for (auto iter = qual_attr->args_begin(); iter != qual_attr->args_end();
  ++ iter)
  {auto const &item = * iter;
   callback(MakeCXCursor(item, getCursorTU(cursor)), data);}
  break;
  
  #endif
  
  default:
  ;}}
