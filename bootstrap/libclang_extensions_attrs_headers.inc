/* This file is auto-generated by generate_attrs tool.
 * It should not be modified by hand and it should not be versioned
 * (except by continuous integration on the dedicated bootstrap branch). */
enum clang_ext_AcquireCapability_spelling {
clang_ext_AcquireCapability_GNU_acquire_capability,
clang_ext_AcquireCapability_CXX11_clang_acquire_capability,
clang_ext_AcquireCapability_GNU_acquire_shared_capability,
clang_ext_AcquireCapability_CXX11_clang_acquire_shared_capability,
clang_ext_AcquireCapability_GNU_exclusive_lock_function,
clang_ext_AcquireCapability_GNU_shared_lock_function,
clang_ext_AcquireCapability_SpellingNotCalculated};
enum
clang_ext_AcquireCapability_spelling clang_ext_AcquireCapability_getSpelling(
CXCursor cursor);
enum clang_ext_Aligned_spelling {
clang_ext_Aligned_GNU_aligned,
clang_ext_Aligned_CXX11_gnu_aligned,
clang_ext_Aligned_Declspec_align,
clang_ext_Aligned_Keyword_alignas,
clang_ext_Aligned_Keyword_Alignas,
clang_ext_Aligned_SpellingNotCalculated};
enum
clang_ext_Aligned_spelling clang_ext_Aligned_getSpelling(CXCursor cursor);
enum clang_ext_AlwaysInline_spelling {
clang_ext_AlwaysInline_GNU_always_inline,
clang_ext_AlwaysInline_CXX11_gnu_always_inline,
clang_ext_AlwaysInline_Keyword_forceinline,
clang_ext_AlwaysInline_SpellingNotCalculated};
enum
clang_ext_AlwaysInline_spelling clang_ext_AlwaysInline_getSpelling(
CXCursor cursor);
enum clang_ext_ArgumentWithTypeTag_spelling {
clang_ext_ArgumentWithTypeTag_GNU_argument_with_type_tag,
clang_ext_ArgumentWithTypeTag_CXX11_clang_argument_with_type_tag,
clang_ext_ArgumentWithTypeTag_C2x_clang_argument_with_type_tag,
clang_ext_ArgumentWithTypeTag_GNU_pointer_with_type_tag,
clang_ext_ArgumentWithTypeTag_CXX11_clang_pointer_with_type_tag,
clang_ext_ArgumentWithTypeTag_C2x_clang_pointer_with_type_tag,
clang_ext_ArgumentWithTypeTag_SpellingNotCalculated};
enum
clang_ext_ArgumentWithTypeTag_spelling
clang_ext_ArgumentWithTypeTag_getSpelling(CXCursor cursor);
enum clang_ext_AssertCapability_spelling {
clang_ext_AssertCapability_GNU_assert_capability,
clang_ext_AssertCapability_CXX11_clang_assert_capability,
clang_ext_AssertCapability_GNU_assert_shared_capability,
clang_ext_AssertCapability_CXX11_clang_assert_shared_capability,
clang_ext_AssertCapability_SpellingNotCalculated};
enum
clang_ext_AssertCapability_spelling clang_ext_AssertCapability_getSpelling(
CXCursor cursor);
enum clang_ext_Capability_spelling {
clang_ext_Capability_GNU_capability,
clang_ext_Capability_CXX11_clang_capability,
clang_ext_Capability_GNU_shared_capability,
clang_ext_Capability_CXX11_clang_shared_capability,
clang_ext_Capability_SpellingNotCalculated};
enum
clang_ext_Capability_spelling clang_ext_Capability_getSpelling(
CXCursor cursor);
enum clang_ext_ConstInit_spelling {
clang_ext_ConstInit_Keyword_constinit,
clang_ext_ConstInit_GNU_require_constant_initialization,
clang_ext_ConstInit_CXX11_clang_require_constant_initialization,
clang_ext_ConstInit_SpellingNotCalculated};
enum
clang_ext_ConstInit_spelling clang_ext_ConstInit_getSpelling(CXCursor cursor);
enum clang_ext_Final_spelling {
clang_ext_Final_Keyword_final,
clang_ext_Final_Keyword_sealed,
clang_ext_Final_SpellingNotCalculated};
enum clang_ext_Final_spelling clang_ext_Final_getSpelling(CXCursor cursor);
enum clang_ext_LoopHint_spelling {
clang_ext_LoopHint_Pragma_clang_loop,
clang_ext_LoopHint_Pragma_unroll,
clang_ext_LoopHint_Pragma_nounroll,
clang_ext_LoopHint_Pragma_unroll_and_jam,
clang_ext_LoopHint_Pragma_nounroll_and_jam,
clang_ext_LoopHint_SpellingNotCalculated};
enum
clang_ext_LoopHint_spelling clang_ext_LoopHint_getSpelling(CXCursor cursor);
enum clang_ext_MSInheritance_spelling {
clang_ext_MSInheritance_Keyword_single_inheritance,
clang_ext_MSInheritance_Keyword_multiple_inheritance,
clang_ext_MSInheritance_Keyword_virtual_inheritance,
clang_ext_MSInheritance_Keyword_unspecified_inheritance,
clang_ext_MSInheritance_SpellingNotCalculated};
enum
clang_ext_MSInheritance_spelling clang_ext_MSInheritance_getSpelling(
CXCursor cursor);
enum clang_ext_MipsLongCall_spelling {
clang_ext_MipsLongCall_GNU_long_call,
clang_ext_MipsLongCall_CXX11_gnu_long_call,
clang_ext_MipsLongCall_GNU_far,
clang_ext_MipsLongCall_CXX11_gnu_far,
clang_ext_MipsLongCall_SpellingNotCalculated};
enum
clang_ext_MipsLongCall_spelling clang_ext_MipsLongCall_getSpelling(
CXCursor cursor);
enum clang_ext_MipsShortCall_spelling {
clang_ext_MipsShortCall_GNU_short_call,
clang_ext_MipsShortCall_CXX11_gnu_short_call,
clang_ext_MipsShortCall_GNU_near,
clang_ext_MipsShortCall_CXX11_gnu_near,
clang_ext_MipsShortCall_SpellingNotCalculated};
enum
clang_ext_MipsShortCall_spelling clang_ext_MipsShortCall_getSpelling(
CXCursor cursor);
enum clang_ext_OpenCLAccess_spelling {
clang_ext_OpenCLAccess_Keyword_read_only,
clang_ext_OpenCLAccess_Keyword_write_only,
clang_ext_OpenCLAccess_Keyword_read_write,
clang_ext_OpenCLAccess_SpellingNotCalculated};
enum
clang_ext_OpenCLAccess_spelling clang_ext_OpenCLAccess_getSpelling(
CXCursor cursor);
enum clang_ext_OpenCLConstantAddressSpace_spelling {
clang_ext_OpenCLConstantAddressSpace_Keyword_constant,
clang_ext_OpenCLConstantAddressSpace_GNU_opencl_constant,
clang_ext_OpenCLConstantAddressSpace_CXX11_clang_opencl_constant,
clang_ext_OpenCLConstantAddressSpace_C2x_clang_opencl_constant,
clang_ext_OpenCLConstantAddressSpace_SpellingNotCalculated};
enum
clang_ext_OpenCLConstantAddressSpace_spelling
clang_ext_OpenCLConstantAddressSpace_getSpelling(CXCursor cursor);
enum clang_ext_OpenCLGenericAddressSpace_spelling {
clang_ext_OpenCLGenericAddressSpace_Keyword_generic,
clang_ext_OpenCLGenericAddressSpace_GNU_opencl_generic,
clang_ext_OpenCLGenericAddressSpace_CXX11_clang_opencl_generic,
clang_ext_OpenCLGenericAddressSpace_C2x_clang_opencl_generic,
clang_ext_OpenCLGenericAddressSpace_SpellingNotCalculated};
enum
clang_ext_OpenCLGenericAddressSpace_spelling
clang_ext_OpenCLGenericAddressSpace_getSpelling(CXCursor cursor);
enum clang_ext_OpenCLGlobalAddressSpace_spelling {
clang_ext_OpenCLGlobalAddressSpace_Keyword_global,
clang_ext_OpenCLGlobalAddressSpace_GNU_opencl_global,
clang_ext_OpenCLGlobalAddressSpace_CXX11_clang_opencl_global,
clang_ext_OpenCLGlobalAddressSpace_C2x_clang_opencl_global,
clang_ext_OpenCLGlobalAddressSpace_SpellingNotCalculated};
enum
clang_ext_OpenCLGlobalAddressSpace_spelling
clang_ext_OpenCLGlobalAddressSpace_getSpelling(CXCursor cursor);
enum clang_ext_OpenCLLocalAddressSpace_spelling {
clang_ext_OpenCLLocalAddressSpace_Keyword_local,
clang_ext_OpenCLLocalAddressSpace_GNU_opencl_local,
clang_ext_OpenCLLocalAddressSpace_CXX11_clang_opencl_local,
clang_ext_OpenCLLocalAddressSpace_C2x_clang_opencl_local,
clang_ext_OpenCLLocalAddressSpace_SpellingNotCalculated};
enum
clang_ext_OpenCLLocalAddressSpace_spelling
clang_ext_OpenCLLocalAddressSpace_getSpelling(CXCursor cursor);
enum clang_ext_OpenCLPrivateAddressSpace_spelling {
clang_ext_OpenCLPrivateAddressSpace_Keyword_private,
clang_ext_OpenCLPrivateAddressSpace_GNU_opencl_private,
clang_ext_OpenCLPrivateAddressSpace_CXX11_clang_opencl_private,
clang_ext_OpenCLPrivateAddressSpace_C2x_clang_opencl_private,
clang_ext_OpenCLPrivateAddressSpace_SpellingNotCalculated};
enum
clang_ext_OpenCLPrivateAddressSpace_spelling
clang_ext_OpenCLPrivateAddressSpace_getSpelling(CXCursor cursor);
enum clang_ext_Ownership_spelling {
clang_ext_Ownership_GNU_ownership_holds,
clang_ext_Ownership_CXX11_clang_ownership_holds,
clang_ext_Ownership_C2x_clang_ownership_holds,
clang_ext_Ownership_GNU_ownership_returns,
clang_ext_Ownership_CXX11_clang_ownership_returns,
clang_ext_Ownership_C2x_clang_ownership_returns,
clang_ext_Ownership_GNU_ownership_takes,
clang_ext_Ownership_CXX11_clang_ownership_takes,
clang_ext_Ownership_C2x_clang_ownership_takes,
clang_ext_Ownership_SpellingNotCalculated};
enum
clang_ext_Ownership_spelling clang_ext_Ownership_getSpelling(CXCursor cursor);
enum clang_ext_PassObjectSize_spelling {
clang_ext_PassObjectSize_GNU_pass_object_size,
clang_ext_PassObjectSize_CXX11_clang_pass_object_size,
clang_ext_PassObjectSize_C2x_clang_pass_object_size,
clang_ext_PassObjectSize_GNU_pass_dynamic_object_size,
clang_ext_PassObjectSize_CXX11_clang_pass_dynamic_object_size,
clang_ext_PassObjectSize_C2x_clang_pass_dynamic_object_size,
clang_ext_PassObjectSize_SpellingNotCalculated};
enum
clang_ext_PassObjectSize_spelling clang_ext_PassObjectSize_getSpelling(
CXCursor cursor);
enum clang_ext_ReleaseCapability_spelling {
clang_ext_ReleaseCapability_GNU_release_capability,
clang_ext_ReleaseCapability_CXX11_clang_release_capability,
clang_ext_ReleaseCapability_GNU_release_shared_capability,
clang_ext_ReleaseCapability_CXX11_clang_release_shared_capability,
clang_ext_ReleaseCapability_GNU_release_generic_capability,
clang_ext_ReleaseCapability_CXX11_clang_release_generic_capability,
clang_ext_ReleaseCapability_GNU_unlock_function,
clang_ext_ReleaseCapability_CXX11_clang_unlock_function,
clang_ext_ReleaseCapability_SpellingNotCalculated};
enum
clang_ext_ReleaseCapability_spelling clang_ext_ReleaseCapability_getSpelling(
CXCursor cursor);
enum clang_ext_RequiresCapability_spelling {
clang_ext_RequiresCapability_GNU_requires_capability,
clang_ext_RequiresCapability_CXX11_clang_requires_capability,
clang_ext_RequiresCapability_GNU_exclusive_locks_required,
clang_ext_RequiresCapability_CXX11_clang_exclusive_locks_required,
clang_ext_RequiresCapability_GNU_requires_shared_capability,
clang_ext_RequiresCapability_CXX11_clang_requires_shared_capability,
clang_ext_RequiresCapability_GNU_shared_locks_required,
clang_ext_RequiresCapability_CXX11_clang_shared_locks_required,
clang_ext_RequiresCapability_SpellingNotCalculated};
enum
clang_ext_RequiresCapability_spelling
clang_ext_RequiresCapability_getSpelling(CXCursor cursor);
enum clang_ext_Restrict_spelling {
clang_ext_Restrict_Declspec_restrict,
clang_ext_Restrict_GNU_malloc,
clang_ext_Restrict_CXX11_gnu_malloc,
clang_ext_Restrict_SpellingNotCalculated};
enum
clang_ext_Restrict_spelling clang_ext_Restrict_getSpelling(CXCursor cursor);
enum clang_ext_Section_spelling {
clang_ext_Section_GNU_section,
clang_ext_Section_CXX11_gnu_section,
clang_ext_Section_Declspec_allocate,
clang_ext_Section_SpellingNotCalculated};
enum
clang_ext_Section_spelling clang_ext_Section_getSpelling(CXCursor cursor);
enum clang_ext_TryAcquireCapability_spelling {
clang_ext_TryAcquireCapability_GNU_try_acquire_capability,
clang_ext_TryAcquireCapability_CXX11_clang_try_acquire_capability,
clang_ext_TryAcquireCapability_GNU_try_acquire_shared_capability,
clang_ext_TryAcquireCapability_CXX11_clang_try_acquire_shared_capability,
clang_ext_TryAcquireCapability_SpellingNotCalculated};
enum
clang_ext_TryAcquireCapability_spelling
clang_ext_TryAcquireCapability_getSpelling(CXCursor cursor);
enum clang_ext_Unused_spelling {
clang_ext_Unused_CXX11_maybe_unused,
clang_ext_Unused_GNU_unused,
clang_ext_Unused_CXX11_gnu_unused,
clang_ext_Unused_C2x_maybe_unused,
clang_ext_Unused_SpellingNotCalculated};
enum clang_ext_Unused_spelling clang_ext_Unused_getSpelling(CXCursor cursor);
enum clang_ext_WarnUnusedResult_spelling {
clang_ext_WarnUnusedResult_CXX11_nodiscard,
clang_ext_WarnUnusedResult_C2x_nodiscard,
clang_ext_WarnUnusedResult_CXX11_clang_warn_unused_result,
clang_ext_WarnUnusedResult_GNU_warn_unused_result,
clang_ext_WarnUnusedResult_CXX11_gnu_warn_unused_result,
clang_ext_WarnUnusedResult_SpellingNotCalculated};
enum
clang_ext_WarnUnusedResult_spelling clang_ext_WarnUnusedResult_getSpelling(
CXCursor cursor);
enum clang_ext_XRayInstrument_spelling {
clang_ext_XRayInstrument_GNU_xray_always_instrument,
clang_ext_XRayInstrument_CXX11_clang_xray_always_instrument,
clang_ext_XRayInstrument_C2x_clang_xray_always_instrument,
clang_ext_XRayInstrument_GNU_xray_never_instrument,
clang_ext_XRayInstrument_CXX11_clang_xray_never_instrument,
clang_ext_XRayInstrument_C2x_clang_xray_never_instrument,
clang_ext_XRayInstrument_SpellingNotCalculated};
enum
clang_ext_XRayInstrument_spelling clang_ext_XRayInstrument_getSpelling(
CXCursor cursor); CXString clang_ext_TLSModelAttr_getModel(CXCursor cursor);
int clang_ext_FormatAttr_getFirstArg(CXCursor cursor);
unsigned int clang_ext_Attrs_getAliaseeLength(CXCursor cursor);
unsigned int clang_ext_AMDGPUNumVGPRAttr_getNumVGPR(CXCursor cursor);
CXString clang_ext_ObjCRuntimeNameAttr_getMetadataName(CXCursor cursor);
CXCursor clang_ext_Attrs_getMin(CXCursor cursor);
void clang_ext_OMPDeclareVariantAttr_getImplVendors(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
CXString clang_ext_IFuncAttr_getResolver(CXCursor cursor);
CXCursor clang_ext_AssumeAlignedAttr_getOffset(CXCursor cursor);
int clang_ext_PatchableFunctionEntryAttr_getOffset(CXCursor cursor);
unsigned int clang_ext_AllocAlignAttr_getParamIndex(CXCursor cursor);
unsigned int clang_ext_WebAssemblyImportNameAttr_getImportNameLength(
CXCursor cursor); int clang_ext_SentinelAttr_getSentinel(CXCursor cursor);
CXCursor clang_ext_Attrs_getSuccessValue(CXCursor cursor);
unsigned int clang_ext_Attrs_getCpus_Size(CXCursor cursor);
unsigned int clang_ext_TLSModelAttr_getModelLength(CXCursor cursor);
bool clang_ext_ExternalSourceSymbolAttr_getGeneratedDeclaration(
CXCursor cursor);
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getIntroduced(
CXCursor cursor);
unsigned int clang_ext_MaxFieldAlignmentAttr_getAlignment(CXCursor cursor);
CXCursor clang_ext_Attrs_getAlignment(CXCursor cursor);
void clang_ext_SuppressAttr_getDiagnosticIdentifiers(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
struct clang_ext_TypeLoc clang_ext_Attrs_getDerefType(CXCursor cursor);
int clang_ext_AddressSpaceAttr_getAddressSpace(CXCursor cursor);
CXString clang_ext_ModeAttr_getMode(CXCursor cursor);
struct
clang_ext_TypeLoc clang_ext_TypeTagForDatatypeAttr_getMatchingCType(
CXCursor cursor); CXCursor clang_ext_Attrs_getArg(CXCursor cursor);
unsigned int clang_ext_AnnotateAttr_getAnnotationLength(CXCursor cursor);
void clang_ext_Attrs_getCpus(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
void clang_ext_OMPDeclareVariantAttr_getDeviceKinds(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
unsigned int clang_ext_OpenCLIntelReqdSubGroupSizeAttr_getSubGroupSize(
CXCursor cursor);
unsigned int clang_ext_LayoutVersionAttr_getVersion(CXCursor cursor);
unsigned int clang_ext_ArgumentWithTypeTagAttr_getArgumentIdx(
CXCursor cursor); int clang_ext_SentinelAttr_getNullPos(CXCursor cursor);
void clang_ext_OMPDeclareVariantAttr_getScores(
CXCursor cursor, void (*callback)(CXCursor , void *), void *data);
bool clang_ext_AvailabilityAttr_getStrict(CXCursor cursor);
unsigned int clang_ext_Attrs_getArgs_Size(CXCursor cursor);
CXString clang_ext_OwnershipAttr_getModule(CXCursor cursor);
unsigned int clang_ext_OMPDeclareVariantAttr_getCtxSelectors_Size(
CXCursor cursor);
unsigned int clang_ext_MinVectorWidthAttr_getVectorWidth(CXCursor cursor);
CXCursor clang_ext_CUDALaunchBoundsAttr_getMinBlocks(CXCursor cursor);
bool clang_ext_TypeTagForDatatypeAttr_getLayoutCompatible(CXCursor cursor);
unsigned int clang_ext_OMPDeclareVariantAttr_getImplVendors_Size(
CXCursor cursor);
unsigned int clang_ext_InitSegAttr_getSectionLength(CXCursor cursor);
unsigned int clang_ext_ExternalSourceSymbolAttr_getDefinedInLength(
CXCursor cursor);
struct
clang_ext_TypeLoc clang_ext_VecTypeHintAttr_getTypeHint(CXCursor cursor);
unsigned int clang_ext_OMPCaptureKindAttr_getCaptureKind(CXCursor cursor);
CXString clang_ext_FormatAttr_getType(CXCursor cursor);
int clang_ext_PassObjectSizeAttr_getType(CXCursor cursor);
CXString clang_ext_AsmLabelAttr_getLabel(CXCursor cursor);
unsigned int clang_ext_OMPDeclareVariantAttr_getCtxSelectorSets_Size(
CXCursor cursor);
CXString clang_ext_AvailabilityAttr_getPlatform(CXCursor cursor);
CXCursor clang_ext_Attrs_getMax(CXCursor cursor);
void clang_ext_OMPDeclareVariantAttr_getCtxSelectorSets(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data);
unsigned int clang_ext_ExternalSourceSymbolAttr_getLanguageLength(
CXCursor cursor);
unsigned int clang_ext_ObjCRuntimeNameAttr_getMetadataNameLength(
CXCursor cursor);
CXString clang_ext_TargetAttr_getFeaturesStr(CXCursor cursor);
unsigned int clang_ext_InitPriorityAttr_getPriority(CXCursor cursor);
int clang_ext_Attrs_getPriority(CXCursor cursor);
CXString clang_ext_Attrs_getBridgedType(CXCursor cursor);
unsigned int clang_ext_Attrs_getYDim(CXCursor cursor);
CXString clang_ext_ObjCBridgeRelatedAttr_getClassMethod(CXCursor cursor);
CXCursor clang_ext_OMPReferencedVarAttr_getRef(CXCursor cursor);
struct
clang_ext_DeclarationName clang_ext_CleanupAttr_getFunctionDecl(
CXCursor cursor);
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getObsoleted(
CXCursor cursor);
unsigned int clang_ext_AllocSizeAttr_getElemSizeParam(CXCursor cursor);
CXString clang_ext_ExternalSourceSymbolAttr_getLanguage(CXCursor cursor);
unsigned int clang_ext_Attrs_getReplacementLength(CXCursor cursor);
CXString clang_ext_InitSegAttr_getSection(CXCursor cursor);
CXString clang_ext_ExternalSourceSymbolAttr_getDefinedIn(CXCursor cursor);
unsigned int clang_ext_AllocSizeAttr_getNumElemsParam(CXCursor cursor);
unsigned int clang_ext_XRayLogArgsAttr_getArgumentCount(CXCursor cursor);
void clang_ext_OMPDeclareVariantAttr_getCtxSelectors(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data);
unsigned int clang_ext_IFuncAttr_getResolverLength(CXCursor cursor);
CXString clang_ext_Attrs_getMessage(CXCursor cursor);
unsigned int clang_ext_AsmLabelAttr_getLabelLength(CXCursor cursor);
unsigned int clang_ext_ArgumentWithTypeTagAttr_getTypeTagIdx(CXCursor cursor);
unsigned int clang_ext_AbiTagAttr_getTags_Size(CXCursor cursor);
CXString clang_ext_UuidAttr_getGuid(CXCursor cursor);
CXCursor clang_ext_CUDALaunchBoundsAttr_getMaxThreads(CXCursor cursor);
CXString clang_ext_ArmMveAliasAttr_getBuiltinName(CXCursor cursor);
CXString clang_ext_WebAssemblyImportModuleAttr_getImportModule(
CXCursor cursor); unsigned int clang_ext_Attrs_getZDim(CXCursor cursor);
unsigned int clang_ext_NoSanitizeAttr_getSanitizers_Size(CXCursor cursor);
unsigned int clang_ext_CallbackAttr_getEncoding_Size(CXCursor cursor);
unsigned int clang_ext_Attrs_getHandleTypeLength(CXCursor cursor);
unsigned int clang_ext_Attrs_getXDim(CXCursor cursor);
CXString clang_ext_ObjCBridgeRelatedAttr_getRelatedClass(CXCursor cursor);
CXString clang_ext_Attrs_getAliasee(CXCursor cursor);
CXString clang_ext_Attrs_getHandleType(CXCursor cursor);
CXString clang_ext_WebAssemblyImportNameAttr_getImportName(CXCursor cursor);
unsigned int clang_ext_WebAssemblyImportModuleAttr_getImportModuleLength(
CXCursor cursor);
unsigned int clang_ext_OMPDeclareVariantAttr_getDeviceKinds_Size(
CXCursor cursor);
struct
clang_ext_VersionTuple clang_ext_AvailabilityAttr_getDeprecated(
CXCursor cursor);
void clang_ext_NoSanitizeAttr_getSanitizers(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
unsigned int clang_ext_OMPDeclareVariantAttr_getScores_Size(CXCursor cursor);
bool clang_ext_AsmLabelAttr_getIsLiteralLabel(CXCursor cursor);
CXString clang_ext_WebAssemblyExportNameAttr_getExportName(CXCursor cursor);
unsigned int clang_ext_FormatArgAttr_getFormatIdx(CXCursor cursor);
int clang_ext_FormatAttr_getFormatIdx(CXCursor cursor);
bool clang_ext_ArgumentWithTypeTagAttr_getIsPointer(CXCursor cursor);
bool clang_ext_TypeTagForDatatypeAttr_getMustBeNull(CXCursor cursor);
unsigned int clang_ext_Attrs_getNameLength(CXCursor cursor);
unsigned int clang_ext_UuidAttr_getGuidLength(CXCursor cursor);
CXString clang_ext_Attrs_getName(CXCursor cursor);
unsigned int clang_ext_SuppressAttr_getDiagnosticIdentifiers_Size(
CXCursor cursor);
unsigned int clang_ext_Attrs_getMessageLength(CXCursor cursor);
unsigned int clang_ext_WebAssemblyExportNameAttr_getExportNameLength(
CXCursor cursor);
void clang_ext_CallbackAttr_getEncoding(
CXCursor cursor, void (*callback)(int , void *), void *data);
CXString clang_ext_Attrs_getArgumentKind(CXCursor cursor);
unsigned int clang_ext_MSVtorDispAttr_getVdm(CXCursor cursor);
bool clang_ext_AvailabilityAttr_getUnavailable(CXCursor cursor);
CXCursor clang_ext_Attrs_getCond(CXCursor cursor);
struct
clang_ext_TypeLoc clang_ext_IBOutletCollectionAttr_getInterface(
CXCursor cursor);
CXString clang_ext_AnnotateAttr_getAnnotation(CXCursor cursor);
CXCursor clang_ext_OMPDeclareVariantAttr_getVariantFuncRef(CXCursor cursor);
unsigned int clang_ext_NoBuiltinAttr_getBuiltinNames_Size(CXCursor cursor);
CXString clang_ext_Attrs_getKind(CXCursor cursor);
CXString clang_ext_Attrs_getReplacement(CXCursor cursor);
unsigned int clang_ext_PatchableFunctionEntryAttr_getCount(CXCursor cursor);
unsigned int clang_ext_AMDGPUNumSGPRAttr_getNumSGPR(CXCursor cursor);
CXString clang_ext_ObjCBridgeRelatedAttr_getInstanceMethod(CXCursor cursor);
void clang_ext_AbiTagAttr_getTags(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
unsigned int clang_ext_MSP430InterruptAttr_getNumber(CXCursor cursor);
unsigned int clang_ext_OpenCLUnrollHintAttr_getUnrollHint(CXCursor cursor);
void clang_ext_NoBuiltinAttr_getBuiltinNames(
CXCursor cursor, void (*callback)(CXString , void *), void *data);
unsigned int clang_ext_TargetAttr_getFeaturesStrLength(CXCursor cursor);
CXCursor clang_ext_AlignedAttr_getAlignmentExpr(CXCursor cursor);
bool clang_ext_MSInheritanceAttr_getBestCase(CXCursor cursor);
void clang_ext_NonNullAttr_getArgs(
CXCursor cursor, void (*callback)(unsigned int , void *), void *data);
void clang_ext_AcquireCapabilityAttr_getArgs(
CXCursor cursor, void (*callback)(CXCursor , void *), void *data);
